;; Utilities

(code strlen
  (set l1 l0)
  (jmp .test)
.loop
  (add l0 1)
.test
  (set l2 (u8 l0))
  (cmp l2 0)
  (jne .loop)
  (sub l0 l1)
  (ret))

(code strcpy
  (jmp .test)
.loop
  (add l0 1)
  (add l1 1)
.test
  (set l2 (u8 l1))
  (set (u8 l0) l2)
  (cmp l2 0)
  (jne .loop)
  (ret))

(code streq
  (jmp .test)
.loop
  (add l0 1)
  (add l1 1)
.test
  (set l2 (u8 l0))
  (set l3 (u8 l1))
  (cmp l2 l3)
  (je .eq)
  (set l0 0)
  (ret)
.eq
  (cmp l2 0)
  (jne .loop)
  (set l0 1)
  (ret))

(code strneq
  ;; l0 - nul-terminated string
  ;; l1 - counted string
  ;; l2 - length of counted string
  (jmp .test)
.loop
  (add l0 1)
  (add l1 1)
  (sub l2 1)
.test
  (set l3 (u8 l0))
  (cmp l2 0)
  (jne .cmp)
  (cmp l3 0)
  (jne .not-eq)
  (set l0 1)
  (ret)
.cmp
  (set l4 (u8 l1))
  (cmp l3 l4)
  (je .eq)
.not-eq
  (set l0 0)
  (ret)
.eq
  (cmp l3 0)
  (jne .loop)
  (set l0 1)
  (ret))

;; Syscalls

;; Args go to rdi, rsi, rdx, r10, r8, r9, number to rax.
;; Our names: l4,  l3,  l2,  l7,  l5, l6, number to l0.
;; Args:      l0,  l1,  l2,  l3,  l4, l5

(def (syscall)
  (1 0x0F 0x05))

(def (defsyscall ?func ?nsys ?nargs)
  (code ?func
    (sel (>= ?nargs 4)
         (set l7 l3)   ; r10
         (begin))
    (sel (>= ?nargs 6)
         (set l6 l5)   ; r9
         (begin))
    (sel (>= ?nargs 5)
         (set l5 l4)   ; r8
         (begin))
    (sel (>= ?nargs 1)
         (set l4 l0)   ; rdi
         (begin))
    (sel (>= ?nargs 2)
         (set l3 l1)   ; rsi
         (begin))
    ;; (set rdx l2) rdx = l2
    (set l0 ?nsys)
    (syscall)
    (ret)))

(defsyscall sys-read         0  3)
(defsyscall sys-write        1  3)
(defsyscall sys-open         2  3)
(defsyscall sys-close        3  1)
(defsyscall sys-fstat        5  2)
(defsyscall sys-mmap         9  6)
(defsyscall sys-munmap      11  2)
(defsyscall sys-brk         12  1)
(defsyscall sys-exit        60  1)
(defsyscall sys-ftruncate   77  2)

(defstruct sys-fstat-buf
  (u64 st_dev)
  (u64 st_ino)
  (u64 st_nlink)
  (u32 st_mode)
  (u32 st_uid)
  (u32 st_gid)
  (u32 st_pad0)
  (u64 st_rdev)
  (s64 st_size)
  (s64 st_blksize)
  (s64 st_blocks)
  (s64 st_atime_sec)
  (s64 st_atime_nsec)
  (s64 st_mtime_sec)
  (s64 st_mtime_nsec)
  (s64 st_ctime_sec)
  (s64 st_ctime_nsec)
  (s64 st_pad1)
  (s64 st_pad2)
  (s64 st_pad3))

(code print
  (push l0)
  (call strlen)
  (set l2 l0)
  (set l0 1)
  (pop l1)
  (jmp sys-write))

(code newline
  (set l0 1)
  (let l1 (u8 newline-string))
  (set l2 1)
  (jmp sys-write))

(code newline-string
  (1 :nl))
