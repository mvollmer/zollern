@** The editor

This is the standard text editor of Zollern. Like everything else,
it is rather simple and inefficient, but also a good example
of how much one can get done with very little code.

It can cut-and-paste, highlight matching parentheses, and indent
s-expressions, for example, but there is no undo.

Key bindings are inspired by Emacs, as far as they go, and the
editor is not extensible at all.

The editor can be used as a full-screen application on its own
to edit files, or be embedded within the interface of another
application, to edit arbitrary text input. The shell uses a editor
instance when prompting for the name of a new file, for example.

@* Text buffers

The text that a editor instance works with is stored in a [code
textbuf] structure. Once a suitable [code textbuf] has been created,
one can create a editor instance for it.

The main job of a [code textbuf] is to manage memory pages. A
file can be larger than one page...

@=

(struct ed/textbuf
  (textbuf-pages u64 32)
  (textbuf-page-count u64)
  (textbuf-len u64))

(fun (ed/textbuf-init tb)
  (set (ed/textbuf-page-count tb) 0)
  (set (ed/textbuf-len tb) 0))

(fun (ed/textbuf-fini tb)
  (var i 0)
  (while (< i (ed/textbuf-page-count tb))
    (sys/page-put (ed/textbuf-pages tb i))
    (set i (+ i 1))))

(fun (ed/textbuf-new)
  (var tb (mem/alloc ed/textbuf))
  (ed/textbuf-init tb)
  tb)

(fun (ed/textbuf-free tb)
  (ed/textbuf-fini tb)
  (mem/free tb))

(fun (ed/textbuf-grow tb max)
  (var new-page-count (/ (+ max sys/page-size -1) sys/page-size))
  (if ((<= new-page-count 32)
       (var i (ed/textbuf-page-count tb))
       (while (< i new-page-count)
         (set (ed/textbuf-pages tb i) (sys/page-get))
         (set i (+ i 1)))
       (set (ed/textbuf-page-count tb) new-page-count)
       1)
      (else
       0)))

(fun (ed/textbuf-get-char tb pos)
  (var page (/ pos sys/page-size))
  (u8 (ed/textbuf-pages tb page) (- pos (* page sys/page-size))))

(fun (ed/textbuf-set-char tb pos char)
  (var page (/ pos sys/page-size))
  (set (u8 (ed/textbuf-pages tb page) (- pos (* page sys/page-size))) char))

(fun (ed/textbuf-read-file tb fb)
  (while (and (fs/read fb)
              (ed/textbuf-grow tb (+ (ed/textbuf-len tb) (fs/rbuf-size fb))))
    (begin
      (var pos (ed/textbuf-len tb))
      (var i 0)
      (var len (fs/rbuf-size fb))
      (while (< i len)
        (ed/textbuf-set-char tb pos (u8 (fs/rbuf-start fb) i))
        (set i (+ i 1))
        (set pos (+ pos 1)))
      (set (ed/textbuf-len tb) pos))))

(fun (ed/textbuf-write-region tb fb pos len)
  (var page (/ pos sys/page-size))
  (set pos (- pos (* page sys/page-size)))
  (while (> len 0)
    (var n (- sys/page-size pos))
    (if ((< len n)
         (set n len)))
    (fs/write fb (+ (ed/textbuf-pages tb page) pos) n)
    (set len (- len n))
    (set pos 0)
    (set page (+ page 1))))

(fun (ed/textbuf-write-file tb fb)
  (ed/textbuf-write-region tb fb 0 (ed/textbuf-len tb)))

(fun (ed/textbuf-maybe-as-string tb)
  (var len (ed/textbuf-len tb))
  (if ((< len sys/page-size)
       (ed/textbuf-grow tb (+ len 1)) ;; this only matters for len == 0
       (var str (ed/textbuf-pages tb 0))
       (set (u8 str len) 0)
       str)
      (else
       0)))

@* The instance data structure
@=

(defconst ed/search-len-max 128)

(struct ed/data
  ;; Window
  (lft u32)
  (top u32)
  (rgt u32)
  (bot u32)
  (row-height u32)
  (col-width u32)
  (rows u32)
  (cols u32)
  ;; Buffer
  (buf u64)
  ;; Mode
  (title u64)
  ;; Search state
  (search-len s32)
  (search-match-len s32)
  (search-buf u8 ed/search-len-max)
  ;; Editing state
  (dirty u32)
  dirty-callback
  dirty-callback-data
  (window-top u64)
  (mark u64)
  (highlight-1 u64)
  (highlight-2 u64)
  (point u64)
  (last-input s32)
  (last-state s32))

(fun (ed/new title buf)
  (var ed (mem/alloc ed/data))
  (set (ed/buf ed) buf)
  (set (ed/title ed) title)
  (set (ed/search-len ed) -1)
  (set (ed/search-buf ed 0) 0)
  (set (ed/mark ed) -1)
  (set (ed/point ed) 0)
  (set (ed/window-top ed) 0)
  (set (ed/dirty ed) 0)
  (set (ed/dirty-callback ed) 0)
  ed)

(fun (ed/free ed)
  (mem/free ed))

@* Abstracting the buffer
@=

(def (ed/char ?ed ?pos)
  (ed/textbuf-get-char (ed/buf ?ed) ?pos))

(fun (ed/set-char ed pos char)
  (ed/textbuf-set-char (ed/buf ed) pos char)
  (if ((not (ed/dirty ed))
       (set (ed/dirty ed) 1)
       (if ((ed/dirty-callback ed)
            ((ed/dirty-callback ed) (ed/dirty-callback-data ed)))))))

(defset (ed/char ?ed ?pos) char
  (ed/set-char ?ed ?pos ?char))

(def (ed/len ?ed)
  (ed/textbuf-len (ed/buf ?ed)))

(defset (ed/len ?ed) len
  (set (ed/textbuf-len (ed/buf ?ed)) ?len))

@* Scanning
@=

(fun (ed/find-bol ed pos)
  (while (and (> pos 0) (!= (ed/char ed (- pos 1)) ch/nl))
    (set pos (- pos 1)))
  pos)

(fun (ed/find-eol ed pos)
  (while (and (< pos (ed/len ed)) (!= (ed/char ed pos) ch/nl))
    (set pos (+ pos 1)))
  pos)

(fun (ed/find-column ed pos col)
  (var col-pos (+ pos col))
  (while (and (< pos col-pos) (< pos (ed/len ed)) (!= (ed/char ed pos) ch/nl))
    (set pos (+ pos 1)))
  pos)

@* Display
@=

(fun (ed/paint-lines ed pos start-row n-rows focus)
  (var w (ed/col-width ed))
  (var h (ed/row-height ed))
  (var end (ed/len ed))
  (var x)
  (var y)
  (var c)
  (var n-cols)
  (set y (+ (ed/top ed) (* start-row h)))
  (while (> n-rows 0)
    (set n-cols (ed/cols ed))
    (set x (ed/lft ed))
    (while (> n-cols 0)
      (set c (if ((>= pos end) ch/nl) (else (ed/char ed pos))))
      (set x (+ x (if ((== c ch/nl) w) (else (gfx/glyph-noclip-nocompose fonts/mono x y c)))))
      (if ((and (== pos (ed/point ed)) focus)
           (gfx/invert-rect (- x w) y w h)))
      (if ((and (!= c ch/nl)
                (>= (ed/mark ed) 0)
                (>= pos (ed/mark ed))
                (< pos (ed/point ed)))
           (gfx/tint-rect (- x w) y w h 160 160 160)))
      (if ((or (== pos (ed/highlight-1 ed))
               (== pos (ed/highlight-2 ed)))
           (gfx/tint-rect (- x w) y w h 250 200 0)))
      (if ((and (>= (ed/search-len ed) 0)
                (> pos (ed/point ed))
                (< pos (+ (ed/point ed) (ed/search-match-len ed))))
           (gfx/tint-rect (- x w) y w h 100 250 0)))
      (if ((>= pos end)
           (goto all-done)))
      (set pos (+ pos 1))
      (if ((== c ch/nl)
           (goto row-done)))
      (set n-cols (- n-cols 1)))
    (label row-done)
    (set y (+ y h))
    (set n-rows (- n-rows 1)))
  (label all-done))

(fun (ed/frame ed)
  (var p (ed/point ed))
  (var n (ed/rows ed))
  (var b)
  (while (begin
           (set b (ed/find-bol ed p))
           (set n (- n 1 (/ (- p b) (ed/cols ed))))
           (set p (- b 1))
           (and (> b (ed/window-top ed)) (> n 0))))
  (if ((< n 0)
       (set b (+ b (* (- n) (ed/cols ed))))))
  (set (ed/window-top ed) b))

(fun (ed/paint-status-line ed)
  (var x (ed/lft ed))
  (var y (- (ed/bot ed) (ed/row-height ed)))
  (if ((>= (ed/search-len ed) 0)
       (set x (+ x (gfx/glyph fonts/mono x y ch/s)))
       (set x (+ x (gfx/glyph fonts/mono x y ch/:)))
       (set x (+ x (gfx/glyph fonts/mono x y ch/spc)))
       (var buf (ed/search-buf ed))
       (var len (ed/search-len ed))
       (var i 0)
       (while (< i len)
         (var w (gfx/glyph fonts/mono x y (u8 buf)))
         (if ((>= i (ed/search-match-len ed))
              (gfx/tint-rect-2 x y w (ed/row-height ed) 255 0 0 255 255 255)))
         (set x (+ x w))
         (set buf (+ buf 1))
         (set i (+ i 1))))
      (else
       (var txt (ed/title ed))
       (while (u8 txt)
         (set x (+ x (gfx/glyph fonts/mono x y (u8 txt))))
         (set txt (+ txt 1)))
       (if ((ed/dirty ed)
            (gfx/glyph fonts/mono x y ch/*)))))
  (gfx/tint-rect (ed/lft ed) y (- (ed/rgt ed) (ed/lft ed)) (ed/row-height ed)
                 200 200 200))

(fun (ed/resize ed x y w h)
  (set (ed/lft ed) x)
  (set (ed/top ed) y)
  (set (ed/rgt ed) (+ x w))
  (set (ed/bot ed) (+ y h))
  (set (ed/row-height ed) (- (gfx/font-ascent fonts/mono) (gfx/font-descent fonts/mono)))
  (set (ed/col-width ed) (gfx/glyph fonts/mono 0 0 ch/spc))
  (set (ed/rows ed) (/ h (ed/row-height ed)))
  (if ((ed/title ed)
       (set (ed/rows ed) (- (ed/rows ed) 1))))
  (set (ed/cols ed) (/ w (ed/col-width ed))))

(fun (ed/paint ed x y w h focus)
  (ed/resize ed x y w h)
  (ed/frame ed)
  (ed/paint-lines ed (ed/window-top ed) 0 (ed/rows ed) focus)
  (if ((ed/title ed)
       (ed/paint-status-line ed))))

(fun (ed/paint-with-border ed x y w h focus)
  (ed/paint ed (+ x 4) (+ y 4) (- w 8) (- h 8) focus))

@* Cursor movement
@=

(fun (ed/left ed)
  (if ((> (ed/point ed) 0)
       (set (ed/point ed) (- (ed/point ed) 1))
       1)
      (else
       0)))

(fun (ed/right ed)
  (if ((< (ed/point ed) (ed/len ed))
       (set (ed/point ed) (+ (ed/point ed) 1)))))

(fun (ed/up ed n)
  (var p (ed/point ed))
  (var bol (ed/find-bol ed p))
  (var col (- p bol))
  (while (and (> n 0) (> bol 0))
    (set n (- n 1))
    (set bol (ed/find-bol ed (- bol 1))))
  (set (ed/point ed) (ed/find-column ed bol col)))

(fun (ed/down ed n)
  (var p (ed/point ed))
  (var col (- p (ed/find-bol ed p)))
  (var eol (ed/find-eol ed p))
  (while (and (> n 0) (< eol (+ (ed/len ed))))
    (set n (- n 1))
    (set eol (ed/find-eol ed (+ eol 1))))
  (set (ed/point ed) (ed/find-column ed (ed/find-bol ed eol) col)))

(fun (ed/beginning-of-line ed)
  (set (ed/point ed) (ed/find-bol ed (ed/point ed))))

(fun (ed/end-of-line ed)
  (set (ed/point ed) (ed/find-eol ed (ed/point ed))))

(fun (ed/is-wordchar ch)
  (or (and (>= ch ch/a)
           (<= ch ch/z))
      (and (>= ch ch/A)
           (<= ch ch/Z))
      (and (>= ch ch/d0)
           (<= ch ch/d9))))

(fun (ed/left-word ed)
  (if ((ed/left ed)
       (while (and (> (ed/point ed) 0)
                   (not (ed/is-wordchar (ed/char ed (ed/point ed)))))
         (ed/left ed))
       (while (and (> (ed/point ed) 0)
                   (ed/is-wordchar (ed/char ed (- (ed/point ed) 1))))
         (ed/left ed)))))

(fun (ed/right-word ed)
  (while (and (< (ed/point ed) (ed/len ed))
              (not (ed/is-wordchar (ed/char ed (ed/point ed)))))
    (ed/right ed))
  (while (and (< (ed/point ed) (ed/len ed))
              (ed/is-wordchar (ed/char ed (ed/point ed))))
    (ed/right ed)))

(fun (ed/looking-at ed pos str)
  (while (and (u8 str)
              (< pos (ed/len ed))
              (== (ed/char ed pos) (u8 str)))
    (set str (+ str 1))
    (set pos (+ pos 1)))
  (== (u8 str) 0))

(fun (ed/search-region ed pattern start end)
  (var p start)
  (while (and (< p end)
              (not (ed/looking-at ed p pattern)))
    (set p (+ p 1)))
  (if ((ed/looking-at ed p pattern)
       p)
      (else
       -1)))

(fun (ed/search ed pattern)
  (var p (ed/search-region ed pattern (ed/point ed) (ed/len ed)))
  (if ((== p -1)
       (set p (ed/search-region ed pattern 0 (ed/point ed)))))
  (if ((>= p 0)
       (set (ed/point ed) p)
       1)
      (else
       0)))

@* Text modifications
@=

(fun (ed/insert ed char)
  ;; (dbg/int "insert" char)
  (if ((ed/textbuf-grow (ed/buf ed) (+ (ed/len ed) 1))
       (var pos (ed/len ed))
       (while (> pos (ed/point ed))
         (set (ed/char ed pos) (ed/char ed (- pos 1)))
         (set pos (- pos 1)))
       (set (ed/char ed pos) char)
       (set (ed/len ed) (+ (ed/len ed) 1))
       (set (ed/point ed) (+ (ed/point ed) 1)))))

(fun (ed/insert-string ed str n)
  (if ((ed/textbuf-grow (ed/buf ed) (+ (ed/len ed) n))
       (var pos (+ (ed/len ed) n -1))
       (var end (+ (ed/point ed) n -1))
       (while (> pos end)
         (set (ed/char ed pos) (ed/char ed (- pos n)))
         (set pos (- pos 1)))
       (set pos (ed/point ed))
       (while (<= pos end)
         (set (ed/char ed pos) (u8 str))
         (set pos (+ pos 1))
         (set str (+ str 1)))
       (set (ed/len ed) (+ (ed/len ed) n))
       (set (ed/point ed) (+ (ed/point ed) n)))))

(fun (ed/delete ed)
  (if ((< (ed/point ed) (ed/len ed))
       (var pos (ed/point ed))
       (var end (- (ed/len ed) 1))
       (while (< pos end)
         (set (ed/char ed pos) (ed/char ed (+ pos 1)))
         (set pos (+ pos 1)))
       (set (ed/len ed) (- (ed/len ed) 1)))))

(fun (ed/delete-string ed n)
  (var pos (ed/point ed))
  (var end (- (ed/len ed) n))
  (while (< pos end)
    (set (ed/char ed pos) (ed/char ed (+ pos n)))
    (set pos (+ pos 1)))
  (set (ed/len ed) pos))

(fun (ed/backspace ed)
  (if ((ed/left ed)
       (ed/delete ed))))

(fun (ed/backspace-word ed)
  (var end (ed/point ed))
  (ed/left-word ed)
  (ed/delete-string ed (- end (ed/point ed))))

@* Editing s-expressions
@=

(fun (ed/find-matching-closing-paren ed pos)
  (var level 0)
  (var char (ed/char ed pos))
  (while (and (< pos (ed/len ed))
              (not (and (== level 1)
                        (== char ch/rp))))
    (if ((== char ch/lp)
         (set level (+ level 1)))
        ((== char ch/rp)
         (set level (- level 1))))
    (set pos (+ pos 1))
    (set char (ed/char ed pos)))
  pos)

(fun (ed/find-matching-opening-paren ed pos)
  (var level 0)
  (var char (ed/char ed pos))
  (while (and (> pos 0)
              (not (and (== level 1)
                        (== char ch/lp))))
    (if ((== char ch/rp)
         (set level (+ level 1)))
        ((== char ch/lp)
         (set level (- level 1))))
    (set pos (- pos 1))
    (set char (ed/char ed pos)))
  pos)

(fun (ed/highlight ed)
  (set (ed/highlight-1 ed) -1)
  (set (ed/highlight-2 ed) -1)
  (var p (- (ed/point ed) 1))
  (if ((>= p 0)
       (var c (ed/char ed p))
       (if ((== c ch/rp)
            (set (ed/highlight-1 ed) p)
            (set (ed/highlight-2 ed) (ed/find-matching-opening-paren ed p)))))))

(fun (ed/indent-to ed level)
  (var p (ed/point ed))
  (var b (ed/find-bol ed p))
  (while (and (< b (ed/len ed))
              (== (ed/char ed b) ch/spc)
              (> level 0))
    (set b (+ b 1))
    (set level (- level 1)))
  (set (ed/point ed) b)
  (if ((> level 0)
       (while (> level 0)
         (ed/insert ed ch/spc)
         (set level (- level 1))))
      (else
       (while (and (< (ed/point ed) (ed/len ed))
                   (== (ed/char ed b) ch/spc))
         (ed/delete ed)))))

(fun (ed/indent ed)
  (var p (ed/point ed))
  ;; Find beginning of line
  (set p (ed/find-bol ed p))
  (if ((< p 1)
       (ed/indent-to ed 0)
       (goto return)))
  ;; Special case: Z0 local labels
  (var pp p)
  (while (and (< pp (ed/len ed))
              (== (ed/char ed pp) ch/spc))
    (set pp (+ pp 1)))
  (if ((and (< pp (ed/len ed)) (== (ed/char ed pp) ch/.))
       (ed/indent-to ed 0)
       (goto return)))
  ;; Find backwards: (newline or open paren) on level zero
  (var level 0)
  (set p (- p 2))
  (while (and (> p 0)
              (not (and (or (== (ed/char ed p) ch/nl)
                            (== (ed/char ed p) ch/lp))
                        (<= level 0))))
    (if ((== (ed/char ed p) ch/lp) (set level (- level 1)))
        ((== (ed/char ed p) ch/rp) (set level (+ level 1))))
    (set p (- p 1)))
  ;; Find what follows
  (set pp p)
  (while (begin
           (set pp (+ pp 1))
           (and (< pp (ed/len ed))
                (== (ed/char ed pp) ch/spc))))
  (if ((or (and (== p 0) (> level 0)) (== (ed/char ed p) ch/nl))
       ;; Indent to same level as this line, except for Z0 local labels
       (if ((ed/looking-at ed pp ".")
            (ed/indent-to ed 2))
           (else
            (ed/indent-to ed (- pp p 1)))))
      ((and (< pp (ed/len ed)) (== (ed/char ed pp) ch/lp))
       ;; If another open paren follows the stopping paren, indent to that
       (ed/indent-to ed (- pp (ed/find-bol ed pp))))
      ((or (== (ed/find-bol ed p) p)
           (ed/looking-at ed pp "while")
           (ed/looking-at ed pp "begin"))
       ;; If the stopping paren is at the beginning of its line, or we are looking at a known keyword, indent to level of stopping paren plus 2
       (ed/indent-to ed (+ (- p (ed/find-bol ed p)) 2)))
      (else
       ;; Indent to whatever follows
       (var ppp pp)
       (while (not (or (>= ppp (ed/len ed))
                       (== (ed/char ed ppp) ch/spc)
                       (== (ed/char ed ppp) ch/nl)))
         (set ppp (+ ppp 1)))
       (while (and (< ppp (ed/len ed)) (== (ed/char ed ppp) ch/spc))
         (set ppp (+ ppp 1)))
       (if ((or (>= ppp (ed/len ed)) (== (ed/char ed ppp) ch/nl))
            ;;; Nothing follows, indent to level of whatever followed the stopping paren
            (ed/indent-to ed (- pp (ed/find-bol ed pp))))
           (else
            (ed/indent-to ed (- ppp (ed/find-bol ed ppp)))))))
  (label return))

(fun (ed/indent-region ed)
  (var end (ed/point ed))
  (set (ed/point ed) (ed/mark ed))
  (set (ed/mark ed) -1)
  (while (< (ed/point ed) end)
    (var old-len (ed/len ed))
    (ed/indent ed)
    (set end (- end (- old-len (ed/len ed))))
    (ed/down ed 1)))

@* Region
@=

(fun (ed/copy-region ed append)
  (if ((and (!= (ed/mark ed) -1)
            (< (ed/mark ed) (ed/point ed)))
       (mem wbuf fs/wbuf)
       (fs/create wbuf)
       (if (append
            (mem rbuf fs/rbuf)
            (if ((fs/open rbuf ".clip")
                 (while (fs/read rbuf)
                   (fs/write wbuf (fs/rbuf-start rbuf) (fs/rbuf-size rbuf)))
                 (fs/close rbuf)))))
       (ed/textbuf-write-region (ed/buf ed) wbuf
                                (ed/mark ed) (- (ed/point ed) (ed/mark ed)))
       (fs/commit wbuf ".clip"))))

(fun (ed/cut-region ed append)
  (if ((and (!= (ed/mark ed) -1)
            (< (ed/mark ed) (ed/point ed)))
       (ed/copy-region ed append)
       (var n (- (ed/point ed) (ed/mark ed)))
       (set (ed/point ed) (ed/mark ed))
       (ed/delete-string ed n))))

(fun (ed/paste ed)
  (mem rbuf fs/rbuf)
  (if ((fs/open rbuf ".clip")
       (while (fs/read rbuf)
         (ed/insert-string ed (fs/rbuf-start rbuf) (fs/rbuf-size rbuf)))
       (fs/close rbuf))))

(fun (ed/kill-line ed append)
  (var eol (ed/find-eol ed (ed/point ed)))
  (if ((and (== eol (ed/point ed))
            (< eol (ed/len ed)))
       (set eol (+ eol 1))))
  (set (ed/mark ed) (ed/point ed))
  (set (ed/point ed) eol)
  (ed/cut-region ed append)
  (set (ed/mark ed) -1))

@* Paragraphs
@=

(fun (ed/looking-at-parsep ed point)
  (or (ed/looking-at ed point "\n")
      (ed/looking-at ed point "@")))

(fun (ed/fill-paragraph ed)
  (var start (ed/point ed))
  (set start (ed/find-bol ed start))
  (if ((ed/looking-at-parsep ed start)
       (goto return)))
  (var end start)
  (while (and (> start 0) (not (ed/looking-at-parsep ed start)))
    (set start (ed/find-bol ed (- start 1))))
  (if ((ed/looking-at-parsep ed start)
       (set start (+ (ed/find-eol ed start) 1))))
  (while (and (< end (ed/len ed)) (not (ed/looking-at-parsep ed end)))
    (set end (+ (ed/find-eol ed end) 1)))
  (if ((> end (ed/len ed))
       (set end (ed/len ed))))
  (if ((and (> end 0) (ed/looking-at-parsep ed end))
       (set end (- end 1))))
  (var p0 start)
  (var p1 p0)
  (var np (ed/point ed))
  (var last-was-space 1)
  (var w 0)
  (while (< p1 end)
    (if ((== (ed/point ed) p1)
         (set np p0)))
    (var c (ed/char ed p1))
    (if ((or (== c ch/spc) (== c ch/nl))
         (if (last-was-space
              (goto continue)))
         (if ((> w 60)
              (set c ch/nl)
              (set w 0))
             (else
              (set c ch/spc)))
         (set last-was-space 1))
        (else
         (set last-was-space 0)))
    (set (ed/char ed p0) c)
    (set p0 (+ p0 1))
    (set w (+ w 1))
    (label continue)
    (set p1 (+ p1 1)))
  (set (ed/point ed) p0)
  (ed/delete-string ed (- p1 p0))
  (set (ed/point ed) np)
  (label return))

@* Key bindings
@=

(fun (ed/search-insert ed char)
  (if ((< (ed/search-len ed) (- ed/search-len-max 1))
       (set (u8 (ed/search-buf ed) (ed/search-len ed)) char)
       (set (ed/search-len ed) (+ 1 (ed/search-len ed)))
       (set (u8 (ed/search-buf ed) (ed/search-len ed)) 0)
       (if ((ed/search ed (ed/search-buf ed))
            (set (ed/search-match-len ed) (ed/search-len ed)))))))

(fun (ed/search-command ed key state)
  (if ((== state 0)
       (if ((== key gfx/ev-key-backspace)
            (if ((> (ed/search-len ed) 0)
                 (set (ed/search-len ed) (- (ed/search-len ed) 1))
                 (set (u8 (ed/search-buf ed) (ed/search-len ed)) 0))))
           ((== key gfx/ev-key-return)
            (set (ed/search-len ed) -1))))
      ((== state gfx/ev-state-control)
       (if ((== key ch/s) ;; C-s
            (set (ed/search-len ed) (str/len (ed/search-buf ed)))
            (if ((< (ed/point ed) (- (ed/len ed) 1))
                 (set (ed/point ed) (+ (ed/point ed) 1))
                 (if ((not (ed/search ed (ed/search-buf ed)))
                      (set (ed/point ed) (- (ed/point ed) 1)))
                     (else
                      (set (ed/search-match-len ed) (ed/search-len ed))))))))))))

(fun (ed/last-input-was ed key state)
  (and (== (ed/last-input ed) key)
       (== (ed/last-state ed) state)))

(fun (ed/command ed key state)
  ;; (dbg/int "command" key)
  ;; (dbg/int "state" state)
  (if ((== state 0)
       (if ((== key gfx/ev-key-return)
            (ed/insert ed 10))
           ((== key gfx/ev-key-left)
            (ed/left ed))
           ((== key gfx/ev-key-right)
            (ed/right ed))
           ((== key gfx/ev-key-up)
            (ed/up ed 1))
           ((== key gfx/ev-key-down)
            (ed/down ed 1))
           ((== key gfx/ev-key-page-up)
            (ed/up ed (ed/rows ed)))
           ((== key gfx/ev-key-page-down)
            (ed/down ed (ed/rows ed)))
           ((== key gfx/ev-scroll-up)
            (ed/up ed (ed/rows ed)))
           ((== key gfx/ev-scroll-down)
            (ed/down ed (ed/rows ed)))
           ((== key gfx/ev-key-end)
            (ed/end-of-line ed))
           ((== key gfx/ev-key-begin)
            (ed/beginning-of-line ed))
           ((== key gfx/ev-key-backspace)
            (ed/backspace ed))
           ((== key gfx/ev-key-delete)
            (ed/delete ed))
           ((== key gfx/ev-key-tab)
            (if ((>= (ed/mark ed) 0)
                 (ed/indent-region ed))
                (else
                 (ed/indent ed))))))
      ((== state gfx/ev-state-control)
       (if ((== key ch/spc) ;; C-SPC
            (set (ed/mark ed) (ed/point ed)))
           ((== key ch/g) ;; C-g
            (set (ed/mark ed) -1))
           ((== key ch/w) ;; C-w
            (ed/cut-region ed 0)
            (set (ed/mark ed) -1))
           ((== key ch/y) ;; C-y
            (ed/paste ed))
           ((== key ch/a) ;; C-a
            (ed/beginning-of-line ed))
           ((== key ch/d) ;; C-d
            (ed/delete ed))
           ((== key ch/e) ;; C-e
            (ed/end-of-line ed))
           ((== key ch/s) ;; C-s
            (set (ed/search-len ed) 0)
            (set (ed/search-match-len ed) 0))
           ((== key ch/k) ;; C-k
            (ed/kill-line ed (ed/last-input-was ed key state)))
           ((== key gfx/ev-key-left)
            (ed/left-word ed))
           ((== key gfx/ev-key-right)
            (ed/right-word ed))
           ((== key gfx/ev-key-backspace)
            (ed/backspace-word ed))))
      ((== state gfx/ev-state-meta)
       (if ((== key ch/q) ;; M-q
            (ed/fill-paragraph ed))
           ((== key ch/w) ;; M-w
            (ed/copy-region ed 0)
            (set (ed/mark ed) -1))))))

(fun (ed/input ed state input)
  (if ((and (> input 0) (== state 0))
       (if ((>= (ed/search-len ed) 0)
            (ed/search-insert ed input))
           (else
            (ed/insert ed input))))
      (else
       (if ((>= (ed/search-len ed) 0)
            (ed/search-command ed input state))
           (else
            (ed/command ed input state)))))
  (set (ed/last-input ed) input)
  (set (ed/last-state ed) state)
  (ed/highlight ed))
