(struct ed/textbuf
  (textbuf-pages u64 32)
  (textbuf-page-count u64)
  (textbuf-len u64))

(fun (ed/textbuf-init tb)
  (set (ed/textbuf-page-count tb) 0)
  (set (ed/textbuf-len tb) 0))

(fun (ed/textbuf-fini tb)
  (var i 0)
  (while (< i (ed/textbuf-page-count tb))
   (sys/page-put (ed/textbuf-pages tb i))
   (set i (+ i 1))))

(fun (ed/textbuf-grow tb max)
  (var new-page-count (/ (+ max mem/page-size -1) mem/page-size))
  (if (<= new-page-count 32)
      (begin
       (var i (ed/textbuf-page-count tb))
       (while (< i new-page-count)
        (set (ed/textbuf-pages tb i) (sys/page-get))
        (set i (+ i 1)))
       (set (ed/textbuf-page-count tb) new-page-count)
       1)
   0))

(fun (ed/textbuf-get-char tb pos)
  (var page (/ pos mem/page-size))
  (u8 (ed/textbuf-pages tb page) (- pos (* page mem/page-size))))

(fun (ed/textbuf-set-char tb pos char)
  (var page (/ pos mem/page-size))
  (set (u8 (ed/textbuf-pages tb page) (- pos (* page mem/page-size))) char))

(fun (ed/textbuf-read-file tb fb)
  (while (and (fs/read fb)
              (ed/textbuf-grow tb (+ (ed/textbuf-len tb) (fs/rbuf-size fb))))
   (begin
    (var pos (ed/textbuf-len tb))
    (var i 0)
    (var len (fs/rbuf-size fb))
    (while (< i len)
     (ed/textbuf-set-char tb pos (u8 (fs/rbuf-start fb) i))
     (set i (+ i 1))
     (set pos (+ pos 1)))
    (set (ed/textbuf-len tb) pos))))

(fun (ed/textbuf-write-file tb fb)
  (var i 0)
  (var len (ed/textbuf-len tb))
  (while (> len 0)
   (var n (if (< len mem/page-size) len mem/page-size))
   (fs/write fb (ed/textbuf-pages tb i) n)
   (set len (- len n))
   (set i (+ i 1))))

(fun (ed/textbuf-maybe-as-string tb)
  (var len (ed/textbuf-len tb))
  (if (< len mem/page-size)
      (begin
       (ed/textbuf-grow tb (+ len 1)) ;; this only matters for len == 0
       (var str (ed/textbuf-pages tb 0))
       (set (u8 str len) 0)
       str)
   0))

(struct ed/data
  ;; Window
  (top u32)
  (lft u32)
  (row-height u32)
  (col-width u32)
  (rows u32)
  (cols u32)
  ;; Buffer
  (buf u64)
  (len u64)
  (max u64)
  ;; Mode
  (mode u32)
  ;; Editing state
  (window-top u64)
  (point u64)
  (quit u32))

;; Abstracting the buffer

(def (ed/char ?ed ?pos)
  (ed/textbuf-get-char (ed/buf ?ed) ?pos))

(defset (ed/char ?ed ?pos) char
  (ed/textbuf-set-char (ed/buf ?ed) ?pos ?char))

;; Scanning

(fun (ed/find-bol ed pos)
  (while (and (> pos 0) (!= (ed/char ed (- pos 1)) 10))
   (set pos (- pos 1)))
  pos)

(fun (ed/find-eol ed pos)
  (while (and (< pos (ed/len ed)) (!= (ed/char ed pos) 10))
   (set pos (+ pos 1)))
  pos)

(fun (ed/find-column ed pos col)
  (var col-pos (+ pos col))
  (while (and (< pos col-pos) (< pos (ed/len ed)) (!= (ed/char ed pos) 10))
   (set pos (+ pos 1)))
  pos)

;; Display

(fun (ed/paint-lines ed pos start-row n-rows)
  (var w (ed/col-width ed))
  (var h (ed/row-height ed))
  (var end (ed/len ed))
  (var x)
  (var y)
  (var c)
  (var n-cols)
  (set y (+ (ed/top ed) (* start-row h)))
  (gfx/rect (ed/lft ed) y (* (ed/cols ed) w) (* n-rows h) (gfx/color 255 255 255))
  (while (> n-rows 0)
   (set n-cols (ed/cols ed))
   (set x (ed/lft ed))
   (while (> n-cols 0)
    (set c (if (>= pos end) 10 (ed/char ed pos)))
    (set x (+ x (if (== c 10) w (gfx/glyph x y c))))
    (if (== pos (ed/point ed))
        (gfx/invert-rect (- x w) y w h))
    (if (>= pos end)
        (goto all-done))
    (set pos (+ pos 1))
    (if (== c 10)
        (goto row-done))
    (set n-cols (- n-cols 1)))
   (label row-done)
   (set y (+ y h))
   (set n-rows (- n-rows 1)))
  (label all-done))

(fun (ed/frame ed)
  (var p (ed/point ed))
  (var n (ed/rows ed))
  (var b)
  (while (begin
          (set b (ed/find-bol ed p))
          (set n (- n 1 (/ (- p b) (ed/cols ed))))
          (set p (- b 1))
          (and (> b (ed/window-top ed)) (> n 0))))
  (if (< n 0)
      (set b (+ b (* (- n) (ed/cols ed)))))
  (set (ed/window-top ed) b))

(fun (ed/redisplay ed)
  (ed/frame ed)
  (ed/paint-lines ed (ed/window-top ed) 0 (ed/rows ed))
  (gfx/show))

;; Cursor movement

(fun (ed/left ed)
  (if (> (ed/point ed) 0)
      (begin
       (set (ed/point ed) (- (ed/point ed) 1))
       1)
   0))

(fun (ed/right ed)
  (if (< (ed/point ed) (ed/len ed))
      (set (ed/point ed) (+ (ed/point ed) 1))))

(fun (ed/up ed n)
  (var p (ed/point ed))
  (var bol (ed/find-bol ed p))
  (var col (- p bol))
  (while (and (> n 0) (> bol 0))
   (set n (- n 1))
   (set bol (ed/find-bol ed (- bol 1))))
  (set (ed/point ed) (ed/find-column ed bol col)))

(fun (ed/down ed n)
  (var p (ed/point ed))
  (var col (- p (ed/find-bol ed p)))
  (var eol (ed/find-eol ed p))
  (while (and (> n 0) (< eol (+ (ed/len ed))))
   (set n (- n 1))
   (set eol (ed/find-eol ed (+ eol 1))))
  (set (ed/point ed) (ed/find-column ed (ed/find-bol ed eol) col)))

(fun (ed/beginning-of-line ed)
  (set (ed/point ed) (ed/find-bol ed (ed/point ed))))

(fun (ed/end-of-line ed)
  (set (ed/point ed) (ed/find-eol ed (ed/point ed))))

;; Text modifications

(fun (ed/insert ed char)
  ;; (dbg/int "insert" char)
  (if (ed/textbuf-grow (ed/buf ed) (+ (ed/len ed) 1))
      (begin
       (var pos (ed/len ed))
       (while (> pos (ed/point ed))
        (set (ed/char ed pos) (ed/char ed (- pos 1)))
        (set pos (- pos 1)))
       (set (ed/char ed pos) char)
       (set (ed/len ed) (+ (ed/len ed) 1))
       (set (ed/point ed) (+ (ed/point ed) 1)))))

(fun (ed/delete ed)
  (if (< (ed/point ed) (ed/len ed))
      (begin
       (var pos (ed/point ed))
       (var end (- (ed/len ed) 1))
       (while (< pos end)
        (set (ed/char ed pos) (ed/char ed (+ pos 1)))
        (set pos (+ pos 1)))
       (set (ed/len ed) (- (ed/len ed) 1)))))

(fun (ed/backspace ed)
  (if (ed/left ed)
      (ed/delete ed)))

;; Keys

(fun (ed/command ed key state)
  ;; (dbg/int "command" key)
  ;; (dbg/int "state" state)
  (if (== state 0)
      (begin
       (if (== key -11) ;; return
           (if (== (ed/mode ed) 1)
               (set (ed/quit ed) 1)
               (ed/insert ed 10)))
       (if (== key -15) ;; left
           (ed/left ed))
       (if (== key -17) ;; right
           (ed/right ed))
       (if (== key -16) ;; up
           (ed/up ed 1))
       (if (== key -18) ;; down
           (ed/down ed 1))
       (if (== key -19) ;; page up
           (ed/up ed (ed/rows ed)))
       (if (== key -20) ;; page down
           (ed/down ed (ed/rows ed)))
       (if (== key -9) ;; backspace
           (ed/backspace ed))
       (if (== key -13) ;; delete
           (ed/delete ed))))
  (if (== state 16) ;; control
      (begin
       (if (== key 97) ;; C-a
           (ed/beginning-of-line ed))
       (if (== key 101) ;; C-e
           (ed/end-of-line ed))))
  (if (== state 32) ;; meta
      (begin
       (if (== key 120) ;; M-x
           (set (ed/quit ed) 1)))))


(fun (ed/input ed)
  (mem event gfx/event)
  (gfx/read-event event)
  (if (== (gfx/ev-type event) 1)
      (sys/call 60 0))
  (if (== (gfx/ev-type event) 2)
      (begin
       (var input (gfx/ev-input event))
       (var state (gfx/ev-state event))
       (if (and (> input 0) (== state 0))
           (ed/insert ed input)
        (ed/command ed input state)))))

(fun (ed/ed buf mode lft top rgt bot)
  (mem ed ed/data)
  (set (ed/top ed) top)
  (set (ed/lft ed) lft)
  (set (ed/row-height ed) (- (gfx/font-ascent sys/mono) (gfx/font-descent sys/mono)))
  (set (ed/col-width ed) (gfx/glyph 0 0 32))
  (set (ed/rows ed) (/ (- bot top) (ed/row-height ed)))
  (set (ed/cols ed) (/ (- rgt lft) (ed/col-width ed)))
  (set (ed/buf ed) buf)
  (set (ed/len ed) (ed/textbuf-len buf))
  (set (ed/mode ed) mode)
  (set (ed/point ed) 0)
  (set (ed/window-top ed) 0)
  (set (ed/quit ed) 0)
  (while (not (ed/quit ed))
   (ed/redisplay ed)
   (ed/input ed))
  (gfx/rect lft top (- rgt lft) (- bot top) (gfx/color 255 255 255))
  (set (ed/textbuf-len buf) (ed/len ed)))
