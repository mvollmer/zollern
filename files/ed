(struct ed/textbuf
  (textbuf-pages u64 32)
  (textbuf-page-count u64)
  (textbuf-len u64))

(fun (ed/textbuf-init tb)
  (set (ed/textbuf-page-count tb) 0)
  (set (ed/textbuf-len tb) 0))

(fun (ed/textbuf-fini tb)
  (var i 0)
  (while (< i (ed/textbuf-page-count tb))
    (sys/page-put (ed/textbuf-pages tb i))
    (set i (+ i 1))))

(fun (ed/textbuf-grow tb max)
  (var new-page-count (/ (+ max mem/page-size -1) mem/page-size))
  (if ((<= new-page-count 32)
       (var i (ed/textbuf-page-count tb))
       (while (< i new-page-count)
         (set (ed/textbuf-pages tb i) (sys/page-get))
         (set i (+ i 1)))
       (set (ed/textbuf-page-count tb) new-page-count)
       1)
      (else
       0)))

(fun (ed/textbuf-get-char tb pos)
  (var page (/ pos mem/page-size))
  (u8 (ed/textbuf-pages tb page) (- pos (* page mem/page-size))))

(fun (ed/textbuf-set-char tb pos char)
  (var page (/ pos mem/page-size))
  (set (u8 (ed/textbuf-pages tb page) (- pos (* page mem/page-size))) char))

(fun (ed/textbuf-read-file tb fb)
  (while (and (fs/read fb)
              (ed/textbuf-grow tb (+ (ed/textbuf-len tb) (fs/rbuf-size fb))))
    (begin
      (var pos (ed/textbuf-len tb))
      (var i 0)
      (var len (fs/rbuf-size fb))
      (while (< i len)
        (ed/textbuf-set-char tb pos (u8 (fs/rbuf-start fb) i))
        (set i (+ i 1))
        (set pos (+ pos 1)))
      (set (ed/textbuf-len tb) pos))))

(fun (ed/textbuf-write-region tb fb pos len)
  (var page (/ pos mem/page-size))
  (set pos (- pos (* page mem/page-size)))
  (while (> len 0)
    (var n (- mem/page-size pos))
    (if ((< len n)
         (set n len)))
    (fs/write fb (+ (ed/textbuf-pages tb page) pos) n)
    (set len (- len n))
    (set pos 0)
    (set page (+ page 1))))

(fun (ed/textbuf-write-file tb fb)
  (ed/textbuf-write-region tb fb 0 (ed/textbuf-len tb)))

(fun (ed/textbuf-maybe-as-string tb)
  (var len (ed/textbuf-len tb))
  (if ((< len mem/page-size)
       (ed/textbuf-grow tb (+ len 1)) ;; this only matters for len == 0
       (var str (ed/textbuf-pages tb 0))
       (set (u8 str len) 0)
       str)
      (else
       0)))

(struct ed/data
  ;; Window
  (top u32)
  (lft u32)
  (row-height u32)
  (col-width u32)
  (rows u32)
  (cols u32)
  (layout-cb u64)
  (layout-data u64)
  ;; Buffer
  (buf u64)
  (len u64)
  (max u64)
  ;; Mode
  (mode u32)
  ;; Editing state
  (window-top u64)
  (mark u64)
  (highlight-1 u64)
  (highlight-2 u64)
  (point u64)
  (quit u32))

;; Abstracting the buffer

(def (ed/char ?ed ?pos)
  (ed/textbuf-get-char (ed/buf ?ed) ?pos))

(defset (ed/char ?ed ?pos) char
  (ed/textbuf-set-char (ed/buf ?ed) ?pos ?char))

;; Scanning

(fun (ed/find-bol ed pos)
  (while (and (> pos 0) (!= (ed/char ed (- pos 1)) ch/nl))
    (set pos (- pos 1)))
  pos)

(fun (ed/find-eol ed pos)
  (while (and (< pos (ed/len ed)) (!= (ed/char ed pos) ch/nl))
    (set pos (+ pos 1)))
  pos)

(fun (ed/find-column ed pos col)
  (var col-pos (+ pos col))
  (while (and (< pos col-pos) (< pos (ed/len ed)) (!= (ed/char ed pos) ch/nl))
    (set pos (+ pos 1)))
  pos)

;; Display

(fun (ed/clear ed)
  (gfx/rect (ed/lft ed) (ed/top ed)
            (* (ed/cols ed) (ed/col-width ed)) (* (ed/rows ed) (ed/row-height ed))
            (gfx/color 255 255 255)))

(fun (ed/paint-lines ed pos start-row n-rows)
  (var w (ed/col-width ed))
  (var h (ed/row-height ed))
  (var end (ed/len ed))
  (var x)
  (var y)
  (var c)
  (var n-cols)
  (set y (+ (ed/top ed) (* start-row h)))
  (while (> n-rows 0)
    (set n-cols (ed/cols ed))
    (set x (ed/lft ed))
    (while (> n-cols 0)
      (set c (if ((>= pos end) ch/nl) (else (ed/char ed pos))))
      (set x (+ x (if ((== c ch/nl) w) (else (gfx/glyph x y c)))))
      (if ((== pos (ed/point ed))
           (gfx/invert-rect (- x w) y w h)))
      (if ((and (!= c ch/nl)
                (>= (ed/mark ed) 0)
                (>= pos (ed/mark ed))
                (< pos (ed/point ed)))
           (gfx/tint-rect (- x w) y w h 160 160 160)))
      (if ((or (== pos (ed/highlight-1 ed))
               (== pos (ed/highlight-2 ed)))
           (gfx/tint-rect (- x w) y w h 250 200 0)))
      (if ((>= pos end)
           (goto all-done)))
      (set pos (+ pos 1))
      (if ((== c ch/nl)
           (goto row-done)))
      (set n-cols (- n-cols 1)))
    (label row-done)
    (set y (+ y h))
    (set n-rows (- n-rows 1)))
  (label all-done))

(fun (ed/frame ed)
  (var p (ed/point ed))
  (var n (ed/rows ed))
  (var b)
  (while (begin
           (set b (ed/find-bol ed p))
           (set n (- n 1 (/ (- p b) (ed/cols ed))))
           (set p (- b 1))
           (and (> b (ed/window-top ed)) (> n 0))))
  (if ((< n 0)
       (set b (+ b (* (- n) (ed/cols ed))))))
  (set (ed/window-top ed) b))

(fun (ed/redisplay ed)
  (ed/frame ed)
  (ed/clear ed)
  (ed/paint-lines ed (ed/window-top ed) 0 (ed/rows ed))
  (gfx/show))

;; Cursor movement

(fun (ed/left ed)
  (if ((> (ed/point ed) 0)
       (set (ed/point ed) (- (ed/point ed) 1))
       1)
      (else
       0)))

(fun (ed/right ed)
  (if ((< (ed/point ed) (ed/len ed))
       (set (ed/point ed) (+ (ed/point ed) 1)))))

(fun (ed/up ed n)
  (var p (ed/point ed))
  (var bol (ed/find-bol ed p))
  (var col (- p bol))
  (while (and (> n 0) (> bol 0))
    (set n (- n 1))
    (set bol (ed/find-bol ed (- bol 1))))
  (set (ed/point ed) (ed/find-column ed bol col)))

(fun (ed/down ed n)
  (var p (ed/point ed))
  (var col (- p (ed/find-bol ed p)))
  (var eol (ed/find-eol ed p))
  (while (and (> n 0) (< eol (+ (ed/len ed))))
    (set n (- n 1))
    (set eol (ed/find-eol ed (+ eol 1))))
  (set (ed/point ed) (ed/find-column ed (ed/find-bol ed eol) col)))

(fun (ed/beginning-of-line ed)
  (set (ed/point ed) (ed/find-bol ed (ed/point ed))))

(fun (ed/end-of-line ed)
  (set (ed/point ed) (ed/find-eol ed (ed/point ed))))

(fun (ed/is-wordchar ch)
  (or (and (>= ch ch/a)
           (<= ch ch/z))
      (and (>= ch ch/A)
           (<= ch ch/Z))
      (and (>= ch ch/d0)
           (<= ch ch/d9))))

(fun (ed/left-word ed)
  (if ((ed/left ed)
       (while (and (> (ed/point ed) 0)
                   (not (ed/is-wordchar (ed/char ed (ed/point ed)))))
         (ed/left ed))
       (while (and (> (ed/point ed) 0)
                   (ed/is-wordchar (ed/char ed (- (ed/point ed) 1))))
         (ed/left ed)))))

(fun (ed/right-word ed)
  (while (and (< (ed/point ed) (ed/len ed))
              (not (ed/is-wordchar (ed/char ed (ed/point ed)))))
    (ed/right ed))
  (while (and (< (ed/point ed) (ed/len ed))
              (ed/is-wordchar (ed/char ed (ed/point ed))))
    (ed/right ed)))

;; Text modifications

(fun (ed/insert ed char)
  ;; (dbg/int "insert" char)
  (if ((ed/textbuf-grow (ed/buf ed) (+ (ed/len ed) 1))
       (var pos (ed/len ed))
       (while (> pos (ed/point ed))
         (set (ed/char ed pos) (ed/char ed (- pos 1)))
         (set pos (- pos 1)))
       (set (ed/char ed pos) char)
       (set (ed/len ed) (+ (ed/len ed) 1))
       (set (ed/point ed) (+ (ed/point ed) 1)))))

(fun (ed/insert-string ed str n)
  (if ((ed/textbuf-grow (ed/buf ed) (+ (ed/len ed) n))
       (var pos (+ (ed/len ed) n -1))
       (var end (+ (ed/point ed) n -1))
       (while (> pos end)
         (set (ed/char ed pos) (ed/char ed (- pos n)))
         (set pos (- pos 1)))
       (set pos (ed/point ed))
       (while (<= pos end)
         (set (ed/char ed pos) (u8 str))
         (set pos (+ pos 1))
         (set str (+ str 1)))
       (set (ed/len ed) (+ (ed/len ed) n))
       (set (ed/point ed) (+ (ed/point ed) n)))))

(fun (ed/delete ed)
  (if ((< (ed/point ed) (ed/len ed))
       (var pos (ed/point ed))
       (var end (- (ed/len ed) 1))
       (while (< pos end)
         (set (ed/char ed pos) (ed/char ed (+ pos 1)))
         (set pos (+ pos 1)))
       (set (ed/len ed) (- (ed/len ed) 1)))))

(fun (ed/delete-string ed n)
  (var pos (ed/point ed))
  (var end (- (ed/len ed) n))
  (while (< pos end)
    (set (ed/char ed pos) (ed/char ed (+ pos n)))
    (set pos (+ pos 1)))
  (set (ed/len ed) pos))

(fun (ed/backspace ed)
  (if ((ed/left ed)
       (ed/delete ed))))

(fun (ed/backspace-word ed)
  (var end (ed/point ed))
  (ed/left-word ed)
  (ed/delete-string ed (- end (ed/point ed))))

;; Bare minimum for editing s-exprs

(fun (ed/find-matching-closing-paren ed pos)
  (var level 0)
  (var char (ed/char ed pos))
  (while (and (< pos (ed/len ed))
              (not (and (== level 1)
                        (== char ch/rp))))
    (if ((== char ch/lp)
         (set level (+ level 1)))
        ((== char ch/rp)
         (set level (- level 1))))
    (set pos (+ pos 1))
    (set char (ed/char ed pos)))
  pos)

(fun (ed/find-matching-opening-paren ed pos)
  (var level 0)
  (var char (ed/char ed pos))
  (while (and (> pos 0)
              (not (and (== level 1)
                        (== char ch/lp))))
    (if ((== char ch/rp)
         (set level (+ level 1)))
        ((== char ch/lp)
         (set level (- level 1))))
    (set pos (- pos 1))
    (set char (ed/char ed pos)))
  pos)

(fun (ed/highlight ed)
  (set (ed/highlight-1 ed) -1)
  (set (ed/highlight-2 ed) -1)
  (var p (- (ed/point ed) 1))
  (if ((>= p 0)
       (var c (ed/char ed p))
       (if ((== c ch/rp)
            (set (ed/highlight-1 ed) p)
            (set (ed/highlight-2 ed) (ed/find-matching-opening-paren ed p)))))))

(fun (ed/looking-at ed pos str)
  (while (and (u8 str)
              (< pos (ed/len ed))
              (== (ed/char ed pos) (u8 str)))
    (set str (+ str 1))
    (set pos (+ pos 1)))
  (== (u8 str) 0))

(fun (ed/indent-to ed level)
  (var p (ed/point ed))
  (var b (ed/find-bol ed p))
  (while (and (< b (ed/len ed))
              (== (ed/char ed b) ch/spc)
              (> level 0))
    (set b (+ b 1))
    (set level (- level 1)))
  (set (ed/point ed) b)
  (if ((> level 0)
       (while (> level 0)
         (ed/insert ed ch/spc)
         (set level (- level 1))))
      (else
       (while (and (< (ed/point ed) (ed/len ed))
                   (== (ed/char ed b) ch/spc))
         (ed/delete ed)))))

(fun (ed/indent ed)
  (var p (ed/point ed))
  ;; Find beginning of line
  (set p (ed/find-bol ed p))
  (if ((< p 1)
       (ed/indent-to ed 0)
       (goto return)))
  ;; Find backwards: (newline or open paren) on level zero
  (var level 0)
  (set p (- p 2))
  (while (and (> p 0)
              (not (and (or (== (ed/char ed p) ch/nl)
                            (== (ed/char ed p) ch/lp))
                        (<= level 0))))
    (if ((== (ed/char ed p) ch/lp) (set level (- level 1)))
        ((== (ed/char ed p) ch/rp) (set level (+ level 1))))
    (set p (- p 1)))
  ;; Find what follows
  (var pp p)
  (while (begin
           (set pp (+ pp 1))
           (and (< pp (ed/len ed))
                (== (ed/char ed pp) ch/spc))))
  (if ((or (and (== p 0) (> level 0)) (== (ed/char ed p) ch/nl))
       ;; Indent to same level as this line
       (ed/indent-to ed (- pp p 1)))
      ((and (< pp (ed/len ed)) (== (ed/char ed pp) ch/lp))
       ;; If another open paren follows the stopping paren, indent to that
       (ed/indent-to ed (- pp (ed/find-bol ed pp))))
      ((or (== (ed/find-bol ed p) p)
           (ed/looking-at ed pp "while")
           (ed/looking-at ed pp "begin"))
       ;; If the stopping paren is at the beginning of its line, or we are looking at a known keyword, indent to level of stopping paren plus 2
       (ed/indent-to ed (+ (- p (ed/find-bol ed p)) 2)))
      (else
       ;; Indent to whatever follows
       (var ppp pp)
       (while (not (or (>= ppp (ed/len ed))
                       (== (ed/char ed ppp) ch/spc)
                       (== (ed/char ed ppp) ch/nl)))
         (set ppp (+ ppp 1)))
       (while (and (< ppp (ed/len ed)) (== (ed/char ed ppp) ch/spc))
         (set ppp (+ ppp 1)))
       (if ((or (>= ppp (ed/len ed)) (== (ed/char ed ppp) ch/nl))
            ;;; Nothing follows, indent to level of whatever followed the stopping paren
            (ed/indent-to ed (- pp (ed/find-bol ed pp))))
           (else
            (ed/indent-to ed (- ppp (ed/find-bol ed ppp)))))))
  (label return))

(fun (ed/indent-region ed)
  (var end (ed/point ed))
  (set (ed/point ed) (ed/mark ed))
  (set (ed/mark ed) -1)
  (while (< (ed/point ed) end)
    (var old-len (ed/len ed))
    (ed/indent ed)
    (set end (- end (- old-len (ed/len ed))))
    (ed/down ed 1)))

;; Region

(fun (ed/copy-region ed)
  (if ((and (!= (ed/mark ed) -1)
            (< (ed/mark ed) (ed/point ed)))
       (mem wbuf fs/wbuf)
       (fs/create wbuf)
       (ed/textbuf-write-region (ed/buf ed) wbuf
                                (ed/mark ed) (- (ed/point ed) (ed/mark ed)))
       (fs/commit wbuf ".clip"))))

(fun (ed/cut-region ed)
  (if ((and (!= (ed/mark ed) -1)
            (< (ed/mark ed) (ed/point ed)))
       (ed/copy-region ed)
       (var n (- (ed/point ed) (ed/mark ed)))
       (set (ed/point ed) (ed/mark ed))
       (ed/delete-string ed n))))

(fun (ed/paste ed)
  (mem rbuf fs/rbuf)
  (if ((fs/open rbuf ".clip")
       (while (fs/read rbuf)
         (ed/insert-string ed (fs/rbuf-start rbuf) (fs/rbuf-size rbuf)))
       (fs/close rbuf))))

;; Keys

(fun (ed/command ed key state)
  ;; (dbg/int "command" key)
  ;; (dbg/int "state" state)
  (if ((== state 0)
       (if ((== key -11) ;; return
            (if ((== (ed/mode ed) 1)
                 (set (ed/quit ed) 1))
                (else
                 (ed/insert ed 10))))
           ((== key -15) ;; left
            (ed/left ed))
           ((== key -17) ;; right
            (ed/right ed))
           ((== key -16) ;; up
            (ed/up ed 1))
           ((== key -18) ;; down
            (ed/down ed 1))
           ((== key -19) ;; page up
            (ed/up ed (ed/rows ed)))
           ((== key -20) ;; page down
            (ed/down ed (ed/rows ed)))
           ((== key -21) ;; end
            (ed/end-of-line ed))
           ((== key -22) ;; home
            (ed/beginning-of-line ed))
           ((== key -9) ;; backspace
            (ed/backspace ed))
           ((== key -13) ;; delete
            (ed/delete ed))
           ((== key -10) ;; tab
            (if ((>= (ed/mark ed) 0)
                 (ed/indent-region ed))
                (else
                 (ed/indent ed))))))
      ((== state 16) ;; control
       (if ((== key ch/spc) ;; C-SPC
            (set (ed/mark ed) (ed/point ed)))
           ((== key ch/g) ;; C-g
            (set (ed/mark ed) -1))
           ((== key ch/w) ;; C-w
            (ed/cut-region ed)
            (set (ed/mark ed) -1))
           ((== key ch/y) ;; C-y
            (ed/paste ed))
           ((== key ch/a) ;; C-a
            (ed/beginning-of-line ed))
           ((== key ch/d) ;; C-d
            (ed/delete ed))
           ((== key ch/e) ;; C-e
            (ed/end-of-line ed))
           ((== key -15) ;; left
            (ed/left-word ed))
           ((== key -17) ;; right
            (ed/right-word ed))
           ((== key -9) ;; backspace
            (ed/backspace-word ed))))
      ((== state 32) ;; meta
       (if ((== key ch/w) ;; M-w
            (ed/copy-region ed)
            (set (ed/mark ed) -1))
           ((== key ch/x) ;; M-x
            (set (ed/quit ed) 1))
           ((== key ch/r) ;; M-r
            (set (ed/quit ed) 2))))))

(fun (ed/input ed)
  (mem event gfx/event)
  (gfx/read-event event)
  (if ((== (gfx/ev-type event) 1)
       (sys/call 60 0))
      ((== (gfx/ev-type event) 3)
       (gfx/resize (gfx/ev-x event) (gfx/ev-y event))
       ((ed/layout-cb ed) ed (ed/layout-data ed) (gfx/ev-x event) (gfx/ev-y event))
       (ed/redisplay ed))
      ((== (gfx/ev-type event) 2)
       (var input (gfx/ev-input event))
       (var state (gfx/ev-state event))
       (if ((and (> input 0) (== state 0))
            (ed/insert ed input))
           (else
            (ed/command ed input state))))))

(fun (ed/resize ed lft top rgt bot)
  (set (ed/top ed) top)
  (set (ed/lft ed) lft)
  (set (ed/row-height ed) (- (gfx/font-ascent sys/mono) (gfx/font-descent sys/mono)))
  (set (ed/col-width ed) (gfx/glyph 0 0 ch/spc))
  (set (ed/rows ed) (/ (- bot top) (ed/row-height ed)))
  (set (ed/cols ed) (/ (- rgt lft) (ed/col-width ed))))

(fun (ed/ed buf mode layout-cb layout-data)
  (mem ed ed/data)
  (set (ed/buf ed) buf)
  (set (ed/len ed) (ed/textbuf-len buf))
  (set (ed/mode ed) mode)
  (set (ed/mark ed) -1)
  (set (ed/point ed) 0)
  (set (ed/window-top ed) 0)
  (set (ed/quit ed) 0)
  (set (ed/layout-cb ed) layout-cb)
  (set (ed/layout-data ed) layout-data)
  (layout-cb ed layout-data)
  (while (not (ed/quit ed))
    (ed/highlight ed)
    (ed/redisplay ed)
    (ed/input ed))
  (ed/clear ed)
  (set (ed/textbuf-len buf) (ed/len ed))
  (ed/quit ed))
