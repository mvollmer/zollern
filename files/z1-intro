@** The Z1 programming language

The first programming language of Zollern is called "Z1". It is
quite primitive, but already quite fun.

It has a real compiler, which is written in assembler. That story
is told in the [book asm1 Assembler], [book comp1 Compiler], and
[book lang Surface syntax] books. Here we explain the Z1 language
itself and how you can write programs in it.

@* No types

Z1 has functions with parameters and local variables, but it doesn't
have types. Parameters and variables are 64 bit quantities and
it depends on the operations that are used with them how those
bits are interpreted.

There is a [code +] syntax that treats them as signed integers,
and also a [code f+] syntax that treats them as floating point
numbers. And then there is syntax like [code u8] that treats
them as a memory address. It is up to the programmer to keep
this all straight.

@* Expression syntax

Z1 uses a lot of parenthesises for its syntax. The basic elements
are lists, symbols, and literals.

Symbols are more or less just words, and are made up from almost
any character that isn't used for something else. For example,
[code hello] is a symbol and so is [code @+~yo~+@]. The names
of the macros mentioned above, [code +], [code f+], and [code
u8], are all symbols.

Literals are the integers like [code 1234] and [code -12], and
double-quoted strings like [code "hello"].

Lists of course use [code (] and [code )] for their boundaries
and just white-space for element separation. For example, [code
(one two three)] is a list of three symbols, and
@c
(+ (u8 ptr 1) (fetch 2))
@
is a nested list that already looks like code.

Comments start with a [code ;] character and end at the next new-line
character.

@* Functions versus macros

Almost everything in a Z1 program is an "expression", something
that can be evaluated to yield a value. An expression is written
as a list where the first element is the operator and the rest
are the arguments. For example, this expression
@c
(+ 1 2 (* 3 4))
@
has [code +] as the operator and [code 1], [code 2], and [code
(* 3 4)] as the arguments.

What an expression means depends on the operator, and there are
two fundamental cases: Functions and Macros.

If the operator is a symbol that has a macro definition associated
with it, then the expression is expanded into a new expression
using that macro definition. The new expression is then compiled
in place of the original one.

If the operator is not a macro, then it is interpreted as an expression
itself, and the result of evaluating that expression is expected
to be the memory address of some machine code. At run-time, that
code is called as a function.

There are no other cases. Things that are keywords in other languages,
like [code if] or [code while], are macros in Z1.

Some examples:
@c
(+ 1 2)
@
This is a macro expression since [code +] is defined as a macro
in the [book lang Surface syntax] book.
@c
(gfx/rect x y 10 10 (gfx/color 40 40 50))
@
This expression has two calls to functions in the [book gfx Graphics]
book. Pretty straightforward.
@c
((u64 funcs 5) 9)
@
This reads a 64-bit value from the fifth element of the [code
funcs] array, and calls whatever that value is as a function
with argument [code 9]. The [code (u64 funcs 5)] part is a macro
expression using the [code u64] accessor defined in the [book
lang Surface syntax] book.

@* Functions

New functions are defined with [code fun]:
@c
(fun (my/foo x)
  (+ x 12))]
@
The code above defines a function called [code my/foo] with
one argument called [code x]. Calling the function will add 12
to [code x] and return the result.  For example,
@c
(my/foo 10)
@
will result in [code 22].

The name of a function must include the name of the book that
it is defined in as a prefix. When calling a function, the name
of it's book must be included. This is Z1's way of avoiding a
module system.

Functions can only be defined at the top-level, not nested within
other expressions.

A function can call other functions that have been defined earlier
(including itself), but functions in the same book that are defined
later can not be called. A trick to implement mutual recursion
with this restriction is to pass later defined functions as parameters
to earlier defined ones.

Local variables are declared with [code var]. The function [code
my/foo] from above could be defined like this with the help of
a local variable:
@c
(fun (my/foo x)
  (var result x)
  (set result (+ result 12))
  result)
@
First, [code x] is copied into [code result], and the [code 12]
is added to it. This example also shows that function can have
more than one expression in it. The last one determines the return
value of the function.

Variable declarations are expressions and evaluate to the initialization
value. They can appear anywhere, at the top-level of a function,
or deep within a nested expression in a nested loop. For example:
@c
(fun (my/foo)
  (while (var t (my/next-task))
    (my/do-task t)))
@
Assigning a new value to a variable is done with [code set], as
already seen above. The value of a [code set] expression is the
value that has been stored into the variable.

@* Control flow

Z1 has the usual control flow constructs: [code if], [code while],
and of course [code goto].

But let's start at the [code begin]ing. If you want to evaluate
a sequence of expressions in a place where the language only
allows one, you can use [code begin]:
@c
(begin
  expr-1
  expr-2
  ...
  expr-n)
@
This will evaluate all expressions in turn and ignore their results,
except for the last one, which will become the value of the whole
[code begin] expression.

Looping is done with [code while] in the obvious way:
@c
(while cond
  expr-1
  ...
  expr-n)
@
As long as [code cond] evaluates to true, the expressions in the
body are evaluated. If [code cond] is false on the first iteration,
the body will not be executed at all.

If you want a "do-while" loop, which evaluates the body at least
once and tests the condition after each iteration, you can combine
[code while] and [code begin]:
@c
(while (begin
         expr-1
         ...
         expr-n
         cond))
@
This also shows that the body of a [code while] loop can be empty.

Multi-way branching on conditions is done with [code if]:
@c
(if (cond-1
     expr-1.1
     ...
     expr-1.n)
    (cond-2
     expr-2.1
     ...
     expr-2.n)
    ...
    (else
     expr-n.1
     ...
     expr-n.n))
@
The conditions are evaluated one after the other, and the first
that is true determines the expressions that are executed. The
[code else] condition is always taken when it is its turn.

Pay close attention to the parentheseseses. You need to write
@c
(if ((< x 2)
     do-something-when-x-is-less-than-2))
@
instead of [code (if (< x 2) ...)]. This is a slight inconvenience
when there is only one condition and no else-branch, but makes
the general case nice and uniform.

This brings us to the king of all control structures, [code goto].
It will divert the control flow of a function to an arbitrary
location, indicated by a [code label]. For example:
@c
(fun (b/find lookup max val)
  (var pos 0)
  (while (< i max)
    (if ((== (lookup pos) val)
         (goto found)))
    (set pos (+ pos 1)))
  (label found)
  pos)
@

A [code label] expression does not evaluates to any defined value,
but maybe Z1 will one day be improved to have a value passing
[code goto], and maybe even [code return].

One has to be careful where to place [code goto] and [code label]
expressions. Although they are syntactically valid anywhere where
a expression is allowed, one can not jump to a different level
of expression nesting. That would leave the stack in shambles.
Z1 could be improved here as well, to allow jumps out of nested
expressions.

@* Memory access and data structures

Since Z1 has no types, it also has no real data structures like
arrays and structs. One has to access memory directly and be
careful about it.

Reading from memory is done with one of many accessors such as
[code u8], [code u32], etc. For example,
@c
(u32 ptr)
@
evaluates to the value of the 4 bytes at address [code ptr], while
@c
(u32 ptr 10)
@
uses [code ptr] plus 40 as the address. If a accessor is used
with two arguments, the second one is a offset that is added
to the address. The offset counts whatever the accessor is accessing:
four bytes for [code u32], two bytes for [code u16], etc.

All expressions in Z1 evaluate to a 64-bit value, so the quantities
read from memory are extended to 64-bit: the unsigned accessors,
[code u32] etc, extend with leading zeroes, while the signed
ones, [code s32] etc, extend by replicating the sign bit.

Storing into memory is done with [code set]:
@c
(set (u32 ptr) 1)
@
This will store [code 1] into the 4 bytes at address [code ptr].
Storing will just truncate the 64-bit value to however many bits
are actually written to memory, so there is no difference between
signed and unsigned accessors in this case. But they are all
provided anyway, so that the code can be clear and symmetric.

Here is a list of all accessors, but you probably can guess them:
@c
u8 u16 u32 u64 s8 s16 s32 s64
@

So in order to implement an array one can allocate some memory
somehow and then loop over it with the second-parameter version
of an accessor:
@c
(fun (my/inc arr len)
  (var i 0)
  (while (< i len)
    (set (u32 arr i) (+ (u32 arr i) 1))
    (set i (+ i 1))))
@

Structures get some amount of help from Z1 in the form of the
[code struct] macro. That macro will define a number of accessors
based on a description of the structure. For example, this
@c
(struct my/structure
  (foo u32)
  (bar u16))
@
will define macros called [code my/foo] and [code my/bar]
that can be used to access those two fields when given the address
of a structure:
@c
(my/foo ptr) ;; same as (u32 ptr)
(my/bar ptr) ;; same as (u16 (+ ptr 4))

(set (my/bar ptr) 1234) ;; same as (set (u16 (+ ptr 4)) 1234)
@
The [code struct] macro will also define [code my/structure]
to evaluate to the size of the whole thing:
@c
(mem/alloc my/structure) ;; same as (mem/alloc 6)
@
And lastly, a [code struct] expression also defines an accessor
for arrays of structures:
@c
(my/structure ptr 5)  ;; same as (+ ptr (* 6 5))
@
Thus, the [code my/structure] accessor returns the address of
the structure at index 5. This works well with the field accessors:
@c
(set (my/foo (my/structure array i)) 10)
@
A structure can contain arrays and other structures, and arrays
of structures:
@c
(struct my/other-structure
  (baz u32 10)
  (quux my/structure))

(my/baz ptr off) ;; same as (u32 (+ ptr 0) off)
(my/quux ptr)    ;; same as (+ ptr 40)
@

@* Macros

Z1 is lacking many many things that more serious languages have,
like types, modules, closures, etc. But it has macros, and in
fact, macros are used to implement the constructs explained above.

Macros are a way to transform one expression to another, at compile
time. For example, we might want to introduce a [code my/until]
loop, which is like a [code while] loop but stops when the condition
becomes true instead of false. We already have [code while] and
[code not], so we can express [code until] in terms of it.
@c
(my/until cond ...)
@
should be compiled like
@c
(while (not cond) ...)
@
In Z1, this can be written like this:
@c
(def (my/until ?cond . ?body)
  (while (not ?cond) . ?body))
@
The "?" question mark character here is special and denotes a
pattern matching variable. The "." dot character together with
the next symbol denotes "the rest of the list".

So a macro definition consists of a "head" that is matched with
the original expression, and a "body" that is substituted for
that expression, after the variables have been replaced with
the corresponding pieces of the original expression.

Z1 macros are not hygienic, they don't rename variables to avoid
conflicts. For example, if you would use the [code my/until]
macro in a function that has a local variable called [code not],
confusion would arise:
@c
(fun (my/func)
  (var not 12)
  (my/until (> not 14)
    (set not (+ not 1))))
@
Now the [code not] in the expansion of [code my/until] would no
longer refer to the boolean negation operator [code lang/not],
but to the local variable [code not].

Z1 solves this by not allowing any kind of shadowing. The declaration
of [code not] in [code my/func] above would be rejected by the
compiler because [code lang/not] already exists and is visible
as [code not].

Likewise, redeclaration of local variables or labels is not allowed;
they must all be unique in a given function.

Thus, a macro expansion should use freshly created, guaranteed
unique variable names. This can be done, but requires a more
advanced form a macro definition where you write some code that
gets runs during compilation whenever the macro is expanded.

To explain this, consider first this macro definition:
@c
(def (my/repeat ?n . ?body)
  (begin
    (var i 0)
    (while (< i 0)
      (begin . ?body)
      (set i (+ i 1)))))
@
This is problematic since the macro assumes that it can use a
local variable named [code i] all for itself. And even if it
would use a rarer name, like [code my-repeat-private-counter],
this still wouldn't work when a function uses [code my/repeat]
more than once. Each expansion needs its own unique variable
name.

Here is how to get it:
@c
(def (my/repeat ?n . ?body)
  ?(begin
     (var counter (exp/gensym))
     (syntax-expand
      (begin
        (var ?counter 0)
        (while (< ?counter 0)
          (begin . ?body)
          (set ?counter (+ ?counter 1)))))))
@
The [code ?(begin ...)] expression contains regular Z1 code that
gets executed by the compiler during compilation when [code my/repeat]
is expanded. That code then eventually uses [code syntax-expand]
to switch back to template-expansion-mode to construct the replacement
expression, using the newly generated symbol for the loop counter.

Check out the implementations of [code syntax-parse] and [code
syntax-expand] in the [book lang Surface syntax] book to learn
all the details. Macro-defining macros are especially interesting!

@* Primitives

As mentioned many times above, the advertised syntax of Z1 like
[code while] is implemented as macros. These macros ultimately
expand into a number of [emph primitives] that are actually understood
by the lower parts of the compiler.

Primitives are expressions where the operator is a literal integer.
For example, [code (9 0 x y)] is a primitive expression that
will add [code x] and [code y]. Another example would be [code
(10 z)], which declares a local variable called [code z], but
does not initialize it.

You don't need to know about these primitives when programming
in Z1. But the [book comp1 Compiler] and [book lang Surface syntax]
books make much more sense when you know about them in principle.
