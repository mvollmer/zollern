@** Random pictures

Diagrams deserve a proper programming language, and the only one
we have right now is Z1. So we write our pictures in Z1 and collect
them all here.

(Pictures also deserve a proper interactive editor, but that is
too hard for Zollern.)

Not embedding the code for diagrams in the book where they belong
has the advantage that we can explain those picture programs
properly, with all the tools we have for documenting programs.
We could even use pictures to explain picture programs!

@* Utilities

@=
(fun (pic/begin-display)
  (tx/par)
  (tx/skip (* 2 (tx/session-par-skip)))
  (tx/begin-hbox)
  (tx/skip 30) ;; same as @d
  (tx/begin-cbox))

(fun (pic/end)
  (tx/end)
  (tx/end)
  (tx/skip (tx/session-par-skip)))

(fun (pic/fill-rect x y w h col)
  (tx/cop tx/cop-move x y)
  (tx/cop tx/cop-rect w h col))

(fun (pic/h-line x y l col)
  (tx/cop tx/cop-move x y)
  (tx/cop tx/cop-rect l 1 col))

(fun (pic/v-line x y l col)
  (tx/cop tx/cop-move x y)
  (tx/cop tx/cop-rect 1 l col))
  
(fun (pic/rect x y w h col)
  (pic/h-line x y w col)
  (pic/h-line x (+ y h -1) w col)
  (pic/v-line x y h col)
  (pic/v-line (+ x w -1) y h col))

(fun (pic/text-width str)
  (var f (tx/session-font))
  (var w 0)
  (while (u8 str)
    (var glyph 0)
    (if ((< (u8 str) 128)
         (set glyph (u64 (gfx/font-glyphs f) (u8 str)))))
    (if ((not glyph)
         (set glyph (u64 (gfx/font-glyphs f) 32))))
    (set w (+ w (gfx/glyph-advance glyph)))
    (set str (+ str 1)))
  w)

(fun (pic/r-text x y str col)  
  (var f (tx/session-font))
  (var fh (gfx/font-ascent f))
  (var fd (- (gfx/font-descent f)))
  (var y-off (- (/ (+ fh fd) 2) fd))
  (tx/cop tx/cop-move x (+ y y-off))
  (tx/text str))

(fun (pic/l-text x y str col)  
  (var w (pic/text-width str))
  (pic/r-text (- x w) y str col))

(fun (pic/b-text x y str col)  
  (var w (pic/text-width str))
  (var f (tx/session-font))
  (var fh (gfx/font-ascent f))
  (var fd (- (gfx/font-descent f)))
  (tx/cop tx/cop-move (- x (/ w 2)) (+ y fh))
  (tx/text str))

(fun (pic/t-text x y str col)  
  (var w (pic/text-width str))
  (var f (tx/session-font))
  (var fh (gfx/font-ascent f))
  (var fd (- (gfx/font-descent f)))
  (tx/cop tx/cop-move (- x (/ w 2)) (- y fd))
  (tx/text str))

(defconst pic/black (gfx/const-color 0 0 0))

(fun (pic/text-box x y str)
  (var b 5)
  (var w (pic/text-width str))
  (var f (tx/session-font))
  (var fh (gfx/font-ascent f))
  (var fd (- (gfx/font-descent f)))
  (pic/rect x (- y fh b) (+ w (* 4 b)) (+ fh fd b b) pic/black)
  (tx/cop tx/cop-move (+ x b b) y)
  (tx/text str))

@

A TEST picture

[pic/TEST]

@=
(fun (pic/TEST)
  (pic/begin-display)
  (pic/rect 20 20 10 10 (gfx/color 0 0 255))
  (pic/end))

@* Pictures for the "tx" book

[pic/tx-box-dims]

@=
(fun (pic/big-glyph x y sz font c)
  (var glyph 0)
  (if ((< c 128)
       (set glyph (u64 (gfx/font-glyphs font) c))))
  (if ((not glyph)
       (set glyph (u64 (gfx/font-glyphs font) 32))))
  (var w (gfx/glyph-width glyph))
  (var h (gfx/glyph-height glyph))
  (set x (+ x (* sz (gfx/glyph-offset-x glyph))))
  (set y (+ y (* sz (gfx/glyph-offset-y glyph))))
  (var src-p (+ glyph gfx/glyph-header))
  (var i)
  (var j)
  (set j 0)
  (while (< j h)
    (set i 0)
    (while (< i w)
      (var a (- 255 (u8 src-p)))
      (pic/fill-rect (+ x (* i sz) 1) (+ y (* j sz) 1) (- sz 1) (- sz 1) (gfx/color a a a))
      (set src-p (+ src-p u8))
      (set i (+ i 1)))
    (set j (+ j 1)))
  (* sz (gfx/glyph-advance glyph)))
  
(fun (pic/big-text x y sz font str)
  (var w 0)
  (while (u8 str)
    (set w (+ w (pic/big-glyph (+ x w) y sz font (u8 str))))
    (set str (+ str 1)))
  w)

(fun (pic/tx-box-dims)
  (var font fonts/sans-o)
  (var sz 8)
  (var h-off 100)
  (var t-margin 10)
  
  (pic/begin-display)
  
  ;; text in the box
  (var w (pic/big-text h-off 0 sz font "type"))
  (var h (* sz (gfx/font-ascent font)))
  (var d (- (* sz (gfx/font-descent font))))

  ;; the box itself
  (pic/rect h-off 0 w (+ h d) pic/black)
  (pic/h-line h-off h w (gfx/color 150 150 150))

  ;; vertical measurements
  (var vm-off (- h-off 15))
  (pic/v-line vm-off 0 (+ h d) pic/black)
  (pic/h-line (- vm-off 5) 0 10 pic/black)
  (pic/h-line (- vm-off 5) h 10 pic/black)
  (pic/h-line (- vm-off 5) (+ h d) 10 pic/black)
  (pic/l-text (- vm-off t-margin) (/ h 2) "height" pic/black)
  (pic/l-text (- vm-off t-margin) (+ h (/ d 2)) "depth" pic/black)

  ;; horizontal measurement
  (var hm-off (+ h d 15))
  (pic/h-line h-off hm-off w pic/black)
  (pic/v-line h-off (- hm-off 5) 10 pic/black)
  (pic/v-line (+ h-off w) (- hm-off 5) 10 pic/black)
  (pic/b-text (+ h-off (/ w 2)) (+ hm-off t-margin) "width" pic/black)

  ;; baseline label
  (pic/r-text (+ h-off w t-margin) h "baseline" pic/black)

  (pic/end))
@

@* Pictures for the "c" book

[pic/c-list-pairs]

@=
(fun (pic/c-pair x y)
  (pic/rect x y 50 30 pic/black)
  (pic/t-text (+ x 25) y "first" pic/black)
  (pic/rect (+ x 49) y 50 30 pic/black)
  (pic/t-text (+ x 74) y "rest" pic/black))

(fun (pic/c-arrow-head x y)
  (var i 0)
  (while (< i 4)
    (pic/v-line (- x i) (- y 1 i) (+ 3 i i) pic/black)
    (set i (+ i 1))))
  
(fun (pic/c-first-pointer x)
  (pic/fill-rect (+ x 23) 12 5 5 pic/black)
  (pic/v-line (+ x 25) 12 (- 72 12) pic/black)
  (pic/h-line (+ x 25) 71 15 pic/black)
  (pic/c-arrow-head (+ x 38) 71))
  
(fun (pic/c-rest-pointer x)
  (pic/fill-rect (+ x 23 49) 12 5 5 pic/black)
  (pic/h-line (+ x 27 49) 14 (+ 25 50) pic/black)
  (pic/c-arrow-head (+ x 27 49 25 47) 14))
  
(fun (pic/c-list-pairs)
  (var x 0)
  (var p-gap 50)

  (pic/begin-display)
  
  ;; three pairs
  (pic/c-pair x 0)
  (pic/c-pair (+ x 100 p-gap) 0)
  (pic/c-pair (+ x 100 p-gap 100 p-gap) 0)

  ;; three list elements
  (pic/text-box (+ x 40) 75 "symbol +")
  (pic/text-box (+ x 40 100 p-gap) 75 "symbol x")
  (pic/text-box (+ x 40 100 p-gap 100 p-gap) 75 "number 1")

  ;; pointers from pairs to elements
  (pic/c-first-pointer x)
  (pic/c-first-pointer (+ x 100 p-gap))
  (pic/c-first-pointer (+ x 100 p-gap 100 p-gap))
  
  ;; rest pointers
  (pic/c-rest-pointer x)
  (pic/c-rest-pointer (+ x 100 p-gap))
  
  ;; zero
  (pic/b-text (+ x 100 p-gap 100 p-gap 49 25) 7 "0" pic/black)

  (pic/end))
@

[pic/c-inc-fun]

@=
(fun (pic/c-gx x off)
  (+ (* x 150) off))

(fun (pic/c-gy y off)
  (+ (* y 60) off))

(fun (pic/c-v-pair x y)
  (pic/rect (pic/c-gx x 0) (pic/c-gy y 0) 70 20 pic/black)
  (pic/rect (pic/c-gx x 0) (pic/c-gy y 19) 70 20 pic/black))

(fun (pic/c-text x y str)
  (pic/text-box (pic/c-gx x 0) (pic/c-gy y 15) str))

(fun (pic/c-v-first-arrow x y l)
  (pic/fill-rect (pic/c-gx x 33) (pic/c-gy y 8) 5 5 pic/black)
  (pic/h-line (pic/c-gx x 33) (pic/c-gy y 10) (pic/c-gx l -33) pic/black)
  (pic/c-arrow-head (pic/c-gx (+ x l) -1) (pic/c-gy y 10)))

(fun (pic/c-v-rest-arrow x y l)
  (pic/fill-rect (pic/c-gx x 33) (pic/c-gy y 27) 5 5 pic/black)
  (pic/v-line (pic/c-gx x 35) (pic/c-gy y 27) (pic/c-gy l -27) pic/black)
  (var e (pic/c-gy (+ y l) -2))
  (var xx (pic/c-gx x 35))
  (var i 0)
  (while (< i 4)
    (pic/h-line (- xx 1 i) (- e i) (+ 3 i i) pic/black)
    (set i (+ i 1))))

(fun (pic/c-v-rest-zero x y)
  (pic/b-text (pic/c-gx x 35) (pic/c-gy y 21) "0" pic/black))

(fun (pic/c-inc-fun)
  (pic/begin-display)

  (pic/c-v-pair 0 0)
  (pic/c-v-first-arrow 0 0 1)
  (pic/c-text 1 0 "fun")
  (pic/c-v-rest-arrow 0 0 1)

  (pic/c-v-pair 0 1) ;; (inc x)
  (pic/c-v-first-arrow 0 1 1)
  (pic/c-v-rest-arrow 0 1 2)
  (pic/c-v-pair 0 3) ;; (+ x 1)
  (pic/c-v-first-arrow 0 3 1)
  (pic/c-v-rest-zero 0 3)

  (pic/c-v-pair 1 1)
  (pic/c-v-first-arrow 1 1 1)
  (pic/c-text 2 1 "inc")
  (pic/c-v-rest-arrow 1 1 1)

  (pic/c-v-pair 1 2)
  (pic/c-v-first-arrow 1 2 2)
  (pic/c-text 3 2 "x  (argument 0)")
  (pic/c-v-rest-zero 1 2)

  (pic/c-v-pair 1 3)
  (pic/c-v-first-arrow 1 3 1)
  (pic/c-text 2 3 "+")
  (pic/c-v-rest-arrow 1 3 1)

  (pic/c-v-pair 1 4) ;; x
  (pic/c-v-rest-arrow 1 4 1)

  ;; funny arrow that is the whole point of this picture
  (pic/fill-rect (pic/c-gx 1 33) (pic/c-gy 4 8) 5 5 pic/black)
  (pic/h-line (pic/c-gx 1 33) (pic/c-gy 4 10) (pic/c-gx 2 -75) pic/black)
  (pic/v-line (pic/c-gx 3 (- 33 76)) (pic/c-gy 2 10) (pic/c-gy 2) pic/black)

  (pic/c-v-pair 1 5)
  (pic/c-v-first-arrow 1 5 1)
  (pic/c-text 2 5 "1")
  (pic/c-v-rest-zero 1 5)

  (pic/end))  
@
