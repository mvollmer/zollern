(struct gfx/context
  gfx-screen-width
  gfx-screen-height
  gfx-pixels
  gfx-loop-quit)

(struct gfx/event
  (ev-type u16)
  (ev-x u16)
  (ev-y u16)
  (ev-state u16)
  (ev-input s32))

(struct gfx/command
  (cmd-op u32)
  (cmd-arg1 u32)
  (cmd-arg2 u32)
  (cmd-arg3 u32))

(fun (gfx/width)
  (gfx/gfx-screen-width (ctxt/gfx context)))

(fun (gfx/height)
  (gfx/gfx-screen-height (ctxt/gfx context)))

(fun (gfx/cmd op arg1 arg2 arg3)
  (mem cmd gfx/command)
  (set (gfx/cmd-op cmd) op)
  (set (gfx/cmd-arg1 cmd) arg1)
  (set (gfx/cmd-arg2 cmd) arg2)
  (set (gfx/cmd-arg3 cmd) arg3)
  (sys/call 1 4 cmd gfx/command))

(fun (gfx/show)
  (gfx/cmd 2))

(fun (gfx/read-event event)
  (sys/call 0 5 event gfx/event))

(fun (gfx/wait)
  (mem event gfx/event)
  (while (begin
           (gfx/read-event event)
           (!= (gfx/ev-type event) 1))))

(fun (gfx/resize w h)
  (var gfx (ctxt/gfx context))
  (if ((gfx/gfx-pixels gfx)
       (sys/call 11 (gfx/gfx-pixels gfx) (* (gfx/width) (gfx/height) u32))))
  (set (gfx/gfx-screen-width (ctxt/gfx context)) w)
  (set (gfx/gfx-screen-height (ctxt/gfx context)) h)
  (var bytes (* w h u32))
  (if ((< (sys/call 77 3 bytes) 0)
       (sys/call 60 12)))
  (set (gfx/gfx-pixels (ctxt/gfx context))
       (sys/call 9 0 bytes 3 1 3 0))
  (gfx/cmd 1 w h))

(fun (gfx/init)
  (set (ctxt/gfx context) (mem/alloc gfx/context))
  (set (gfx/gfx-pixels (ctxt/gfx context)) 0)
  (mem event gfx/event)
  (while (begin
           (gfx/read-event event)
           (!= (gfx/ev-type event) 3)))
  (gfx/resize (gfx/ev-x event) (gfx/ev-y event)))

(fun (gfx/color r g b)
  (+ (* (+ (* r 256) g) 256) b))

(fun (gfx/rect x y w h c)
  (var gfx (ctxt/gfx context))
  (var pixels (+ (gfx/gfx-pixels gfx) (* (+ x (* y (gfx/width))) u32)))
  (var skip (* (- (gfx/width) w) u32))
  (var i)
  (var j)
  (set j 0)
  (while (< j h)
    (set i 0)
    (while (< i w)
      (set (u32 pixels) c)
      (set pixels (+ pixels u32))
      (set i (+ i 1)))
    (set pixels (+ pixels skip))
    (set j (+ j 1))))

(fun (gfx/invert-rect x y w h)
  (var gfx (ctxt/gfx context))
  (var pixels (+ (gfx/gfx-pixels gfx) (* (+ x (* y (gfx/width))) u32)))
  (var skip (* (- (gfx/width) w) u32))
  (var white (gfx/color 255 255 255))
  (var i)
  (var j)
  (set j 0)
  (while (< j h)
    (set i 0)
    (while (< i w)
      (set (u32 pixels) (- white (u32 pixels)))
      (set pixels (+ pixels u32))
      (set i (+ i 1)))
    (set pixels (+ pixels skip))
    (set j (+ j 1))))

(fun (gfx/tint-rect x y w h r g b)
  (var gfx (ctxt/gfx context))
  (var pixels (+ (gfx/gfx-pixels gfx) (* (+ x (* y (gfx/width))) u32)))
  (var skip (* (- (gfx/width) w) u32))
  (var i)
  (var j)
  (set j 0)
  (while (< j h)
    (set i 0)
    (while (< i w)
      (set (u32 pixels) (gfx/color (/ (* r (u8 pixels 2)) 255)
                                   (/ (* g (u8 pixels 1)) 255)
                                   (/ (* b (u8 pixels 0)) 255)))
      (set pixels (+ pixels u32))
      (set i (+ i 1)))
    (set pixels (+ pixels skip))
    (set j (+ j 1))))

(fun (gfx/copy-rect-up x1 y1 w h x2 y2)
  (var gfx (ctxt/gfx context))
  (var src (+ (gfx/gfx-pixels gfx) (* (+ x1 (* y1 (gfx/width))) u32)))
  (var dst (+ (gfx/gfx-pixels gfx) (* (+ x2 (* y2 (gfx/width))) u32)))
  (var skip (* (- (gfx/width) w) u32))
  (var i)
  (var j)
  (set j 0)
  (while (< j h)
    (set i 0)
    (while (< i w)
      (set (u32 dst) (u32 src))
      (set src (+ src u32))
      (set dst (+ dst u32))
      (set i (+ i 1)))
    (set src (+ src skip))
    (set dst (+ dst skip))
    (set j (+ j 1))))

(struct gfx/font
  (font-glyphs  u64)
  (font-ascent  s8)
  (font-descent s8))

(struct gfx/glyph-header
  (glyph-width    u8)
  (glyph-height   u8)
  (glyph-offset-x s8)
  (glyph-offset-y s8)
  (glyph-advance  s8)
  (glyph-unused-1 u8)
  (glyph-unused-2 u8)
  (glyph-unused-3 u8))

(fun (gfx/glyph font x y c)
  (var gfx (ctxt/gfx context))
  (var glyph 0)
  (if ((< c 128)
       (set glyph (u64 (gfx/font-glyphs font) c))))
  (if ((not glyph)
       (set glyph (u64 (gfx/font-glyphs font) 32))))
  (var w (gfx/glyph-width glyph))
  (var h (gfx/glyph-height glyph))
  (set x (+ x (gfx/glyph-offset-x glyph)))
  (set y (+ y (gfx/glyph-offset-y glyph)))
  (var src-p (+ glyph gfx/glyph-header))
  (var dst-p (+ (gfx/gfx-pixels gfx) (* (+ x (* y (gfx/width))) u32)))
  (var skip (* (- (gfx/width) w) u32))
  (var i)
  (var j)
  (set j 0)
  (while (< j h)
    (set i 0)
    (while (< i w)
      (set (u32 dst-p) (* (- 255 (u8 src-p)) 65793))
      (set src-p (+ src-p u8))
      (set dst-p (+ dst-p u32))
      (set i (+ i 1)))
    (set dst-p (+ dst-p skip))
    (set j (+ j 1)))
  (gfx/glyph-advance glyph))

(fun (gfx/put-pixel x y c)
  (var gfx (ctxt/gfx context))
  (set (u32 (gfx/gfx-pixels gfx) (+ (* y (gfx/width)) x)) c))

;; Event loop

(struct gfx/event-functions
  efun-paint
  efun-input)

(fun (gfx/loop-quit)
  (var gfx (ctxt/gfx context))
  (set (gfx/gfx-loop-quit gfx) 1))

(fun (gfx/paint instance functions)
  ((gfx/efun-paint functions) instance 0 0 (gfx/width) (gfx/height))
  (gfx/show))

(fun (gfx/loop instance functions)
  (var gfx (ctxt/gfx context))
  (set (gfx/gfx-loop-quit gfx) 0)
  (gfx/paint instance functions)
  (while (not (gfx/gfx-loop-quit gfx))
    (mem event gfx/event)
    (gfx/read-event event)
    (if ((== (gfx/ev-type event) 1)
         (sys/call 60 0))
        ((== (gfx/ev-type event) 3)
         (gfx/resize (gfx/ev-x event) (gfx/ev-y event))
         (gfx/paint instance functions))
        ((== (gfx/ev-type event) 2)
         ((gfx/efun-input functions) instance
                          (gfx/ev-state event) (gfx/ev-input event)
                          (gfx/ev-x event) (gfx/ev-y event))
         (gfx/paint instance functions))))
  (set (gfx/gfx-loop-quit gfx) 0))
