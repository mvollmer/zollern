@=

(struct gfx/context
  gfx-screen-width
  gfx-screen-height
  gfx-pixels

  gfx-win-x
  gfx-win-y
  gfx-clip-x ;; absolute, not relative to win
  gfx-clip-y
  gfx-clip-w
  gfx-clip-h

  gfx-x
  gfx-y
  gfx-left
  gfx-font
  gfx-inverse)

(struct gfx/event
  (ev-type u16)
  (ev-x u16)
  (ev-y u16)
  (ev-state u16)
  (ev-input s32))

(def gfx/ev-state-shift    8)
(def gfx/ev-state-control 16)
(def gfx/ev-state-meta    32)
(def gfx/ev-state-inside  64)

(def gfx/ev-move              0)
(def gfx/ev-button-1-press   -1)
(def gfx/ev-button-1-release -2)
(def gfx/ev-button-2-press   -3)
(def gfx/ev-button-2-release -4)
(def gfx/ev-button-3-press   -5)
(def gfx/ev-button-3-release -6)
(def gfx/ev-scroll-up        -7)
(def gfx/ev-scroll-down      -8)

(def gfx/ev-key-backspace  -9)
(def gfx/ev-key-tab       -10)
(def gfx/ev-key-return    -11)
(def gfx/ev-key-escape    -12)
(def gfx/ev-key-delete    -13)
(def gfx/ev-key-home      -14)
(def gfx/ev-key-left      -15)
(def gfx/ev-key-up        -16)
(def gfx/ev-key-right     -17)
(def gfx/ev-key-down      -18)
(def gfx/ev-key-page-up   -19)
(def gfx/ev-key-page-down -20)
(def gfx/ev-key-end       -21)
(def gfx/ev-key-begin     -22)

(struct gfx/command
  (cmd-op u32)
  (cmd-arg1 u32)
  (cmd-arg2 u32)
  (cmd-arg3 u32))

(fun (gfx/width)
  (gfx/gfx-screen-width (ctxt/gfx context)))

(fun (gfx/height)
  (gfx/gfx-screen-height (ctxt/gfx context)))

(fun (gfx/cmd op arg1 arg2 arg3)
  (mem cmd gfx/command)
  (set (gfx/cmd-op cmd) op)
  (set (gfx/cmd-arg1 cmd) arg1)
  (set (gfx/cmd-arg2 cmd) arg2)
  (set (gfx/cmd-arg3 cmd) arg3)
  (sys/write 4 cmd gfx/command))

(fun (gfx/show-and-get)
  (gfx/cmd 2))

(fun (gfx/read-event event)
  (sys/read 5 event gfx/event))

(fun (gfx/resize w h)
  (var gfx (ctxt/gfx context))
  (if ((gfx/gfx-pixels gfx)
       (sys/munmap (gfx/gfx-pixels gfx) (* (gfx/width) (gfx/height) u32))))
  (set (gfx/gfx-screen-width (ctxt/gfx context)) w)
  (set (gfx/gfx-screen-height (ctxt/gfx context)) h)
  (var bytes (* w h u32))
  (if ((< (sys/ftruncate 3 bytes) 0)
       (sys/exit 12)))
  (set (gfx/gfx-pixels (ctxt/gfx context))
       (sys/mmap 0 bytes (+ sys/prot-read sys/prot-write) sys/map-shared 3 0))
  (gfx/cmd 1 w h))

(fun (gfx/reset-window)
  (var c (ctxt/gfx context))
  (set (gfx/gfx-win-x c) 0)
  (set (gfx/gfx-win-y c) 0)
  (set (gfx/gfx-clip-x c) 0)
  (set (gfx/gfx-clip-y c) 0)
  (set (gfx/gfx-clip-w c) (gfx/gfx-screen-width c))
  (set (gfx/gfx-clip-h c) (gfx/gfx-screen-height c)))

(fun (gfx/init)
  (var c (mem/alloc gfx/context))
  (set (ctxt/gfx context) c)
  (set (gfx/gfx-pixels c) 0)
  (mem event gfx/event)
  (while (begin
           (gfx/read-event event)
           (!= (gfx/ev-type event) 3)))
  (gfx/resize (gfx/ev-x event) (gfx/ev-y event))
  (gfx/reset-window))

(def (gfx/const-color ?r ?g ?b)
  (+ (* (+ (* ?r 256) ?g) 256) ?b))

(fun (gfx/color r g b)
  (+ (* (+ (* r 256) g) 256) b))

(fun (gfx/color-r c)
  (bit-and (/ c (* 256 256)) 255))

(fun (gfx/color-g c)
  (bit-and (/ c (* 256)) 255))

(fun (gfx/color-b c)
  (bit-and c 255))

(def (gfx/win-to-screen ?gfx ?x ?y)
  (begin
    (set ?x (+ ?x (gfx/gfx-win-x ?gfx)))
    (set ?y (+ ?y (gfx/gfx-win-y ?gfx)))))

(def (gfx/clip-rect ?gfx ?x ?y ?w ?h)
  (begin
    (var clip-min-x (gfx/gfx-clip-x ?gfx))
    (if ((< ?x clip-min-x)
         (set ?w (- ?w (- clip-min-x ?x)))
         (set ?x clip-min-x)))
    (var clip-min-y (gfx/gfx-clip-y ?gfx))
    (if ((< ?y clip-min-y)
         (set ?h (- ?h (- clip-min-y ?y)))
         (set ?y clip-min-y)))
    (var clip-max-w (- (gfx/gfx-clip-w ?gfx) (- ?x clip-min-x)))
    (if ((> ?w clip-max-w)
         (set ?w clip-max-w)))
    (var clip-max-h (- (gfx/gfx-clip-h ?gfx) (- ?y clip-min-y)))
    (if ((> ?h clip-max-h)
         (set ?h clip-max-h)))))

(struct gfx/clipstate cs-w-x cs-w-y cs-x cs-y cs-w cs-h)

(fun (gfx/push-clip old x y w h)
  (var c (ctxt/gfx context))
  (set (gfx/cs-w-x old) (gfx/gfx-win-x c))
  (set (gfx/cs-w-y old) (gfx/gfx-win-y c))
  (set (gfx/cs-x old) (gfx/gfx-clip-x c))
  (set (gfx/cs-y old) (gfx/gfx-clip-y c))
  (set (gfx/cs-w old) (gfx/gfx-clip-w c))
  (set (gfx/cs-h old) (gfx/gfx-clip-h c))
  (set (gfx/gfx-win-x c) x)
  (set (gfx/gfx-win-y c) y)
  (gfx/clip-rect c x y w h)
  (set (gfx/gfx-clip-x c) x)
  (set (gfx/gfx-clip-y c) y)
  (set (gfx/gfx-clip-w c) w)
  (set (gfx/gfx-clip-h c) h))

(fun (gfx/pop-clip old)
  (var c (ctxt/gfx context))
  (set (gfx/gfx-win-x c) (gfx/cs-w-x old))
  (set (gfx/gfx-win-y c) (gfx/cs-w-y old))
  (set (gfx/gfx-clip-x c) (gfx/cs-x old))
  (set (gfx/gfx-clip-y c) (gfx/cs-y old))
  (set (gfx/gfx-clip-w c) (gfx/cs-w old))
  (set (gfx/gfx-clip-h c) (gfx/cs-h old)))

(fun (gfx/rect x y w h c)
  (var gfx (ctxt/gfx context))
  (gfx/win-to-screen gfx x y)
  (gfx/clip-rect gfx x y w h)
  (var pixels (+ (gfx/gfx-pixels gfx) (* (+ x (* y (gfx/width))) u32)))
  (var skip (* (- (gfx/gfx-screen-width gfx) w) u32))
  (var i)
  (var j)
  (set j 0)
  (while (< j h)
    (set i 0)
    (while (< i w)
      (set (u32 pixels) c)
      (set pixels (+ pixels u32))
      (set i (+ i 1)))
    (set pixels (+ pixels skip))
    (set j (+ j 1))))

(fun (gfx/invert-rect x y w h)
  (var gfx (ctxt/gfx context))
  (gfx/win-to-screen gfx x y)
  (gfx/clip-rect gfx x y w h)
  (var pixels (+ (gfx/gfx-pixels gfx) (* (+ x (* y (gfx/width))) u32)))
  (var skip (* (- (gfx/width) w) u32))
  (var white (gfx/color 255 255 255))
  (var i)
  (var j)
  (set j 0)
  (while (< j h)
    (set i 0)
    (while (< i w)
      (set (u32 pixels) (- white (u32 pixels)))
      (set pixels (+ pixels u32))
      (set i (+ i 1)))
    (set pixels (+ pixels skip))
    (set j (+ j 1))))

(fun (gfx/tint-rect x y w h r g b)
  (var gfx (ctxt/gfx context))
  (gfx/win-to-screen gfx x y)
  (gfx/clip-rect gfx x y w h)
  (var pixels (+ (gfx/gfx-pixels gfx) (* (+ x (* y (gfx/width))) u32)))
  (var skip (* (- (gfx/width) w) u32))
  (var i)
  (var j)
  (set j 0)
  (while (< j h)
    (set i 0)
    (while (< i w)
      (set (u32 pixels) (gfx/color (/ (* r (u8 pixels 2)) 255)
                                   (/ (* g (u8 pixels 1)) 255)
                                   (/ (* b (u8 pixels 0)) 255)))
      (set pixels (+ pixels u32))
      (set i (+ i 1)))
    (set pixels (+ pixels skip))
    (set j (+ j 1))))

(fun (gfx/tint-rect-2 x y w h fg-r fg-g fg-b bg-r bg-g bg-b)
  (var gfx (ctxt/gfx context))
  (gfx/win-to-screen gfx x y)
  (gfx/clip-rect gfx x y w h)
  (var pixels (+ (gfx/gfx-pixels gfx) (* (+ x (* y (gfx/width))) u32)))
  (var skip (* (- (gfx/width) w) u32))
  (var i)
  (var j)
  (set j 0)
  (while (< j h)
    (set i 0)
    (while (< i w)
      (set (u32 pixels) (gfx/color (/ (+ (* fg-r (- 255 (u8 pixels 2))) (* bg-r (u8 pixels 2))) 255)
                                   (/ (+ (* fg-g (- 255 (u8 pixels 1))) (* bg-g (u8 pixels 1))) 255)
                                   (/ (+ (* fg-b (- 255 (u8 pixels 0))) (* bg-b (u8 pixels 0))) 255)))
      (set pixels (+ pixels u32))
      (set i (+ i 1)))
    (set pixels (+ pixels skip))
    (set j (+ j 1))))

(fun (gfx/clear)
  (var gfx (ctxt/gfx context))
  (gfx/rect (- (gfx/gfx-clip-x gfx) (gfx/gfx-win-x gfx)) (- (gfx/gfx-clip-y gfx) (gfx/gfx-win-y gfx))
            (gfx/gfx-clip-w gfx) (gfx/gfx-clip-h gfx)
            (gfx/color 255 255 255)))

(struct gfx/font
  (font-glyphs  u64)
  (font-ascent  s8)
  (font-descent s8))

(struct gfx/glyph-header
  (glyph-width    u8)
  (glyph-height   u8)
  (glyph-offset-x s8)
  (glyph-offset-y s8)
  (glyph-advance  s8)
  (glyph-unused-1 u8)
  (glyph-unused-2 u8)
  (glyph-unused-3 u8))

(fun (gfx/glyph-noclip-nocompose font x y c)
  (var gfx (ctxt/gfx context))
  (var glyph 0)
  (if ((< c 128)
       (set glyph (u64 (gfx/font-glyphs font) c))))
  (if ((not glyph)
       (set glyph (u64 (gfx/font-glyphs font) 32))))
  (var w (gfx/glyph-width glyph))
  (var h (gfx/glyph-height glyph))
  (set x (+ x (gfx/glyph-offset-x glyph)))
  (set y (+ y (gfx/glyph-offset-y glyph)))
  (gfx/win-to-screen gfx x y)
  (var src-p (+ glyph gfx/glyph-header))
  (var dst-p (+ (gfx/gfx-pixels gfx) (* (+ x (* y (gfx/width))) u32)))
  (var skip (* (- (gfx/width) w) u32))
  (var i)
  (var j)
  (set j 0)
  (while (< j h)
    (set i 0)
    (while (< i w)
      (set (u32 dst-p) (* (- 255 (u8 src-p)) 65793))
      (set src-p (+ src-p u8))
      (set dst-p (+ dst-p u32))
      (set i (+ i 1)))
    (set dst-p (+ dst-p skip))
    (set j (+ j 1)))
  (gfx/glyph-advance glyph))

(fun (gfx/put-pixel x y c)
  (var gfx (ctxt/gfx context))
  (gfx/win-to-screen gfx x y)
  (if ((and (>= x (gfx/gfx-clip-x gfx)) (>= y (gfx/gfx-clip-y gfx))
            (< x (+ (gfx/gfx-clip-x gfx) (gfx/gfx-clip-w gfx))) (< y (+ (gfx/gfx-clip-y gfx) (gfx/gfx-clip-h gfx))))
       (set (u32 (gfx/gfx-pixels gfx) (+ (* y (gfx/width)) x)) c))))

(fun (gfx/min a b)
  (if ((< a b) a) (else b)))

(fun (gfx/put-pixel-compose x y c)
  (var gfx (ctxt/gfx context))
  (gfx/win-to-screen gfx x y)
  (if ((and (>= x (gfx/gfx-clip-x gfx)) (>= y (gfx/gfx-clip-y gfx))
            (< x (+ (gfx/gfx-clip-x gfx) (gfx/gfx-clip-w gfx))) (< y (+ (gfx/gfx-clip-y gfx) (gfx/gfx-clip-h gfx))))
       (var ptr (+ (gfx/gfx-pixels gfx) (* (+ (* y (gfx/width)) x) u32)))
       (var sc (u32 ptr))
       (set (u32 ptr) (gfx/color (gfx/min (gfx/color-r c) (gfx/color-r sc))
                                 (gfx/min (gfx/color-g c) (gfx/color-g sc))
                                 (gfx/min (gfx/color-b c) (gfx/color-b sc)))))))

(fun (gfx/get-pixel x y)
  (var gfx (ctxt/gfx context))
  (gfx/win-to-screen gfx x y)
  (if ((and (>= x (gfx/gfx-clip-x gfx)) (>= y (gfx/gfx-clip-y gfx))
            (< x (+ (gfx/gfx-clip-x gfx) (gfx/gfx-clip-w gfx))) (< y (+ (gfx/gfx-clip-y gfx) (gfx/gfx-clip-h gfx))))
       (u32 (gfx/gfx-pixels gfx) (+ (* y (gfx/width)) x)))
      (else
       0)))

(fun (gfx/glyph font x y c)
  (var gfx (ctxt/gfx context))
  (var glyph 0)
  (if ((< c 128)
       (set glyph (u64 (gfx/font-glyphs font) c))))
  (if ((not glyph)
       (set glyph (u64 (gfx/font-glyphs font) 32))))
  (var w (gfx/glyph-width glyph))
  (var h (gfx/glyph-height glyph))
  (set x (+ x (gfx/glyph-offset-x glyph)))
  (set y (+ y (gfx/glyph-offset-y glyph)))
  (if ((or (< (+ x w (gfx/gfx-win-x gfx)) (gfx/gfx-clip-x gfx)) (>= x (+ (gfx/gfx-clip-x gfx) (gfx/gfx-clip-w gfx)))
           (< (+ y h (gfx/gfx-win-x gfx)) (gfx/gfx-clip-y gfx)) (>= y (+ (gfx/gfx-clip-y gfx) (gfx/gfx-clip-h gfx))))
       (gfx/glyph-advance glyph))
      (else
       (var src-p (+ glyph gfx/glyph-header))
       (var i)
       (var j)
       (set j 0)
       (while (< j h)
         (set i 0)
         (while (< i w)
           (gfx/put-pixel-compose (+ x i) (+ y j) (* (- 255 (u8 src-p)) 65793))
           (set src-p (+ src-p u8))
           (set i (+ i 1)))
         (set j (+ j 1)))
       (gfx/glyph-advance glyph))))

(fun (gfx/string x y font str)
  (while (u8 str)
    (var dx (gfx/glyph font x y (u8 str)))
    (set x (+ x dx))
    (set str (+ str 1))))
