(struct gfx/context
  gfx-screen-width
  gfx-screen-height
  gfx-pixels
  gfx-apps)

(struct gfx/event
  (ev-type u16)
  (ev-x u16)
  (ev-y u16)
  (ev-state u16)
  (ev-input s32))

(def gfx/ev-state-shift    8)
(def gfx/ev-state-control 16)
(def gfx/ev-state-meta    32)
(def gfx/ev-state-c-x     64)

(def gfx/ev-button-1-press   -1)
(def gfx/ev-button-1-release -2)
(def gfx/ev-button-2-press   -3)
(def gfx/ev-button-2-release -4)
(def gfx/ev-button-3-press   -5)
(def gfx/ev-button-3-release -6)
(def gfx/ev-scroll-up        -7)
(def gfx/ev-scroll-down      -8)

(def gfx/ev-key-backspace  -9)
(def gfx/ev-key-tab       -10)
(def gfx/ev-key-return    -11)
(def gfx/ev-key-escape    -12)
(def gfx/ev-key-delete    -13)
(def gfx/ev-key-home      -14)
(def gfx/ev-key-left      -15)
(def gfx/ev-key-up        -16)
(def gfx/ev-key-right     -17)
(def gfx/ev-key-down      -18)
(def gfx/ev-key-page-up   -19)
(def gfx/ev-key-page-down -20)
(def gfx/ev-key-end       -21)
(def gfx/ev-key-begin     -22)

(struct gfx/command
  (cmd-op u32)
  (cmd-arg1 u32)
  (cmd-arg2 u32)
  (cmd-arg3 u32))

(fun (gfx/width)
  (gfx/gfx-screen-width (ctxt/gfx context)))

(fun (gfx/height)
  (gfx/gfx-screen-height (ctxt/gfx context)))

(fun (gfx/cmd op arg1 arg2 arg3)
  (mem cmd gfx/command)
  (set (gfx/cmd-op cmd) op)
  (set (gfx/cmd-arg1 cmd) arg1)
  (set (gfx/cmd-arg2 cmd) arg2)
  (set (gfx/cmd-arg3 cmd) arg3)
  (sys/write 4 cmd gfx/command))

(fun (gfx/show)
  (gfx/cmd 2))

(fun (gfx/read-event event)
  (sys/read 5 event gfx/event))

(fun (gfx/wait)
  (mem event gfx/event)
  (while (begin
           (gfx/read-event event)
           (!= (gfx/ev-type event) 1))))

(fun (gfx/resize w h)
  (var gfx (ctxt/gfx context))
  (if ((gfx/gfx-pixels gfx)
       (sys/munmap (gfx/gfx-pixels gfx) (* (gfx/width) (gfx/height) u32))))
  (set (gfx/gfx-screen-width (ctxt/gfx context)) w)
  (set (gfx/gfx-screen-height (ctxt/gfx context)) h)
  (var bytes (* w h u32))
  (if ((< (sys/ftruncate 3 bytes) 0)
       (sys/exit 12)))
  (set (gfx/gfx-pixels (ctxt/gfx context))
       (sys/mmap 0 bytes (+ sys/prot-read sys/prot-write) sys/map-shared 3 0))
  (gfx/cmd 1 w h))

(fun (gfx/init)
  (set (ctxt/gfx context) (mem/alloc gfx/context))
  (set (gfx/gfx-pixels (ctxt/gfx context)) 0)
  (set (gfx/gfx-apps (ctxt/gfx context)) 0)
  (mem event gfx/event)
  (while (begin
           (gfx/read-event event)
           (!= (gfx/ev-type event) 3)))
  (gfx/resize (gfx/ev-x event) (gfx/ev-y event)))

(fun (gfx/color r g b)
  (+ (* (+ (* r 256) g) 256) b))

(fun (gfx/rect x y w h c)
  (var gfx (ctxt/gfx context))
  (var pixels (+ (gfx/gfx-pixels gfx) (* (+ x (* y (gfx/width))) u32)))
  (var skip (* (- (gfx/width) w) u32))
  (var i)
  (var j)
  (set j 0)
  (while (< j h)
    (set i 0)
    (while (< i w)
      (set (u32 pixels) c)
      (set pixels (+ pixels u32))
      (set i (+ i 1)))
    (set pixels (+ pixels skip))
    (set j (+ j 1))))

(fun (gfx/invert-rect x y w h)
  (var gfx (ctxt/gfx context))
  (var pixels (+ (gfx/gfx-pixels gfx) (* (+ x (* y (gfx/width))) u32)))
  (var skip (* (- (gfx/width) w) u32))
  (var white (gfx/color 255 255 255))
  (var i)
  (var j)
  (set j 0)
  (while (< j h)
    (set i 0)
    (while (< i w)
      (set (u32 pixels) (- white (u32 pixels)))
      (set pixels (+ pixels u32))
      (set i (+ i 1)))
    (set pixels (+ pixels skip))
    (set j (+ j 1))))

(fun (gfx/tint-rect x y w h r g b)
  (var gfx (ctxt/gfx context))
  (var pixels (+ (gfx/gfx-pixels gfx) (* (+ x (* y (gfx/width))) u32)))
  (var skip (* (- (gfx/width) w) u32))
  (var i)
  (var j)
  (set j 0)
  (while (< j h)
    (set i 0)
    (while (< i w)
      (set (u32 pixels) (gfx/color (/ (* r (u8 pixels 2)) 255)
                                   (/ (* g (u8 pixels 1)) 255)
                                   (/ (* b (u8 pixels 0)) 255)))
      (set pixels (+ pixels u32))
      (set i (+ i 1)))
    (set pixels (+ pixels skip))
    (set j (+ j 1))))

(fun (gfx/copy-rect-up x1 y1 w h x2 y2)
  (var gfx (ctxt/gfx context))
  (var src (+ (gfx/gfx-pixels gfx) (* (+ x1 (* y1 (gfx/width))) u32)))
  (var dst (+ (gfx/gfx-pixels gfx) (* (+ x2 (* y2 (gfx/width))) u32)))
  (var skip (* (- (gfx/width) w) u32))
  (var i)
  (var j)
  (set j 0)
  (while (< j h)
    (set i 0)
    (while (< i w)
      (set (u32 dst) (u32 src))
      (set src (+ src u32))
      (set dst (+ dst u32))
      (set i (+ i 1)))
    (set src (+ src skip))
    (set dst (+ dst skip))
    (set j (+ j 1))))

(struct gfx/font
  (font-glyphs  u64)
  (font-ascent  s8)
  (font-descent s8))

(struct gfx/glyph-header
  (glyph-width    u8)
  (glyph-height   u8)
  (glyph-offset-x s8)
  (glyph-offset-y s8)
  (glyph-advance  s8)
  (glyph-unused-1 u8)
  (glyph-unused-2 u8)
  (glyph-unused-3 u8))

(fun (gfx/glyph font x y c)
  (var gfx (ctxt/gfx context))
  (var glyph 0)
  (if ((< c 128)
       (set glyph (u64 (gfx/font-glyphs font) c))))
  (if ((not glyph)
       (set glyph (u64 (gfx/font-glyphs font) 32))))
  (var w (gfx/glyph-width glyph))
  (var h (gfx/glyph-height glyph))
  (set x (+ x (gfx/glyph-offset-x glyph)))
  (set y (+ y (gfx/glyph-offset-y glyph)))
  (var src-p (+ glyph gfx/glyph-header))
  (var dst-p (+ (gfx/gfx-pixels gfx) (* (+ x (* y (gfx/width))) u32)))
  (var skip (* (- (gfx/width) w) u32))
  (var i)
  (var j)
  (set j 0)
  (while (< j h)
    (set i 0)
    (while (< i w)
      (set (u32 dst-p) (* (- 255 (u8 src-p)) 65793))
      (set src-p (+ src-p u8))
      (set dst-p (+ dst-p u32))
      (set i (+ i 1)))
    (set dst-p (+ dst-p skip))
    (set j (+ j 1)))
  (gfx/glyph-advance glyph))

(fun (gfx/put-pixel x y c)
  (var gfx (ctxt/gfx context))
  (set (u32 (gfx/gfx-pixels gfx) (+ (* y (gfx/width)) x)) c))

(fun (gfx/get-pixel x y)
  (var gfx (ctxt/gfx context))
  (u32 (gfx/gfx-pixels gfx) (+ (* y (gfx/width)) x)))

;; Event loop

(struct gfx/event-funtab
  efun-book
  efun-paint
  efun-input)

(fun (gfx/paint instance functions)
  ((gfx/efun-paint functions) instance 0 0 (gfx/width) (gfx/height))
  (gfx/show))

(struct gfx/app
  app-link
  app-name
  app-instance
  app-functions)

(fun (gfx/launch instance name functions)
  (var app (mem/alloc gfx/app))
  (set (gfx/app-instance app) instance)
  (set (gfx/app-name app) (str/dup name))
  (set (gfx/app-functions app) functions)
  (sys/funtab-ref functions)
  (set (gfx/app-link app) (gfx/gfx-apps (ctxt/gfx context)))
  (set (gfx/gfx-apps (ctxt/gfx context)) app))

(fun (gfx/quit instance)
  (var gfx (ctxt/gfx context))
  (var ptr (loc (gfx/gfx-apps gfx)))
  (while (u64 ptr)
    (var app (u64 ptr))
    (if ((== (gfx/app-instance app) instance)
         (set (u64 ptr) (gfx/app-link app))
         (sys/funtab-unref (gfx/app-functions app))
         (mem/free (gfx/app-name app))
         (mem/free app))
        (else
         (set ptr (loc (gfx/app-link app)))))))

(fun (gfx/next)
  (var gfx (ctxt/gfx context))
  (if ((and (var cur (gfx/gfx-apps gfx))
            (var next (gfx/app-link cur)))
       (set (gfx/gfx-apps gfx) next)
       (while (gfx/app-link next)
         (set next (gfx/app-link next)))
       (set (gfx/app-link next) cur)
       (set (gfx/app-link cur) 0))))

(fun (gfx/prev)
  (var gfx (ctxt/gfx context))
  (if ((and (var last (gfx/gfx-apps gfx))
            (var prev (gfx/gfx-apps gfx)))
       (while (gfx/app-link prev)
         (set last prev)
         (set prev (gfx/app-link prev)))
       (set (gfx/app-link last) 0)
       (set (gfx/app-link prev) (gfx/gfx-apps gfx))
       (set (gfx/gfx-apps gfx) prev))))

(fun (gfx/switch name)
  (var gfx (ctxt/gfx context))
  (var ptr (loc (gfx/gfx-apps gfx)))
  (var found 0)
  (while (u64 ptr)
    (var app (u64 ptr))
    (if ((== (str/cmp (gfx/app-name app) name) 0)
         (set (u64 ptr) (gfx/app-link app))
         (set (gfx/app-link app) (gfx/gfx-apps gfx))
         (set (gfx/gfx-apps gfx) app)
         (set found 1)
         (goto done))
        (else
         (set ptr (loc (gfx/app-link app))))))
  (label done)
  found)
  
(fun (gfx/loop)
  (var gfx (ctxt/gfx context))
  (var extra-state 0)
  (while (gfx/gfx-apps gfx)
    (var app (gfx/gfx-apps gfx))
    (gfx/paint (gfx/app-instance app) (gfx/app-functions app))
    (mem event gfx/event)
    (gfx/read-event event)
    (if ((== (gfx/ev-type event) 1)
         (sys/exit 0))
        ((== (gfx/ev-type event) 3)
         (gfx/resize (gfx/ev-x event) (gfx/ev-y event)))
        ((== (gfx/ev-type event) 2)
         (var state (bit-or (gfx/ev-state event) extra-state))
         (var input (gfx/ev-input event))
         (if ((and (== state gfx/ev-state-control) (== input ch/x))
              (set extra-state gfx/ev-state-c-x))
             (else
              (if ((and (== state gfx/ev-state-meta) (== input gfx/ev-key-page-down))
                   (gfx/next))
                  ((and (== state gfx/ev-state-meta) (== input gfx/ev-key-page-up))
                   (gfx/prev))
                  (else
                   ((gfx/efun-input (gfx/app-functions app))
                    (gfx/app-instance app)
                    state input
                    (gfx/ev-x event) (gfx/ev-y event))))
              (set extra-state 0)))))))
