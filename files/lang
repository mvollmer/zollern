;; A macro for defining primitives.
;;
;; We have to write this without any convenience helpers...
;;
;; (defprim NAME A)
;; =>
;; (0
;;   (1 ($nn form) ($prim-1 form A))
;;   (2 NAME 0 $nn))
;;
;; (defprim NAME A B)
;; =>
;; (0
;;   (1 ($nn form) ($prim-2 form A B))
;;   (2 NAME 0 $nn))

(1 (lang/$prim-1 form a)
  (exp/make-pair
   (exp/make-number a)
   (exp/rest form)))

(1 (lang/$prim-2 form a b)
  (exp/make-pair
   (exp/make-number a)
   (exp/make-pair
    (exp/make-number b)
    (exp/rest form))))

(1 (lang/$defprim form)
  (0
   (10 gensym) (11 gensym (exp/global (exp/gensym)))
   (10 name-cell) (11 name-cell (exp/rest form))
   (10 a-cell) (11 a-cell (exp/rest name-cell))
   (10 b-cell) (11 b-cell (exp/rest a-cell))
   (exp/make-pair
    (exp/make-number 0)
    (exp/make-pair
     (exp/make-pair
      (exp/make-number 1)
      (exp/make-pair
       (exp/make-pair
        gensym
        (exp/make-pair
         (exp/intern "form")
         0))
       (exp/make-pair
        (exp/make-pair
         (6 b-cell (exp/intern "$prim-2") (exp/intern "$prim-1"))
         (exp/make-pair
          (exp/intern "form")
          (exp/make-pair
           (exp/first a-cell)
           (6 b-cell
              (exp/make-pair
               (exp/first b-cell)
               0)
              0))))
        0)))
     (exp/make-pair
      (exp/make-pair
       (exp/make-number 2)
       (exp/make-pair
        (exp/first name-cell)
        (exp/make-pair
         (exp/make-number 0)
         (exp/make-pair
          gensym
          0)))
       0)
      0)))))
(2 lang/defprim 0 lang/$defprim)

;; Primitives
;;
;; Some primitives are okay for direct use, but some need to be
;; wrapped in nicer clothing, like 'fun' and 'var'.

(defprim lang/begin      0)
(defprim lang/prim-fun   1)
(defprim lang/prim-mac   2)
(defprim lang/data       3)
(defprim lang/label      4)
(defprim lang/goto       5)
(defprim lang/prim-if    6)
(defprim lang/prim-var  10)
(defprim lang/set       11)
(defprim lang/loc       12)
(defprim lang/prim-mem  15)

(defprim lang/prim-neg   7 0)
(defprim lang/bit-not    7 1)
(defprim lang/i->f       7 2)
(defprim lang/f->i       7 3)

(defprim lang/==         8 0)
(defprim lang/!=         8 1)
(defprim lang/<          8 2)
(defprim lang/<=         8 3)
(defprim lang/>          8 4)
(defprim lang/>=         8 5)
(defprim lang/%          8 6)
(defprim lang/f<         8 7)
(defprim lang/f<=        8 8)
(defprim lang/f>         8 9)
(defprim lang/f>=        8 10)

(defprim lang/+          9 0)
(defprim lang/prim-minus 9 1)
(defprim lang/*          9 2)
(defprim lang//          9 3)
(defprim lang/bit-and    9 4)
(defprim lang/bit-or     9 5)
(defprim lang/f+         9 6)
(defprim lang/f-         9 7)
(defprim lang/f*         9 8)
(defprim lang/f/         9 9)

(defprim lang/prim-u64  13 3)

;; Syntax templates, aka quasi-quote

(prim-fun (lang/$rcons* n tail)
  (begin
    (prim-var result)
    (prim-var next)
    (set result tail)
    (set next (+ (loc tail) 8))
    (label loop)
    (prim-if (== n 0)
             (goto done)
             12)
    (set result (exp/make-pair (prim-u64 next) result))
    (set next (+ next 8))
    (set n (prim-minus n 1))
    (goto loop)
    (label done)
    result))

(prim-fun (lang/is-meta form meta)
  (prim-if (== (exp/type form) 0)
           (prim-if (== (exp/first form) meta)
                    1
                    0)
           0))

(prim-fun (lang/expand-template form meta dot)
  (begin
    (prim-var tail)
    (prim-var result)
    (prim-var result-length)
    (prim-var first)
    (prim-var type)
    (prim-var arg)
    (set tail (exp/make-number 0))
    (set result 0)
    (set result-length 0)
    (label loop)
    (prim-if form
             (begin)
             (goto done))
    (set first (exp/first form))
    (set type (exp/type first))
    (set arg 0)
    (prim-if (== type 0) ;; pair
             (set arg (expand-template first meta dot))
             (begin))
    (prim-if (== type 1) ;; symbol
             (prim-if (== first meta)
                      (begin
                        (set arg (exp/first (exp/rest form)))
                        (prim-if (is-meta arg meta)
                                 ($rcons* 5 0
                                          (exp/make-pair
                                           (exp/intern "exp/intern")
                                           (exp/make-pair
                                            (exp/make-string "meta")
                                            0))
                                          (exp/make-pair
                                           (exp/intern "exp/first")
                                           (exp/make-pair
                                            (expand-template (exp/rest arg) meta dot)
                                            0))
                                          (exp/make-number 0)
                                          (exp/make-number 2)
                                          (exp/intern "$rcons*"))
                                 arg)
                        (goto out))
                      (prim-if (== first dot)
                               (begin
                                 (set tail (expand-template (exp/first (exp/rest form))
                                                            meta dot))
                                 (goto done))
                               ;; `(exp/intern ,(exp/make-string (exp/symbol-name first)))
                               (set arg (exp/make-pair
                                         (exp/intern "exp/intern")
                                         (exp/make-pair
                                          (exp/make-string (exp/symbol-name first))
                                          0)))))
             (begin))
    (prim-if (== type 2) ;; string
             (set arg (exp/make-pair
                       (exp/intern "exp/make-string")
                       (exp/make-pair
                        first
                        0)))
             (begin))
    (prim-if (== type 3) ;; number
             (set arg (exp/make-pair
                       (exp/intern "exp/make-number")
                       (exp/make-pair
                        first
                        0)))
             (begin))
    (prim-if arg
             (begin
               (set result (exp/make-pair arg result))
               (set result-length (+ result-length 1)))
             (begin))
    (set form (exp/rest form))
    (goto loop)
    (label done)
    (exp/make-pair
     (exp/intern "$rcons*")
     (exp/make-pair
      (exp/make-number result-length)
      (exp/make-pair
       tail
       result)))
    (label out)))

(prim-fun (lang/$syntax-expand form)
  (expand-template (exp/first (exp/rest form))
                   (exp/intern "meta") (exp/intern ".")))
(prim-mac lang/syntax-expand 0 lang/$syntax-expand)

;; Simple destructuring

;; (parse-exp PTR VAR)
;; =>
;; (begin
;;   (prim-var VAR)
;;   (set VAR (exp/first PTR))
;;   (set PTR (exp/rest PTR)))

;; (parse-opt PTR VAR DEF)
;; =>
;; (begin
;;   (prim-var VAR)
;;   (prim-if PTR
;;     (begin
;;       (set VAR (exp/first PTR)
;;       (set PTR (exp/rest PTR)))
;;     (set VAR (syntax-expand DEF)))

;; (parse-eol PTR)
;; =>
;; (prim-if PTR
;;   (begin)
;;   (exp/syntax))

;; (parse-rst PTR VAR)
;; =>
;; (begin
;;   (prim-var VAR)
;;   (set VAR PTR))

(prim-fun (lang/$parse-exp form)
  (begin
    (prim-var ptr-sym) (set ptr-sym (exp/first (exp/rest form)))
    (prim-var var-sym) (set var-sym (exp/first (exp/rest (exp/rest form))))
    (prim-if (exp/rest (exp/rest (exp/rest form))) (exp/syntax) (begin))
    (syntax-expand (begin (prim-var ?var-sym)
                     (set ?var-sym (exp/first ?ptr-sym))
                     (set ?ptr-sym (exp/rest ?ptr-sym))))))
(prim-mac lang/parse-exp 0 lang/$parse-exp)

(prim-fun (lang/$parse-opt form)
  (begin
    (parse-exp form _)
    (parse-exp form ptr-sym)
    (parse-exp form var-sym)
    (prim-var def-exp)
    (prim-if form
             (begin
               (set def-exp (syntax-expand (syntax-expand ?(exp/first form))))
               (set form (exp/rest form)))
             (begin
               (set def-exp (exp/make-number 0))))
    (prim-if form (exp/syntax) (begin))
    (syntax-expand (begin
                     (prim-var ?var-sym)
                     (prim-if ?ptr-sym
                              (begin
                                (set ?var-sym (exp/first ?ptr-sym))
                                (set ?ptr-sym (exp/rest ?ptr-sym)))
                              (begin
                                (set ?var-sym ?def-exp)))))))
(prim-mac lang/parse-opt 0 lang/$parse-opt)

(prim-fun (lang/$parse-eol form)
  (begin
    (parse-exp form _)
    (parse-exp form ptr-sym)
    (prim-if form (exp/syntax) (begin))
    (syntax-expand (prim-if ?ptr-sym (exp/syntax) (begin)))))
(prim-mac lang/parse-eol 0 lang/$parse-eol)

(prim-fun (lang/$parse-rst form)
  (begin
    (parse-exp form _)
    (parse-exp form ptr-sym)
    (parse-exp form var-sym)
    (parse-eol form)
    (syntax-expand (begin
                     (prim-var ?var-sym)
                     (set ?var-sym ?ptr-sym)))))
(prim-mac lang/parse-rst 0 lang/$parse-rst)

;; (syntax-parse PTR PATTERN)

(prim-fun (lang/$syntax-parse form)
  (begin
    (prim-var result)
    (prim-var first)
    (prim-var tmp)
    (prim-var underscore)
    (prim-var dot)
    (prim-var meta)
    (parse-exp form _)
    (parse-exp form ptr)
    (parse-exp form pattern)
    (parse-eol form)
    (set result 0)
    (set underscore (exp/intern "_"))
    (set dot (exp/intern "."))
    (set meta (exp/intern "meta"))
    (label loop)
    (prim-if pattern
             (begin)
             (goto done))
    (set first (exp/first pattern))
    (prim-if (== first underscore)
             (set result (exp/make-pair
                          (syntax-expand (set ?ptr (exp/rest ?ptr)))
                          result))
             (prim-if (== first dot)
                      (begin
                        (set tmp (exp/first (exp/rest pattern))) ; (meta var)
                        (set result (exp/make-pair
                                     (syntax-expand (parse-rst ?ptr ?(exp/first (exp/rest tmp))))
                                     result))
                        (goto done-no-eol-check))
                      (prim-if (== (exp/type first) 0)
                               (prim-if (== (exp/first first) meta)
                                        (begin
                                          (set tmp (exp/first (exp/rest first)))
                                          (prim-if (== (exp/type tmp) 0)
                                                   (begin
                                                     (set result (exp/make-pair
                                                                  (syntax-expand
                                                                   (parse-opt ?ptr . ?tmp))
                                                                  result)))
                                                   (set result (exp/make-pair
                                                                (syntax-expand (parse-exp ?ptr ?tmp))
                                                                result))))
                                        (begin
                                          (set tmp (exp/gensym))
                                          (set result (exp/make-pair
                                                       (syntax-expand (begin
                                                                        (parse-exp ?ptr ?tmp)
                                                                        (syntax-parse ?tmp ?first)))
                                                       result))))
                               (exp/syntax))))
    (set pattern (exp/rest pattern))
    (goto loop)
    (label done)
    (set result (exp/make-pair (syntax-expand (parse-eol ?ptr))
                               result))
    (label done-no-eol-check)
    (syntax-expand (begin . ?(exp/reverse result)))))

(prim-mac lang/syntax-parse 0 lang/$syntax-parse)

;; (def (NAME . ARGS) EXP)
;; =>
;; (begin
;;   (prim-fun ($$ form)
;;     (begin
;;       (syntax-parse form (_ . ARGS))
;;       (syntax-expand EXP)))
;;   (prim-mac NAME 0 $$))
;;
;; (def NAME EXO)
;; =>
;; (begin
;;   (prim-fun ($$ form)
;;     (syntax-expand EXP))
;;   (prim-mac NAME 1 $$))

(prim-fun (lang/$def form)
  (begin
    (prim-var $name)
    (prim-var $arg)
    (set $name (exp/global (exp/gensym)))
    (set $arg (exp/gensym))
    (syntax-parse form (_ ?head ?exp))
    (prim-if (== (exp/type head) 1)
             (begin
               (syntax-expand
                (begin
                  (prim-fun (?$name ?$arg)
                            (syntax-expand (begin ?exp)))
                  (prim-mac ?head 1 ?$name))))
             (begin
               (syntax-parse head (?name . ?args))
               (syntax-expand
                (begin
                  (prim-fun (?$name ?$arg)
                            (begin
                              (syntax-parse ?$arg (_ . ?args))
                              (syntax-expand ?exp)))
                  (prim-mac ?name 0 ?$name)))))))

(prim-mac lang/def 0 lang/$def)

;; Enhanced versions of some primitives

;; (if (COND1 . THEN1) (COND2 . THEN2) ... (ELSE . REST))

(def (lang/if . ?form)
  ?(prim-if form
            (begin
              (syntax-parse form ((?cond . ?then) . ?rest))
              (syntax-expand (prim-if ?cond (begin . ?then) (lang/if* . ?rest))))
            (syntax-expand (begin))))

(def lang/else 1)

(def (lang/if* . ?rest) (if . ?rest))

;; (var NAME)
;; =>
;; (prim-var NAME)
;;
;; (var NAME INIT)
;; =>
;; (begin
;;  (prim-var NAME)
;;  (set NAME INIT))

(def (lang/var ?name ?(init))
  (begin (prim-var ?name)
    ?(if (init
          (syntax-expand (set ?name ?init)))
         (else
          (syntax-expand (begin))))))

;; (fun HEAD . BODY)
;; =>
;; (prim-fun HEAD (begin . BODY))

(def (lang/fun ?head . ?body)
  (prim-fun ?head (begin . ?body)))

(def (lang/while ?cond . ?body)
  ?(begin
     (var loop (exp/gensym))
     (var test (exp/gensym))
     (syntax-expand
      (begin
        (goto ?test)
        (label ?loop)
        (begin . ?body)
        (label ?test)
        (if (?cond (goto ?loop)))))))

;; Setters

(def (lang/defset ?head ?val ?exp)
  ?(begin
     (var $name (exp/global (exp/gensym)))
     (if ((== (exp/type head) 1)
          (syntax-expand
           (begin
             (fun (?$name form ?val) (syntax-expand ?exp))
             (prim-mac ?head 3 ?$name))))
         (else
          (syntax-parse head (?name . ?args))
          (syntax-expand
           (begin
             (fun (?$name form ?val)
                  (syntax-parse form (_ . ?args))
                  (syntax-expand ?exp))
             (prim-mac ?name 2 ?$name)))))))

;; Memory access

(fun (lang/sizeof sym)
  (if ((== sym (exp/intern "u64")) 8)
      ((== sym (exp/intern "u32")) 4)
      ((== sym (exp/intern "u16")) 2)
      ((== sym (exp/intern "u8"))  1)
      ((== sym (exp/intern "s64")) 8)
      ((== sym (exp/intern "s32")) 4)
      ((== sym (exp/intern "s16")) 2)
      ((== sym (exp/intern "s8"))  1)
      (else
       (exp/syntax))))

(def (lang/defprim-accessor ?name ?size ?a)
  (begin
    (def ?name ?size)
    (def (?name ??ptr ??(idx))
         ??(if (idx
                ?(if ((== (exp/number-value size) 1)
                      (syntax-expand (syntax-expand (13 ?a (+ ??ptr ??idx)))))
                     (else
                      (syntax-expand (syntax-expand (13 ?a (+ ??ptr (* ??idx ?size))))))))
               (else
                (syntax-expand (13 ?a ??ptr)))))
    (defset (?name ??ptr ??(idx)) val
            ??(if (idx
                   (syntax-expand (14 ?a (+ ??ptr (* ??idx ?size)) ??val)))
                  (else
                   (syntax-expand (14 ?a ??ptr ??val)))))))

(defprim-accessor lang/u8  1 0)
(defprim-accessor lang/u16 2 1)
(defprim-accessor lang/u32 4 2)
(defprim-accessor lang/u64 8 3)

(defprim-accessor lang/s8  1 4)
(defprim-accessor lang/s16 2 5)
(defprim-accessor lang/s32 4 6)
(defprim-accessor lang/s64 8 7)


;; Arithmetic

(def (lang/- ?a . ?rest)
  ?(if (rest
        (syntax-expand (prim-minus ?a . ?rest)))
       (else
        (syntax-expand (prim-neg ?a)))))

;; Logical operators

(def (lang/and ?a . ?rest)
  ?(if (rest
        (syntax-expand
         (if (?a (and . ?rest)) (else 0))))
       (else
        a)))

(def (lang/or ?a . ?rest)
  ?(if (rest
        (var tmp (exp/gensym))
        (syntax-expand
         (if ((var ?tmp ?a) ?tmp) (else (or . ?rest)))))
       (else
        a)))

(def (lang/not ?a)
  (if (?a 0) (else 1)))

;; Compile-time expressions

(fun (lang/is-prim form a)
  (and (== (exp/type form) 0)
       (== (exp/type (exp/first form)) 3)
       (== (exp/number-value (exp/first form)) a)))

(fun (lang/const-expr form)
  (set form (exp/expand form))
  (if ((== (exp/type form) 3)
       (exp/number-value form))
      ((is-prim form 0)
       (const-expr (exp/first (exp/rest form))))
      ((is-prim form 9)
       (var op (exp/number-value (exp/first (exp/rest form))))
       (var args (exp/rest (exp/rest form)))
       (var res (const-expr (exp/first args)))
       (set args (exp/rest args))
       (while args
         (var arg (const-expr (exp/first args)))
         (set args (exp/rest args))
         (if ((== op 0)
              (set res (+ res arg)))
             ((== op 1)
              (set res (- res arg)))
             ((== op 2)
              (set res (* res arg)))
             ((== op 3)
              (set res (/ res arg)))
             (else
              (exp/syntax))))
       res)
      (else
       (exp/syntax))))

(def (lang/defconst ?name ?val)
  (def ?name ?(exp/make-number (const-expr val))))

;; Stack memory

(def (lang/mem ?name ?size)
  (prim-mem ?name ?(exp/make-number (const-expr size))))

;; Context

(def lang/context (16))
(defset lang/context val (17 ?val))

;; Structs

(def (lang/struct ?name . ?fields)
  (begin .
    ?(begin
       (var defs 0)
       (var offset 0)
       (var field)
       (var field-name)
       (var field-accessor)
       (var field-array-spec)
       (var field-element-size)
       (var field-size)
       (var field-loc)
       (while fields
         (set field (exp/first fields))
         (if ((== (exp/type field) 1)
              (set field-name field)
              (set field-accessor (exp/intern "u64"))
              (set field-array-spec 0))
             ((== (exp/type field) 0)
              (set field-name (exp/first field))
              (set field-accessor (exp/first (exp/rest field)))
              (set field-array-spec (exp/rest (exp/rest field))))
             (else
              (exp/syntax)))
         (set field-element-size (lang/sizeof field-accessor))
         (if (field-array-spec
              (set field-size (* field-element-size (const-expr (exp/first field-array-spec)))))
             (else
              (set field-size field-element-size)))
         (set field-name (exp/global field-name))
         (set field-loc (exp/make-number offset))
         (set defs
              (exp/make-pair
               (if (field-array-spec
                    (syntax-expand
                     (begin
                       (def (?field-name ??ptr ??(idx))
                            ??(if (idx
                                   (syntax-expand (?field-accessor (+ ??ptr ?field-loc) ??idx)))
                                  (else
                                   (syntax-expand (+ ??ptr ?field-loc)))))
                       (defset (?field-name ??ptr ??idx) val
                               (set (?field-accessor (+ ??ptr ?field-loc) ??idx) ??val)))))
                   (else
                    (syntax-expand
                     (begin
                       (def (?field-name ??ptr) (?field-accessor (+ ??ptr ?field-loc)))
                       (defset (?field-name ??ptr) val (set (?field-accessor (+ ??ptr ?field-loc)) ??val))))))
               defs))
         (set offset (+ offset field-size))
         (set fields (exp/rest fields)))
       (set defs (exp/make-pair
                  (syntax-expand (def ?name ?(exp/make-number offset)))
                  defs))
       defs)))

;; Enums

(def (lang/enum . ?members)
  (begin .
    ?(begin
       (var defs 0)
       (var value 0)
       (while members
         (var name (exp/global (exp/first members)))
         (set defs (exp/make-pair
                    (syntax-expand (def ?name ?(exp/make-number value)))
                    defs))
         (set members (exp/rest members))
         (set value (+ value 1)))
       defs)))
