(struct shell/instance
  quit
  cur
  cur-name
  max
  output
  output-ptr)

(fun (shell/paint-string x y str)
  (var ox x)
  (while (and (u8 str)
              (< x (- (gfx/width) 14))
              (< y (- (gfx/height) 16)))
    (if ((== (u8 str) ch/nl)
         (set x ox)
         (set y (+ y 16)))
        (else
         (set x (+ x (gfx/glyph x y (u8 str))))))
    (set str (+ str 1))))

(fun (shell/paint-node inst index node)
  (var y (+ 28 (* 16 index)))
  (shell/paint-string 24 y node)
  (if ((>= (shell/cur inst) 0)
       (if ((== index (shell/cur inst))
            (gfx/invert-rect 20 y 200 16)
            (str/cpy (shell/cur-name inst) node))))
      ((str/eq (shell/cur-name inst) node)
       (set (shell/cur inst) index)
       (gfx/invert-rect 20 y 200 16))))

(fun (shell/insert-node node nodes)
  (var i 0)
  (var tmp)
  (while (and (u64 nodes i)
              (> (str/cmp (u64 nodes i) node) 0))
    (set i (+ i 1)))
  (while (u64 nodes i)
    (set tmp (u64 nodes i))
    (set (u64 nodes i) node)
    (set node tmp)
    (set i (+ i 1)))
  (set (u64 nodes i) node)
  (set (u64 nodes (+ i 1)) 0))

(fun (shell/paint inst)
  (mem nodes (* 128 u64))
  (set (u64 nodes 0) 0)
  (fs/list shell/insert-node nodes)
  (gfx/rect 0 0 (gfx/width) (gfx/height) (gfx/color 255 255 255))
  (shell/paint-string 4 4 "Welcome to Zollern")
  (var i 0)
  (while (u64 nodes i)
    (shell/paint-node inst i (u64 nodes i))
    (set i (+ i 1)))
  (set (shell/max inst) i)
  (var y (+ 28 (* 16 i)))
  (shell/paint-string 24 y "________________")
  (if ((== (shell/cur inst) (shell/max inst))
       (str/cpy (shell/cur-name inst) "")
       (gfx/invert-rect 20 y 200 16)))
  (shell/paint-string 24 (+ y 40) (shell/output inst))
  (gfx/show))

(fun (shell/capture-output str inst)
  (str/cpy (shell/output-ptr inst) str)
  (set (shell/output-ptr inst) (+ (shell/output-ptr inst) (str/len str))))

(fun (shell/run inst)
  (set (shell/output-ptr inst) (shell/output inst))
  (if ((and (u8 (shell/cur-name inst))
            (var book (sys/book-get (shell/cur-name inst) shell/capture-output inst)))
       (if ((var main (sys/book-search-fun book "main"))
            (main))
           (else
            (shell/capture-output "no main function\n" inst)))
       (sys/book-unref book))))

(fun (shell/layout-for-create ed inst)
  (var x 24)
  (var y (+ 28 (* 16 (shell/max inst))))
  (shell/paint inst)
  (gfx/rect 20 y 200 16 (gfx/color 255 255 255))
  (ed/resize ed 24 y (+ x 200) (+ y 20)))

(fun (shell/create inst)
  (mem name ed/textbuf)
  (ed/textbuf-init name)
  (ed/ed name 1 shell/layout-for-create inst)
  (var str (ed/textbuf-maybe-as-string name))
  (if ((and str (u8 str))
       (mem wbuf fs/wbuf)
       (fs/create wbuf)
       (fs/commit wbuf str)
       (set (shell/cur inst) -1)
       (str/cpy (shell/cur-name inst) str)))
  (ed/textbuf-fini name))

(fun (shell/layout-fullscreen ed inst)
  (ed/resize ed 4 4 (- (gfx/width) 4) (- (gfx/height) 4)))

(fun (shell/ed inst)
  (label again)
  (mem edbuf ed/textbuf)
  (mem rbuf fs/rbuf)
  (mem wbuf fs/wbuf)
  (ed/textbuf-init edbuf)
  (if ((fs/open rbuf (shell/cur-name inst))
       (ed/textbuf-read-file edbuf rbuf)
       (fs/close rbuf)
       (var exit-mode (ed/ed edbuf 0 shell/layout-fullscreen inst))
       (fs/create wbuf)
       (ed/textbuf-write-file edbuf wbuf)
       (fs/commit wbuf (shell/cur-name inst))
       (ed/textbuf-fini edbuf)
       (set (shell/cur inst) -1)
       (if ((== exit-mode 2)
            (shell/run inst)
            (con/out "RET")
            (mem line ed/textbuf)
            (ed/textbuf-init line)
            (con/in line)
            (ed/textbuf-fini line)
            (con/out "\n")
            (goto again))))))

(fun (shell/remove inst)
  (if ((u8 (shell/cur-name inst))
       (fs/remove (shell/cur-name inst))
       (set (u8 (shell/cur-name inst)) 0))))

(fun (shell/help inst)
  (set (shell/output-ptr inst) (shell/output inst))
  (shell/capture-output "RET - edit\n  r - run\n  X - delete\n  q - reset\n  Q - halt" inst))

(fun (shell/input inst)
  (mem event gfx/event)
  (gfx/read-event event)
  (if ((== (gfx/ev-type event) 1)
       (sys/call 60 0))
      ((== (gfx/ev-type event) 3)
       (gfx/resize (gfx/ev-x event) (gfx/ev-y event))
       (shell/paint inst))
      ((== (gfx/ev-type event) 2)
       (var input (gfx/ev-input event))
       (var state (gfx/ev-state event))
       (if ((== input ch/q)
            (set (shell/quit inst) 1))
           ((== input -16)
            (if ((> (shell/cur inst) 0)
                 (set (shell/cur inst) (- (shell/cur inst) 1)))))
           ((== input -18)
            (if ((< (shell/cur inst) (shell/max inst))
                 (set (shell/cur inst) (+ (shell/cur inst) 1)))))
           ((== input -11)
            (if ((u8 (shell/cur-name inst))
                 (shell/ed inst))
                (else
                 (shell/create inst))))
           ((== input ch/r)
            (shell/run inst))
           ((== input ch/X)
            (shell/remove inst))
           ((== input ch/Q)
            (sys/call 60 0))
           ((== input ch/h)
            (shell/help inst))))))

(fun (shell/main)
  (var inst (sys/page-get))
  (set (shell/cur inst) 0)
  (set (shell/quit inst) 0)
  (set (shell/cur-name inst) (+ inst shell/instance))
  (set (u8 (shell/cur-name inst)) 0)
  (set (shell/output inst) (+ inst shell/instance 512))
  (set (u8 (shell/output inst)) 0)
  (while (not (shell/quit inst))
    (shell/paint inst)
    (shell/input inst))
  (sys/page-put inst))
