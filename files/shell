(struct shell/instance
  cur
  cur-name
  max
  output
  output-ptr
  create-textbuf
  create-ed)

(fun (shell/capture-output str inst)
  (str/cpy (shell/output-ptr inst) str)
  (set (shell/output-ptr inst) (+ (shell/output-ptr inst) (str/len str))))

(fun (shell/run inst)
  (if ((and (u8 (shell/cur-name inst))
            (not (gfx/switch (shell/cur-name inst) "main")))
       (gfx/launch-book (shell/cur-name inst)))))

(fun (shell/rerun inst)
  (if ((u8 (shell/cur-name inst))
       (gfx/launch-book (shell/cur-name inst)))))

(fun (shell/start-create inst)
  (var name (ed/textbuf-new))
  (var ed (ed/new 0 name))
  (set (shell/create-textbuf inst) name)
  (set (shell/create-ed inst) ed))

(fun (shell/end-create inst)
  (var name (shell/create-textbuf inst))
  (var ed (shell/create-ed inst))
  (ed/free ed)
  (set (shell/create-ed inst) 0)
  (var str (ed/textbuf-maybe-as-string name))
  (if ((and str (u8 str))
       (mem wbuf fs/wbuf)
       (fs/create wbuf)
       (fs/commit wbuf str)
       (set (shell/cur inst) -1)
       (str/cpy (shell/cur-name inst) str)))
  (ed/textbuf-free name)
  (set (shell/create-textbuf inst) 0))

(struct shell/ed-data
  ed-name
  ed-text
  ed-ed)

(fun (shell/ed-write inst)
  (mem wbuf fs/wbuf)
  (fs/create wbuf)
  (ed/textbuf-write-file (shell/ed-text inst) wbuf)
  (fs/commit wbuf (shell/ed-name inst))
  (set (ed/dirty (shell/ed-ed inst)) 0))

(fun (shell/ed-run inst)
  (gfx/launch-book (shell/ed-name inst)))

(fun (shell/ed-quit inst)
  (gfx/quit inst)
  (ed/free (shell/ed-ed inst))
  (ed/textbuf-free (shell/ed-text inst))
  (mem/free (shell/ed-name inst))
  (mem/free inst))

(fun (shell/ed-paint inst x y w h)
  (ed/paint-with-border (shell/ed-ed inst) x y w h))

(fun (shell/ed-input inst state input)
  (set (ed/title (shell/ed-ed inst)) (shell/ed-name inst))
  (if ((and (== state gfx/ev-state-c-x) (== input ch/s))
       (if ((ed/dirty (shell/ed-ed inst))
            (shell/ed-write inst))))
      ((and (== state gfx/ev-state-c-x) (== input ch/q))
       (if ((ed/dirty (shell/ed-ed inst))
            (shell/ed-write inst)))
       (shell/ed-quit inst))
      ((and (== state gfx/ev-state-c-x) (== input ch/r))
       (shell/ed-write inst)
       (shell/ed-run inst))
      (else
       (ed/input (shell/ed-ed inst) state input))))

(book/funtab shell/ed-efuns
  shell/ed-paint
  shell/ed-input)

(fun (shell/launch-ed name)
  (mem rbuf fs/rbuf)
  (if ((gfx/switch name "ed")
       (begin))
      ((fs/open rbuf name)
       (var ed-inst (mem/alloc shell/ed-data))
       (set (shell/ed-name ed-inst) (str/dup name))
       (set (shell/ed-text ed-inst) (ed/textbuf-new))
       (set (shell/ed-ed ed-inst) (ed/new (shell/ed-name ed-inst) (shell/ed-text ed-inst)))
       (ed/textbuf-read-file (shell/ed-text ed-inst) rbuf)
       (ed/highlight (shell/ed-ed ed-inst))
       (gfx/launch ed-inst name "ed" shell/ed-efuns))))

(fun (shell/save name)
  (var app (gfx/find name "ed"))
  (if (app
       (shell/ed-write (gfx/app-instance app)))))

(fun (shell/remove inst)
  (if ((u8 (shell/cur-name inst))
       (fs/remove (shell/cur-name inst))
       (set (u8 (shell/cur-name inst)) 0))))

(fun (shell/help inst)
  (set (shell/output-ptr inst) (shell/output inst))
  (shell/capture-output "  RET - edit\n    r - run\n    X - delete\n\nC-x q - quit" inst))

(fun (shell/quit inst)
  (gfx/quit inst)
  (mem/free (shell/output inst))
  (mem/free (shell/cur-name inst))
  (mem/free inst))

(fun (shell/compute-flags node buf)
  (var name (fs/node-name node))
  (var app (gfx/find name "main"))
  (var ed-app (gfx/find name "ed"))
  (var bk (book/find name))
  (set (u8 buf 0) (if ((and ed-app
                            (ed/dirty (shell/ed-ed (gfx/app-instance ed-app))))
                       ch/*)
                      (else ch/spc)))
  (set (u8 buf 1) (if ((and bk (book/is-out-of-date bk))
                       ch/@)
                      (else ch/spc)))
  (set (u8 buf 2) (if ((and app bk
                            (!= (gfx/efun-book (gfx/app-functions app)) bk))
                       ch/#)
                      (else ch/spc)))
  (set (u8 buf 3) 0))

(fun (shell/draw-node inst index node)
  (mem flags 10)
  (shell/compute-flags node flags)
  (var x (gfx/get-x))
  (gfx/draw-string flags)
  (gfx/advance-to (+ x 25))
  (if ((>= (shell/cur inst) 0)
       (if ((== index (shell/cur inst))
            (gfx/set-inverse 1)
            (str/cpy (shell/cur-name inst) node))))
      ((str/eq (shell/cur-name inst) node)
       (set (shell/cur inst) index)
       (gfx/set-inverse 1)))
  (gfx/advance-to (+ x 30))
  (gfx/draw-string (fs/node-name node))
  (gfx/advance-to (+ x 200))
  (gfx/set-inverse 0)
  (gfx/newline))

(fun (shell/insert-node node nodes)
  (var i 0)
  (var tmp)
  (while (and (u64 nodes i)
              (> (str/cmp (fs/node-name (u64 nodes i)) (fs/node-name node)) 0))
    (set i (+ i 1)))
  (while (u64 nodes i)
    (set tmp (u64 nodes i))
    (set (u64 nodes i) node)
    (set node tmp)
    (set i (+ i 1)))
  (set (u64 nodes i) node)
  (set (u64 nodes (+ i 1)) 0))

(fun (shell/paint inst x y w h)
  (mem nodes (* 128 u64))
  (set (u64 nodes 0) 0)
  (book/reset-out-of-date)
  (fs/list shell/insert-node nodes)
  (gfx/draw-init x y w h)
  (gfx/set-font fonts/sans-l)
  (gfx/set-x (+ x 4))
  (gfx/draw-string "Welcome to Zollern\n")
  (gfx/set-x (+ x 20))
  (gfx/mark-left)
  (gfx/set-font fonts/sans)
  (gfx/newline)
  (var i 0)
  (while (u64 nodes i)
    (shell/draw-node inst i (u64 nodes i))
    (set i (+ i 1)))
  (set (shell/max inst) i)
  (if ((shell/create-ed inst)
       (ed/paint (shell/create-ed inst) (+ (gfx/get-left) 30) (gfx/get-y) 200 (gfx/get-line-height)))
      (else
       (var xx (gfx/get-x))
       (gfx/advance-to (+ xx 25))
       (if ((== (shell/cur inst) (shell/max inst))
            (str/cpy (shell/cur-name inst) "")
            (gfx/set-inverse 1)))
       (gfx/advance-to (+ xx 30))
       (gfx/draw-string "________________")
       (gfx/advance-to (+ xx 200))
       (gfx/set-inverse 0)))
  (gfx/newline)
  (gfx/set-font fonts/mono)
  (gfx/newline)
  (gfx/draw-string (shell/output inst)))

(fun (shell/input inst state input)
  (var ed (shell/create-ed inst))
  (if ((== state 0)
       (if ((== input gfx/ev-key-return)
            (if (ed
                 (shell/end-create inst))
                ((u8 (shell/cur-name inst))
                 (shell/run inst))
                (else
                 (shell/start-create inst))))
           (ed
            (ed/input ed state input))
           ((== input gfx/ev-key-up)
            (if ((> (shell/cur inst) 0)
                 (set (shell/cur inst) (- (shell/cur inst) 1)))))
           ((== input gfx/ev-key-down)
            (if ((< (shell/cur inst) (shell/max inst))
                 (set (shell/cur inst) (+ (shell/cur inst) 1)))))
           ((== input ch/e)
            (if ((shell/cur-name inst)
                 (shell/launch-ed (shell/cur-name  inst)))))
           ((== input ch/s)
            (if ((shell/cur-name inst)
                 (shell/save (shell/cur-name  inst)))))
           ((== input ch/r)
            (shell/rerun inst))
           ((== input ch/X)
            (shell/remove inst))
           ((== input ch/h)
            (shell/help inst))))
      ((and (== state gfx/ev-state-c-x) (== input ch/q))
       (shell/quit inst))))

(book/funtab shell/efuns
  shell/paint
  shell/input)

(fun (shell/main)
  (var inst (mem/alloc shell/instance))
  (set (shell/cur inst) 0)
  (set (shell/cur-name inst) (mem/alloc 512))
  (set (u8 (shell/cur-name inst)) 0)
  (set (shell/output inst) (mem/alloc 2048))
  (set (u8 (shell/output inst)) 0)
  (set (shell/create-textbuf inst) 0)
  (set (shell/create-ed inst) 0)
  (gfx/launch inst "shell" "main" shell/efuns))
