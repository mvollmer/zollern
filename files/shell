(struct shell/instance
  quit
  cur
  cur-name
  max
  output
  output-ptr
  create-textbuf
  create-ed)

(fun (shell/paint-string font x y str)
  (var ox x)
  (while (and (u8 str)
              (< x (- (gfx/width) 14))
              (< y (- (gfx/height) 16)))
    (if ((== (u8 str) ch/nl)
         (set x ox)
         (set y (+ y 16)))
        (else
         (set x (+ x (gfx/glyph font x y (u8 str))))))
    (set str (+ str 1))))

(fun (shell/paint-node inst x y index node)
  (set y (+ y 32 (* 16 index)))
  (shell/paint-string fonts/sans (+ x 24) y (fs/node-name node))
  (if ((>= (shell/cur inst) 0)
       (if ((== index (shell/cur inst))
            (gfx/invert-rect (+ x 20) y 200 16)
            (str/cpy (shell/cur-name inst) node))))
      ((str/eq (shell/cur-name inst) node)
       (set (shell/cur inst) index)
       (gfx/invert-rect (+ x 20) y 200 16))))

(fun (shell/insert-node node nodes)
  (var i 0)
  (var tmp)
  (while (and (u64 nodes i)
              (> (str/cmp (fs/node-name (u64 nodes i)) (fs/node-name node)) 0))
    (set i (+ i 1)))
  (while (u64 nodes i)
    (set tmp (u64 nodes i))
    (set (u64 nodes i) node)
    (set node tmp)
    (set i (+ i 1)))
  (set (u64 nodes i) node)
  (set (u64 nodes (+ i 1)) 0))

(fun (shell/paint inst x y w h)
  (mem nodes (* 128 u64))
  (set (u64 nodes 0) 0)
  (fs/list shell/insert-node nodes)
  (gfx/rect x y w h (gfx/color 255 255 255))
  (shell/paint-string fonts/sans-l (+ x 4) (+ y 4) "Welcome to Zollern")
  (var i 0)
  (while (u64 nodes i)
    (shell/paint-node inst x y i (u64 nodes i))
    (set i (+ i 1)))
  (set (shell/max inst) i)
  (set y (+ y 32 (* 16 i)))
  (if ((shell/create-ed inst)
       (ed/paint (shell/create-ed inst) (+ x 24) y 200 20))
      (else
       (shell/paint-string fonts/mono (+ x 24) y "________________")
       (if ((== (shell/cur inst) (shell/max inst))
            (str/cpy (shell/cur-name inst) "")
            (gfx/invert-rect (+ x 20) y 200 16)))))
  (shell/paint-string fonts/mono (+ x 24) (+ y 56) (shell/output inst)))

(fun (shell/capture-output str inst)
  (str/cpy (shell/output-ptr inst) str)
  (set (shell/output-ptr inst) (+ (shell/output-ptr inst) (str/len str))))

(fun (shell/run inst)
  (set (shell/output-ptr inst) (shell/output inst))
  (if ((and (u8 (shell/cur-name inst))
            (var book (sys/book-get (shell/cur-name inst) shell/capture-output inst)))
       (if ((var main (sys/book-search-fun book "main"))
            (main))
           (else
            (shell/capture-output "no main function\n" inst)))
       (sys/book-unref book))))

(fun (shell/start-create inst)
  (var name (sys/page-get))
  (ed/textbuf-init name)
  (var ed (ed/new 0 name 1))
  (set (shell/create-textbuf inst) name)
  (set (shell/create-ed inst) ed))

(fun (shell/end-create inst)
  (var name (shell/create-textbuf inst))
  (var ed (shell/create-ed inst))
  (set (ed/textbuf-len name) (ed/len ed)) ; XXX
  (ed/free ed)
  (set (shell/create-ed inst) 0)
  (var str (ed/textbuf-maybe-as-string name))
  (if ((and str (u8 str))
       (mem wbuf fs/wbuf)
       (fs/create wbuf)
       (fs/commit wbuf str)
       (set (shell/cur inst) -1)
       (str/cpy (shell/cur-name inst) str)))
  (ed/textbuf-fini name)
  (sys/page-put name)
  (set (shell/create-textbuf inst) 0))

(fun (shell/ed inst)
  (label again)
  (mem edbuf ed/textbuf)
  (mem rbuf fs/rbuf)
  (mem wbuf fs/wbuf)
  (ed/textbuf-init edbuf)
  (if ((fs/open rbuf (shell/cur-name inst))
       (ed/textbuf-read-file edbuf rbuf)
       (fs/close rbuf)
       (var exit-mode (ed/ed (shell/cur-name inst) edbuf 0))
       (fs/create wbuf)
       (ed/textbuf-write-file edbuf wbuf)
       (fs/commit wbuf (shell/cur-name inst))
       (ed/textbuf-fini edbuf)
       (set (shell/cur inst) -1)
       (if ((== exit-mode 2)
            (shell/run inst)
            (con/out "RET")
            (mem line ed/textbuf)
            (ed/textbuf-init line)
            (con/in line)
            (ed/textbuf-fini line)
            (con/out "\n")
            (goto again))))))

(fun (shell/remove inst)
  (if ((u8 (shell/cur-name inst))
       (fs/remove (shell/cur-name inst))
       (set (u8 (shell/cur-name inst)) 0))))

(fun (shell/help inst)
  (set (shell/output-ptr inst) (shell/output inst))
  (shell/capture-output "RET - edit\n  r - run\n  X - delete\n  q - reset\n  Q - halt" inst))

(fun (shell/input inst state input)
  (var ed (shell/create-ed inst))
  (if ((== input -11)
       (if (ed
            (shell/end-create inst))
           ((u8 (shell/cur-name inst))
            (shell/ed inst))
           (else
            (shell/start-create inst))))
      (ed
       (ed/input ed state input))
      ((== input ch/q)
       (gfx/loop-quit))
      ((== input -16)
       (if ((> (shell/cur inst) 0)
            (set (shell/cur inst) (- (shell/cur inst) 1)))))
      ((== input -18)
       (if ((< (shell/cur inst) (shell/max inst))
            (set (shell/cur inst) (+ (shell/cur inst) 1)))))
      ((== input ch/r)
       (shell/run inst))
      ((== input ch/X)
       (shell/remove inst))
      ((== input ch/Q)
       (sys/call 60 0))
      ((== input ch/h)
       (shell/help inst))))

(data shell/efuns
  (4 shell/paint
     shell/input))

(fun (shell/main)
  (var inst (sys/page-get))
  (set (shell/cur inst) 0)
  (set (shell/quit inst) 0)
  (set (shell/cur-name inst) (+ inst shell/instance))
  (set (u8 (shell/cur-name inst)) 0)
  (set (shell/output inst) (+ inst shell/instance 512))
  (set (u8 (shell/output inst)) 0)
  (set (shell/create-textbuf inst) 0)
  (set (shell/create-ed inst) 0)
  (gfx/loop inst shell/efuns)
  (sys/page-put inst))
