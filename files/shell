@=

(struct shell/instance
  (:base app/shell-instance)
  files
  cur
  max
  output
  output-ptr
  find-tin
  read-btn
  write-btn
  run-btn
  quit-btn)

(fun (shell/refresh)
  (var root (app/root))
  (if ((var shell (app/r-shell root))
       ((app/-sft-global-input (ui/-elt-functions shell)) shell 0 gfx/ev-state-control ch/l))))

(fun (shell/capture-output str inst)
  (str/cpy (shell/output-ptr inst) str)
  (set (shell/output-ptr inst) (+ (shell/output-ptr inst) (str/len str))))

(struct shell/ed-app
  (:base app/instance)
  ed-name
  ed-text
  ed-ed)

(fun (shell/ed-dirty inst)
  (shell/refresh))

(fun (shell/ed-init inst name rbuf)
  (app/instance-init inst)
  (set (shell/ed-name inst) (str/dup name))
  (set (shell/ed-text inst) (ed/textbuf-new))
  (set (shell/ed-ed inst) (ed/new (shell/ed-name inst) (shell/ed-text inst)))
  (set (ed/dirty-callback (shell/ed-ed inst)) shell/ed-dirty)
  (set (ed/dirty-callback-data (shell/ed-ed inst)) inst)
  (ed/textbuf-read-file (shell/ed-text inst) rbuf)
  (ed/highlight (shell/ed-ed inst)))

(fun (shell/ed-write inst)
  (mem wbuf fs/wbuf)
  (fs/create wbuf)
  (ed/textbuf-write-file (shell/ed-text inst) wbuf)
  (fs/commit wbuf (shell/ed-name inst))
  (set (ed/dirty (shell/ed-ed inst)) 0)
  (ui/paint-needed inst)
  (shell/refresh))

(fun (shell/ed-save inst)
  (if ((ed/dirty (shell/ed-ed inst))
       (shell/ed-write inst))))

(fun (shell/ed-save-all)
  (var al (app/r-apps (app/root)))
  (while al
    (if ((str/eq (app/app-mode (app/al-app al)) "ed")
         (shell/ed-save (app/al-app al))))
    (set al (app/al-next al))))

(fun (shell/ed-fini inst)
  (if ((ed/dirty (shell/ed-ed inst))
       (shell/ed-write inst)))
  (ed/free (shell/ed-ed inst))
  (ed/textbuf-free (shell/ed-text inst))
  (mem/free (shell/ed-name inst))
  (app/instance-fini inst))

(fun (shell/ed-paint inst)
  (ed/paint-with-border (shell/ed-ed inst) 0 0 (ui/elt-width inst) (ui/elt-height inst) (ui/elt-has-focus inst)))

(fun (shell/ed-input inst state input)
  (set (ed/title (shell/ed-ed inst)) (shell/ed-name inst))
  (ui/paint-needed inst)
  (ed/input (shell/ed-ed inst) state input))

(app/instance-functions shell/ed-funcs
  shell/ed-init
  shell/ed-fini
  shell/ed-paint
  shell/ed-input)

(fun (shell/launch-ed name)
  (mem rbuf fs/rbuf)
  (if ((app/switch name "ed")
       (begin))
      ((fs/open rbuf name)
       (app/launch (ui/new shell/ed-app shell/ed-funcs name rbuf) name "ed"))))

(fun (shell/save name)
  (var inst (app/find name "ed"))
  (if (inst
       (shell/ed-save inst))))

(fun (shell/help inst)
  (set (shell/output-ptr inst) (shell/output inst))
  (shell/capture-output "Shell keys:\n  RET - switch to app\n    e - edit source\n    r - restart\n    X - delete\n\nGlobal keys:\nC-x b - switch to shell\nC-x r - restart\nC-x e - edit source\nC-x q - quit\n\n  M-< - previous app\n  M-> - next app" inst))

(struct shell/text-app
  (:base app/instance)
  ta-text)

(fun (shell/text-init inst output)
  (app/instance-init inst)
  (set (shell/ta-text inst) output))

(fun (shell/text-fini inst)
  (sys/page-put (shell/ta-text inst))
  (app/instance-fini inst))

(fun (shell/text-paint inst)
  (var x 4)
  (var y 4)
  (var w (ui/elt-width inst))
  (var h (ui/elt-height inst))
  (var str (shell/ta-text inst))
  (while (and (u8 str)
              (< y (- h 16)))
    (if ((== (u8 str) ch/nl)
         (set x 4)
         (set y (+ y 16)))
        (else
         (set x (+ x (gfx/glyph fonts/mono x y (u8 str))))))
    (if ((> x (- w 14))
         (set x 4)
         (set y (+ y 16))))
    (set str (+ str 1))))

(fun (shell/text-input inst state input))

(app/instance-functions shell/text-funcs
  shell/text-init
  shell/text-fini
  shell/text-paint
  shell/text-input)

(fun (shell/text-capture-output str buf)
  (str/cpy (+ buf (str/len buf)) str))

(fun (shell/launch-book name)
  (var output (sys/page-get))
  (set (u8 output) 0)
  (shell/text-capture-output "Launching " output)
  (shell/text-capture-output name output)
  (shell/text-capture-output ":\n" output)
  (var fail 1)
  (if ((var book (book/get name shell/text-capture-output output))
       (if ((var main (book/search-fun book "main"))
            (set fail 0)
            (main))
           (else
            (shell/text-capture-output "no main function\n" output)))
       (book/unref book)))
  (if (fail
       (app/launch (ui/new shell/text-app shell/text-funcs output) "compile" "log"))
      (else
       (sys/page-put output)))
  (shell/refresh))

(struct shell/file-data
  fd-name
  fd-flags)

(fun (shell/cur-name inst)
  (shell/fd-name (shell/file-data (shell/files inst) (shell/cur inst))))

(fun (shell/compute-flags node buf)
  (var name (fs/node-name node))
  (var app (app/find name "main"))
  (var ed-app (app/find name "ed"))
  (var bk (book/find name))
  (set (u8 buf 0) (if ((and ed-app
                            (ed/dirty (shell/ed-ed ed-app)))
                       ch/*)
                      (else ch/spc)))
  (set (u8 buf 1) (if ((and bk (book/is-out-of-date bk))
                       ch/@)
                      (else ch/spc)))
  (set (u8 buf 2) (if ((and app bk
                            (!= (ui/-eltf-book (ui/-elt-functions app)) bk))
                       ch/#)
                      (else ch/spc)))
  (set (u8 buf 3) 0))

(fun (shell/insert-file node files)
  (var i 0)
  (var tmp)
  (var name (str/dup (fs/node-name node)))
  (var flags (mem/alloc 10))
  (shell/compute-flags node flags)
  (while (and (shell/fd-name (shell/file-data files i))
              (> (str/cmp (shell/fd-name (shell/file-data files i)) name) 0))
    (set i (+ i 1)))
  (while (u64 files i)
    (set tmp (shell/fd-name (shell/file-data files i)))
    (set (shell/fd-name (shell/file-data files i)) name)
    (set name tmp)
    (set tmp (shell/fd-flags (shell/file-data files i)))
    (set (shell/fd-flags (shell/file-data files i)) flags)
    (set flags tmp)
    (set i (+ i 1)))
  (set (shell/fd-name (shell/file-data files i)) name)
  (set (shell/fd-flags (shell/file-data files i)) flags)
  (set (shell/fd-name (shell/file-data files (+ i 1))) 0))

(fun (shell/update inst)
  (var files (mem/alloc (* 128 shell/file-data)))
  (set (u64 files 0) 0)
  (book/reset-out-of-date)
  (fs/list shell/insert-file files)
  (var i 0)
  (while (shell/fd-name (shell/file-data files i))
    ;; (dbg/str " name" (shell/fd-name (shell/file-data files i)))
    ;; (dbg/str " flags" (shell/fd-flags (shell/file-data files i)))
    (set i (+ i 1)))
  (set (shell/max inst) i)
  (if ((shell/files inst)
       (var cur-name (shell/cur-name inst))
       (set i 0)
       (set (shell/cur inst) 0)
       (while (shell/fd-name (shell/file-data files i))
         (if ((== (str/cmp cur-name (shell/fd-name (shell/file-data files i))) 0)
              (set (shell/cur inst) i)))
         (set i (+ i 1)))
       (var old (shell/files inst))
       (set (shell/files inst) files)
       (while (shell/fd-name (shell/file-data old i))
         (mem/free (shell/fd-name (shell/file-data old i)))
         (mem/free (shell/fd-flags (shell/file-data old i)))
         (set i (+ i 1)))
       (mem/free old))
      (else
       (set (shell/cur inst) 0)))
  (set (shell/files inst) files)
  (ui/paint-needed inst))

(fun (shell/cmd-find inst str)
  (mem rbuf fs/rbuf)
  (if ((not (fs/open rbuf str))
       (mem wbuf fs/wbuf)
       (fs/create wbuf)
       (fs/commit wbuf str))
      (else
       (fs/close rbuf)))
  (shell/update inst)
  (var i 0)
  (var files (shell/files inst))
  (while (shell/fd-name (shell/file-data files i))
    (if ((str/eq str (shell/fd-name (shell/file-data files i)))
         (set (shell/cur inst) i)))
    (set i (+ i 1)))
  (ui/textinput-set (shell/find-tin inst) "")
  (ui/set-focus inst)
  (ui/paint-needed inst))

(fun (shell/cmd-read inst)
  (if ((shell/cur-name inst)
       (shell/ed-save-all)
       (tx/launch (shell/cur-name inst)))))

(fun (shell/cmd-write inst)
  (if ((shell/cur-name inst)
       (shell/launch-ed (shell/cur-name inst)))))

(fun (shell/cmd-run inst)
  (if ((shell/cur-name inst)
       (shell/ed-save-all)
       (shell/launch-book (shell/cur-name inst)))))

(fun (shell/cmd-remove inst)
  (if ((shell/cur-name inst)
       (fs/remove (shell/cur-name inst))
       (shell/update inst))))

(fun (shell/cmd-quit inst)
  (shell/ed-save-all)
  (sys/halt))

(fun (shell/instance-init inst)
  (app/shell-instance-init inst)
  (set (shell/files inst) 0)
  (shell/update inst)
  (set (shell/output inst) (mem/alloc 2048))
  (set (u8 (shell/output inst)) 0)
  (set (shell/find-tin inst) (ui/textinput-new shell/cmd-find inst))
  (set (shell/read-btn inst) (ui/button-new "Read" shell/cmd-read inst))
  (set (shell/write-btn inst) (ui/button-new "Write" shell/cmd-write inst))
  (set (shell/run-btn inst) (ui/button-new "Run" shell/cmd-run inst))
  (set (shell/quit-btn inst) (ui/button-new "Quit" shell/cmd-quit inst)))

(fun (shell/instance-fini inst)
  (mem/free (shell/output inst))
  (mem/free (shell/cur-name inst))
  (ui/free (shell/find-tin inst))
  (ui/free (shell/read-btn inst))
  (ui/free (shell/write-btn inst))
  (ui/free (shell/run-btn inst))
  (ui/free (shell/quit-btn inst))
  (app/instance-fini inst))

(fun (shell/draw-file inst index file)
  (var x (gfx/get-x))
  (gfx/draw-string (shell/fd-flags file))
  (gfx/advance-to (+ x 25))
  (if ((and (== index (shell/cur inst)) (ui/elt-has-focus inst))
       (gfx/set-inverse 1)))
  (gfx/advance-to (+ x 30))
  (gfx/draw-string (shell/fd-name file))
  (gfx/advance-to (+ x 200))
  (gfx/set-inverse 0)
  (gfx/newline))

(fun (shell/instance-paint inst)
  (var x 0)
  (var y 0)
  (var w (ui/elt-width inst))
  (var h (ui/elt-height inst))
  (gfx/draw-init x y w h)
  (gfx/rect 0 0 1 (ui/elt-height inst) (gfx/color 0 0 0))
  (gfx/set-font fonts/sans-l)
  (gfx/set-x (+ x 20))
  (gfx/mark-left)
  (gfx/set-font fonts/sans)
  (gfx/newline)
  (gfx/newline)
  (gfx/newline)
  (var i 0)
  (var files (shell/files inst))
  (while (shell/fd-name (shell/file-data files i))
    (shell/draw-file inst i (shell/file-data files i))
    (set i (+ i 1)))
  (gfx/newline)
  (gfx/set-font fonts/mono)
  (gfx/newline)
  (gfx/draw-string (shell/output inst))
  (var bw (/ (- (ui/elt-width inst) (* 4 ui/gap)) 3))
  (var bh ui/button-height)
  (var ui-top (- (ui/elt-height inst) bh ui/gap bh ui/gap))
  (ui/paint inst (shell/find-tin inst) ui/gap (- ui-top 40) (- (ui/elt-width inst) ui/gap ui/gap) ui/textinput-height)
  (ui/paint inst (shell/read-btn inst) ui/gap ui-top bw bh)
  (ui/paint inst (shell/write-btn inst) (+ ui/gap bw ui/gap) ui-top bw bh)
  (ui/paint inst (shell/run-btn inst) (+ ui/gap bw ui/gap bw ui/gap) ui-top bw bh)
  (ui/paint inst (shell/quit-btn inst) ui/gap (+ ui-top bh ui/gap) (- (ui/elt-width inst) ui/gap ui/gap) bh))

(fun (shell/switch-to-or-run inst)
  (if ((and (u8 (shell/cur-name inst))
            (not (app/switch (shell/cur-name inst) "main")))
       (shell/launch-book (shell/cur-name inst)))))

(fun (shell/instance-input inst state input x y)
  (var lh (+ (gfx/get-line-height) 2))
  (if ((== input gfx/ev-button-1-press)
       (var l (- (/ y lh) 3))
       (if ((and (>= l 0) (< l (shell/max inst)))
            (set (shell/cur inst) l)
            (ui/paint-needed inst))))
      ((== state 0)
       (ui/paint-needed inst)
       (if ((== input gfx/ev-key-return)
            (if ((u8 (shell/cur-name inst))
                 (shell/switch-to-or-run inst))))
           ((== input gfx/ev-key-up)
            (if ((> (shell/cur inst) 0)
                 (set (shell/cur inst) (- (shell/cur inst) 1)))))
           ((== input gfx/ev-key-down)
            (if ((< (shell/cur inst) (- (shell/max inst) 1))
                 (set (shell/cur inst) (+ (shell/cur inst) 1)))))
           ((== input ch/s)
            (if ((shell/cur-name inst)
                 (shell/save (shell/cur-name inst)))))
           ((== input ch/e)
            (shell/cmd-write inst))
           ((== input ch/v)
            (shell/cmd-read inst))
           ((== input ch/r)
            (shell/cmd-run inst))
           ((== input ch/S)
            (shell/ed-save-all))
           ((== input ch/X)
            (shell/cmd-remove inst))
           ((== input ch/Q)
            (shell/cmd-quit inst))
           ((== input ch/h)
            (shell/help inst))))))

(fun (shell/instance-global-input inst app state input)
  (var dup-name)
  (if ((== state 0)
       (if  ((== input ch/e)
             (set dup-name (str/dup (app/app-name app)))
             (shell/launch-ed (app/app-name app))
             (mem/free dup-name))
            ((== input ch/v)
             (shell/ed-save-all)
             (ui/paint-needed inst)
             (set dup-name (str/dup (app/app-name app)))
             (tx/launch dup-name)
             (mem/free dup-name))
            ((== input ch/r)
             (shell/ed-save-all)
             (ui/paint-needed inst)
             (set dup-name (str/dup (app/app-name app)))
             (shell/launch-book dup-name)
             (mem/free dup-name))
            ((== input ch/b)
             (ui/set-focus (shell/find-tin inst)))
            ((== input ch/q)
             (if ((not (or (and (str/eq (app/app-name app) "intro")
                                (str/eq (app/app-mode app) "tx"))
                           (== app inst)))
                  (app/quit app))))))
      ((== state gfx/ev-state-control)
       (if ((== input ch/l)
            (shell/update inst)
            (ui/paint-needed (app/r-shell (app/root))))
           ((== input ch/x)
            (app/focus-shell (not (ui/elt-contains-focus inst))))))))

(fun (shell/instance-goto-link inst link)
  (if ((not (app/switch link "tx"))
       (tx/launch link))))

(app/shell-functions shell/funcs
  shell/instance-init
  shell/instance-fini
  shell/instance-paint
  shell/instance-input
  shell/instance-global-input
  shell/instance-goto-link)

(fun (shell/main)
  (app/launch-shell (ui/new shell/instance shell/funcs)))
