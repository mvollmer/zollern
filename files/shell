@** The shell

The shell is the root [book ui user interface] element. It maintains
the narrow navigation column at the right, and also the main
application area.

@=

(struct shell/instance
  (:base ui/element)
  root
  mode
  elements
  ;; ui elements
  read-btn
  read-list
  write-btn
  write-list
  run-btn
  run-list
  minibuf-active
  minibuf-tin
  quit-btn
  restart-btn)
@

@* Elements

@=
(struct shell/elt-link
  el-element
  el-name
  el-mode
  el-next)

(fun (shell/remove-element inst element)
  (if ((ui/elt-contains-focus element)
       (ui/set-focus 0)))
  (var ptr (loc (shell/elements inst)))
  (while (u64 ptr)
    (var l (u64 ptr))
    (if ((== (shell/el-element l) element)
         (set (u64 ptr) (shell/el-next l))
         (mem/free (shell/el-name l))
         (mem/free (shell/el-mode l))
         (mem/free l))
        (else
         (set ptr (loc (shell/el-next l))))))
  (ui/free element)
  (ui/paint-needed (shell/root inst)))

(fun (shell/find-element inst name mode)
  (var l (shell/elements inst))
  (while l
    (if ((and name
              (str/eq (shell/el-name l) name)
              (str/eq (shell/el-mode l) mode))
         (goto done)))
    (set l (shell/el-next l)))
  (label done)
  (and l (shell/el-element l)))

(fun (shell/add-element inst element name mode)
  (var old (shell/find-element inst name mode))
  (if (old
       (shell/remove-element inst old)))
  (set (ui/elt-can-focus element) 1)
  (var l (mem/alloc shell/elt-link))
  (set (shell/el-element l) element)
  (set (shell/el-name l) (str/dup name))
  (set (shell/el-mode l) (str/dup mode))
  (set (shell/el-next l) (shell/elements inst))
  (set (shell/elements inst) l))

@* Writing
@=

(struct shell/ed-app
  (:base ui/element)
  ed-update-func
  ed-update-inst
  ed-name
  ed-text
  ed-ed)

(fun (shell/ed-dirty inst)
  ((shell/ed-update-func inst) (shell/ed-update-inst inst)))

(fun (shell/ed-init inst name rbuf update-func update-inst)
  (ui/element-init inst)
  (set (shell/ed-update-func inst) update-func)
  (set (shell/ed-update-inst inst) update-inst)
  (set (shell/ed-name inst) (str/dup name))
  (set (shell/ed-text inst) (ed/textbuf-new))
  (set (shell/ed-ed inst) (ed/new (shell/ed-name inst) (shell/ed-text inst)))
  (set (ed/dirty-callback (shell/ed-ed inst)) shell/ed-dirty)
  (set (ed/dirty-callback-data (shell/ed-ed inst)) inst)
  (ed/textbuf-read-file (shell/ed-text inst) rbuf)
  (ed/highlight (shell/ed-ed inst)))

(fun (shell/ed-write inst)
  (mem wbuf fs/wbuf)
  (fs/create wbuf)
  (ed/textbuf-write-file (shell/ed-text inst) wbuf)
  (fs/commit wbuf (shell/ed-name inst))
  (set (ed/dirty (shell/ed-ed inst)) 0)
  (ui/paint-needed inst)
  ((shell/ed-update-func inst) (shell/ed-update-inst inst)))

(fun (shell/ed-save inst)
  (if ((ed/dirty (shell/ed-ed inst))
       (shell/ed-write inst))))

(fun (shell/ed-save-all shell-inst)
  (var el (shell/elements shell-inst))
  (while el
    (if ((str/eq (shell/el-mode el) "ed")
         (shell/ed-save (shell/el-element el))))
    (set el (shell/el-next el))))

(fun (shell/ed-fini inst)
  (if ((ed/dirty (shell/ed-ed inst))
       (shell/ed-write inst)))
  (ed/free (shell/ed-ed inst))
  (ed/textbuf-free (shell/ed-text inst))
  (mem/free (shell/ed-name inst))
  (ui/element-fini inst))

(fun (shell/ed-paint inst)
  (ed/paint-with-border (shell/ed-ed inst) 0 0 (ui/elt-width inst) (ui/elt-height inst) (ui/elt-has-focus inst)))

(fun (shell/ed-input inst state input)
  (set (ed/title (shell/ed-ed inst)) (shell/ed-name inst))
  (ui/paint-needed inst)
  (ed/input (shell/ed-ed inst) state input))

(ui/element-functions shell/ed-funcs
  shell/ed-init
  shell/ed-fini
  shell/ed-paint
  shell/ed-input)

(fun (shell/launch-ed inst name update)
  (mem rbuf fs/rbuf)
  (if ((and (not (shell/find-element inst name "ed"))
            (fs/open rbuf name))
       (shell/add-element inst (ui/new shell/ed-app shell/ed-funcs name rbuf update inst) name "ed"))))

@* Running
@=

(fun (shell/launch-book inst name)
  (log/msg "Launching %s:\n" name)
  (var result 0)
  (if ((var book (book/get name log/write 0))
       (if ((var new-func (book/search-fun book "new"))
            (set result (new-func)))
           ((var main-func (book/search-fun book "main"))
            (main-func))
           (else
            (log/write "no 'new' or 'main' function\n")))
       (book/unref book)))
  result)
@

@* ...
@=

(fun (shell/is-unsaved name inst)
  (var element (shell/find-element inst name "ed"))
  (and element (ed/dirty (shell/ed-ed element))))

(fun (shell/compute-flags inst node)
  (var name (fs/node-name node))
  (var bk (book/find name))
  (or (shell/is-unsaved name inst)
      (and bk (book/is-out-of-date bk shell/is-unsaved inst))))

(fun (shell/insert-file node inst)
  (var list (shell/write-list inst))
  (var name (fs/node-name node))
  (var flags (shell/compute-flags inst node))
  (ui/list-add-sorted list 0 flags name name))

(fun (shell/update-files inst)
  (book/reset-out-of-date)
  (ui/list-reset (shell/write-list inst))
  (fs/list shell/insert-file inst)
  (ui/paint-needed inst))

(fun (shell/read-char rbuf)
  (if ((== (fs/rbuf-size rbuf) 0)
       (if ((not (fs/read rbuf))
            (set (fs/rbuf-size rbuf) 0)))))
  (if ((== (fs/rbuf-size rbuf) 0)
       -1)
      (else
       (var c (u8 (fs/rbuf-start rbuf)))
       (set (fs/rbuf-start rbuf) (+ (fs/rbuf-start rbuf) 1))
       (set (fs/rbuf-size rbuf) (- (fs/rbuf-size rbuf) 1))
       c)))

(fun (shell/read-line rbuf line)
  (var ptr line)
  (var c)
  (while (and (>= (set c (shell/read-char rbuf)) 0)
              (!= c ch/nl))
    (set (u8 ptr) c)
    (set ptr (+ ptr 1)))
  (set (u8 ptr) 0)
  (or (> ptr line) (>= c 0)))

(fun (shell/parse-catalog-line line list)
  (var ptr line)
  (while (== (u8 ptr) ch/spc)
    (set ptr (+ ptr 1)))
  (var name 0)
  (if ((!= (u8 ptr) ch/.)
       (set name ptr)
       (while (not (or (== (u8 ptr) 0)
                       (== (u8 ptr) ch/spc)
                       (== (u8 ptr) ch/.)))
         (set ptr (+ ptr 1)))
       (if ((!= (u8 ptr) 0)
            (set (u8 ptr) 0)
            (set ptr (+ ptr 1))))
       (while (== (u8 ptr) ch/spc)
         (set ptr (+ ptr 1)))))
  (var level -1)
  (while (== (u8 ptr) ch/.)
    (set level (+ level 1))
    (set ptr (+ ptr 1)))
  (while (== (u8 ptr) ch/spc)
    (set ptr (+ ptr 1)))
  (if ((u8 ptr)
       (ui/list-add list level 0 name ptr))))

(fun (shell/read-catalog name list)
  (mem rbuf fs/rbuf)
  (mem line 512)
  (if ((fs/open rbuf name)
       (set (fs/rbuf-size rbuf) 0)
       (while (shell/read-line rbuf line)
         (shell/parse-catalog-line line list))
       (fs/close rbuf))))

(fun (shell/update-list inst list catname)
  (ui/list-reset list)
  (shell/read-catalog catname list))

(fun (shell/update inst)
  (shell/update-files inst)
  (shell/update-list inst (shell/read-list inst) "cat")
  (shell/update-list inst (shell/run-list inst) "runcat"))

@* Commands
@=

(fun (shell/current-element-name inst)
  (if ((ui/btn-selected (shell/read-btn inst))
       (ui/list-get-selected (shell/read-list inst)))
      ((ui/btn-selected (shell/write-btn inst))
       (ui/list-get-selected (shell/write-list inst)))
      ((ui/btn-selected (shell/run-btn inst))
       (ui/list-get-selected (shell/run-list inst)))))

(fun (shell/find-current-element inst)
  (if ((ui/btn-selected (shell/read-btn inst))
       (shell/find-element inst (ui/list-get-selected (shell/read-list inst)) "tx"))
      ((ui/btn-selected (shell/write-btn inst))
       (shell/find-element inst (ui/list-get-selected (shell/write-list inst)) "ed"))
      ((ui/btn-selected (shell/run-btn inst))
       (shell/find-element inst (ui/list-get-selected (shell/run-list inst)) "main"))))

(fun (shell/focus-current inst)
  (var cur (shell/find-current-element inst))
  (if ((and cur (ui/elt-can-focus cur))
       (ui/set-focus cur))))

(fun (shell/add-tx-element inst name goto-func)
  (var offset 0)
  (var old-elt (shell/find-element inst name "tx"))
  (if (old-elt
       (set offset (ui/scrollbar-pos (tx/inst-sb old-elt)))))
  (shell/add-element inst (ui/new tx/instance tx/funcs name offset goto-func inst) name "tx"))

(fun (shell/cmd-read-mode inst)
  (ui/button-set-selected (shell/read-btn inst) 1)
  (ui/button-set-selected (shell/write-btn inst) 0)
  (ui/button-set-selected (shell/run-btn inst) 0)
  (ui/paint-needed (shell/root inst)))

(fun (shell/cmd-view inst name)
  (if (name
       (shell/cmd-read-mode inst)
       (ui/list-set-selected (shell/read-list inst) name)
       (set name (ui/list-get-selected (shell/read-list inst)))
       (shell/ed-save-all inst)
       (shell/add-tx-element inst name shell/cmd-view)
       (shell/focus-current inst)
       (shell/update inst)
       (ui/paint-needed (shell/root inst)))))

(fun (shell/cmd-write-mode inst)
  (ui/button-set-selected (shell/read-btn inst) 0)
  (ui/button-set-selected (shell/write-btn inst) 1)
  (ui/button-set-selected (shell/run-btn inst) 0)
  (ui/paint-needed (shell/root inst)))

(fun (shell/cmd-edit inst name)
  (if (name
       (shell/cmd-write-mode inst)
       (ui/list-set-selected (shell/write-list inst) name)
       (set name (ui/list-get-selected (shell/write-list inst)))
       (shell/launch-ed inst name shell/update)
       (shell/focus-current inst)
       (ui/paint-needed (shell/root inst)))))

(fun (shell/cmd-run-mode inst)
  (ui/button-set-selected (shell/read-btn inst) 0)
  (ui/button-set-selected (shell/write-btn inst) 0)
  (ui/button-set-selected (shell/run-btn inst) 1)
  (ui/paint-needed (shell/root inst)))

(fun (shell/show-logview inst)
  (shell/cmd-run-mode inst)
  (ui/list-set-selected (shell/run-list inst) "logview")
  (var elt (shell/find-element inst "logview" "main"))
  (if ((not elt)
       (shell/add-element inst (logview/new) "logview" "main")))
  (ui/paint-needed (shell/root inst)))

(fun (shell/cmd-launch inst name)
  (if ((str/eq name "logview")
       (shell/show-logview inst))
      (else
       (shell/cmd-run-mode inst)
       (ui/list-set-selected (shell/run-list inst) name)
       (set name (ui/list-get-selected (shell/run-list inst)))
       (shell/ed-save-all inst)
       (var new-element (shell/launch-book inst name))
       (if ((not new-element)
            (shell/show-logview inst))
           (else
            (shell/add-element inst new-element name "main")))
       (shell/update inst)))
  (shell/focus-current inst)
  (ui/paint-needed (shell/root inst)))

(fun (shell/cmd-switch-to-or-launch inst name)
  (var elt (shell/find-element inst name "main"))
  (if (elt
       (shell/cmd-run-mode inst)
       (ui/list-set-selected (shell/run-list inst) name))
      (else
       (shell/cmd-launch inst name)))
  (shell/focus-current inst)
  (ui/paint-needed (shell/root inst)))

(fun (shell/cmd-remove inst name)
  (if ((and name (u8 name))
       (fs/remove name)
       (shell/update inst)
       (shell/cmd-write-mode inst))))

(fun (shell/cmd-minibuf inst str)
  (if ((str/prefix str "remove ")
       (shell/cmd-remove inst (+ str 7)))
      ((u8 str)
       (mem rbuf fs/rbuf)
       (if ((not (fs/open rbuf str))
            (mem wbuf fs/wbuf)
            (fs/create wbuf)
            (fs/commit wbuf str)
            (shell/update inst))
           (else
            (fs/close rbuf)))
       (shell/cmd-edit inst str))
      (else
       (shell/cmd-write-mode inst)))
  (set (shell/minibuf-active inst) 0)
  (ui/textinput-set (shell/minibuf-tin inst) "")
  (ui/paint-needed inst))

(fun (shell/cmd-restart inst)
  (shell/cmd-launch inst "boot"))

(fun (shell/cmd-quit inst)
  (shell/ed-save-all inst)
  (sys/halt))

@* Instance
@=

(fun (shell/instance-init inst root)
  (ui/element-init inst)
  (set (shell/root inst) root)
  (set (shell/elements inst) 0)
  (set (shell/minibuf-tin inst) (ui/textinput-new shell/cmd-minibuf inst))
  (set (shell/minibuf-active inst) 0)
  (set (shell/read-btn inst) (ui/button-new "Read" shell/cmd-read-mode inst))
  (set (shell/read-list inst) (ui/list-new shell/cmd-view inst))
  (set (shell/write-btn inst) (ui/button-new "Write" shell/cmd-write-mode inst))
  (set (shell/write-list inst) (ui/list-new shell/cmd-edit inst))
  (set (shell/run-btn inst) (ui/button-new "Run" shell/cmd-run-mode inst))
  (set (shell/run-list inst) (ui/list-new shell/cmd-switch-to-or-launch inst))
  (set (shell/restart-btn inst) (ui/button-new "Restart" shell/cmd-restart inst))
  (set (shell/quit-btn inst) (ui/button-new "Quit" shell/cmd-quit inst))
  (shell/update inst)
  (ui/button-set-selected (shell/read-btn inst) 1))

(fun (shell/instance-fini inst)
  (ui/free (shell/minibuf-tin inst))
  (ui/free (shell/read-btn inst))
  (ui/free (shell/read-list inst))
  (ui/free (shell/write-btn inst))
  (ui/free (shell/write-list inst))
  (ui/free (shell/run-btn inst))
  (ui/free (shell/run-list inst))
  (ui/free (shell/restart-btn inst))
  (ui/free (shell/quit-btn inst))
  (ui/element-fini inst))

(fun (shell/instance-paint inst)
  (var x 0)
  (var y 0)
  (var w (ui/elt-width inst))
  (var h (ui/elt-height inst))
  (gfx/rect 0 0 1 (ui/elt-height inst) (gfx/color 0 0 0))
  (var i 0)
  (if ((ui/btn-selected (shell/read-btn inst))
       (ui/paint inst (shell/read-list inst) 20 40 (- (ui/elt-width inst) 40) (- (ui/elt-height inst) ui/button-height)))
      ((ui/btn-selected (shell/write-btn inst))
       (ui/paint inst (shell/write-list inst) 20 40 (- (ui/elt-width inst) 40) (- (ui/elt-height inst) ui/button-height)))
      ((ui/btn-selected (shell/run-btn inst))
       (ui/paint inst (shell/run-list inst) 20 40 (- (ui/elt-width inst) 40) (- (ui/elt-height inst) ui/button-height))))
  (var bw (/ (- (ui/elt-width inst) (* 4 ui/gap)) 3))
  (var bh ui/button-height)
  (ui/paint inst (shell/read-btn inst) ui/gap ui/gap bw bh)
  (ui/paint inst (shell/write-btn inst) (+ ui/gap bw ui/gap) ui/gap bw bh)
  (ui/paint inst (shell/run-btn inst) (+ ui/gap bw ui/gap bw ui/gap) ui/gap bw bh)
  (var ui-top (- (ui/elt-height inst) ui/textinput-height ui/gap bh ui/gap))
  (if ((shell/minibuf-active inst)
       (ui/paint inst (shell/minibuf-tin inst) ui/gap ui-top (- (ui/elt-width inst) ui/gap ui/gap) ui/textinput-height)))
  (var bw2 (/ (- (ui/elt-width inst) (* 3 ui/gap)) 2))
  (ui/paint inst (shell/restart-btn inst) ui/gap (+ ui-top ui/textinput-height ui/gap) bw2 bh)
  (ui/paint inst (shell/quit-btn inst) (+ ui/gap bw2 ui/gap) (+ ui-top ui/textinput-height ui/gap) bw2 bh))

(fun (shell/instance-input inst state input x y))

(fun (shell/instance-global-input inst state input)
  (var dup-name)
  (var element (shell/find-current-element inst))
  (if ((== state 0)
       (if  ((== input ch/e)
             (shell/cmd-edit inst (shell/current-element-name inst)))
            ((== input ch/v)
             (shell/cmd-view inst (shell/current-element-name inst)))
            ((== input ch/r)
             (shell/cmd-launch inst (shell/current-element-name inst)))
            ((== input ch/b)
             (shell/cmd-write-mode inst)
             (set (shell/minibuf-active inst) 1)
             (ui/set-focus (shell/minibuf-tin inst)))
            ((== input ch/q)
             (if ((and element (not (== element inst)))
                  (shell/remove-element inst element)
                  (ui/paint-needed (shell/root inst)))))
            ((== input ch/R)
             (shell/cmd-restart inst))
            ((== input ch/Q)
             (shell/cmd-quit inst))))
      ((== state gfx/ev-state-control)
       (if ((== input ch/l)
            (shell/update inst)
            (ui/paint-needed (shell/root inst)))))))

(ui/element-functions shell/funcs
  shell/instance-init
  shell/instance-fini
  shell/instance-paint
  shell/instance-input)

@* Fake root

This will eventuall absorb much of the [book app Application]
code and everything will become simpler.

@=
(struct shell/root-instance
  (:base ui/element)
  r-sidebar)

(fun (shell/root-init inst)
  (ui/element-init inst)
  (set (shell/r-sidebar inst) (ui/new shell/instance shell/funcs inst)))

(fun (shell/root-fini inst)
  (ui/free (shell/r-sidebar inst))
  (ui/element-fini inst))

(fun (shell/root-paint inst)
  (var cur (shell/find-current-element (shell/r-sidebar inst)))
  (if (cur
       (ui/paint inst cur 0 0 (ui/elt-height inst) (ui/elt-height inst))))
  (ui/paint inst (shell/r-sidebar inst)
                 (ui/elt-height inst) 0
                 (- (ui/elt-width inst) (ui/elt-height inst)) (ui/elt-height inst)))

(fun (shell/root-input inst state input x y))

(fun (shell/root-global-input inst state input x y)
  (shell/instance-global-input (shell/r-sidebar inst) state input x y))

(ui/element-functions shell/root-funcs
  shell/root-init
  shell/root-fini
  shell/root-paint
  shell/root-input)

(fun (shell/main-loop)
  (var inst (ui/new shell/root-instance shell/root-funcs))
  (set (ctxt/shell context) inst)
  (shell/cmd-view (shell/r-sidebar inst) "intro")
  (ui/loop inst shell/root-global-input inst))
