;; Mandelbrot

(defconst mandel/NORM 1000000)
(defconst mandel/MAX      255)

(defconst mandel/re-min -2500000)
(defconst mandel/re-max  1000000)
(defconst mandel/im-min -1000000)
(defconst mandel/im-max  1000000)

(struct mandel/data
  cur-re-min cur-re-max
  cur-im-min cur-im-max
  x-size y-size
  need-render)

(fun (mandel/iter re im)
  (var i 0)
  (var re_i re)
  (var im_i im)
  (while (< i mandel/MAX)
    (var re_i_2 (/ (* re_i re_i) mandel/NORM))
    (var im_i_2 (/ (* im_i im_i) mandel/NORM))
    (if ((> (+ re_i_2 im_i_2) (* 4 mandel/NORM))
         (goto out)))
    (set im_i (+ (* 2 (/ (* re_i im_i) mandel/NORM)) im))
    (set re_i (+ re_i_2 (- im_i_2) re))
    (set i (+ i 1)))
  (label out)
  i)

(fun (mandel/render-point inst x y)
  (var re-min (mandel/cur-re-min inst))
  (var re-max (mandel/cur-re-max inst))
  (var im-min (mandel/cur-im-min inst))
  (var im-max (mandel/cur-im-max inst))
  (var re (+ re-min (* x (/ (- re-max re-min) (mandel/x-size inst)))))
  (var im (+ im-min (* y (/ (- im-max im-min) (mandel/y-size inst)))))
  (var c (- 255 (mandel/iter re im)))
  (gfx/put-pixel x y (gfx/color (* c 15) (* c 1) (* c 32))))

(fun (mandel/render-h-line inst x1 x2 y)
  (var x x1)
  (while (<= x x2)
    (mandel/render-point inst x y)
    (set x (+ x 1))))

(fun (mandel/get-h-line-color x1 x2 y)
  (var c (gfx/get-pixel x1 y))
  (var x (+ x1 1))
  (while (<= x x2)
    (if ((!= (gfx/get-pixel x y) c)
         (set c -1)
         (goto out)))
    (set x (+ x 1)))
  (label out)
  c)

(fun (mandel/render-v-line inst x y1 y2)
  (var y y1)
  (while (<= y y2)
    (mandel/render-point inst x y)
    (set y (+ y 1))))

(fun (mandel/get-v-line-color x y1 y2)
  (var c (gfx/get-pixel x y1))
  (var y (+ y1 1))
  (while (<= y y2)
    (if ((!= (gfx/get-pixel x y) c)
         (set c -1)
         (goto out)))
    (set y (+ y 1)))
  (label out)
  c)

(fun (mandel/get-rect-color x1 x2 y1 y2)
  (var c (mandel/get-h-line-color x1 x2 y1))
  (if ((or (== c -1)
           (!= (mandel/get-h-line-color x1 x2 y2) c)
           (!= (mandel/get-v-line-color x1 y1 y2) c)
           (!= (mandel/get-v-line-color x2 y1 y2) c))
       (set c -1)))
  c)

(fun (mandel/fill-rect inst x1 x2 y1 y2)
  ;; XXX - must also subdivide when origin is in rectangle
  (if ((or (< (- x2 x1) 2)
           (< (- y2 y1) 2)))
      ((!= (var c (mandel/get-rect-color x1 x2 y1 y2)) -1)
       (gfx/rect x1 y1 (- x2 x1) (- y2 y1) c))
      (else
       (var half-x (/ (+ x1 x2) 2))
       (var half-y (/ (+ y1 y2) 2))
       (mandel/render-h-line inst (+ x1 1) (- x2 1) half-y)
       (mandel/render-v-line inst half-x (+ y1 1) (- half-y 1))
       (mandel/render-v-line inst half-x (+ half-y 1) (- y2 1))
       (mandel/fill-rect inst x1 half-x y1 half-y)
       (mandel/fill-rect inst half-x x2 y1 half-y)
       (mandel/fill-rect inst x1 half-x half-y y2)
       (mandel/fill-rect inst half-x x2 half-y y2))))

(fun (mandel/render-rect inst x1 x2 y1 y2)
  (mandel/render-h-line inst x1 x2 y1)
  (mandel/render-h-line inst x1 x2 y2)
  (mandel/render-v-line inst x1 y1 y2)
  (mandel/render-v-line inst x2 y1 y2)
  (mandel/fill-rect inst x1 x2 y1 y2))

(fun (mandel/render inst)
  (mandel/render-rect inst 0 (- (mandel/x-size inst) 1) 0 (- (mandel/y-size inst) 1))
  (gfx/show))

(fun (mandel/render2 inst)
  (var y 0)
  (while (< y (mandel/y-size inst))
    (mandel/render-h-line inst 0 (mandel/x-size inst) y)
    (set y (+ y 1)))
  (gfx/show))

(fun (mandel/paint inst x y w h)
  (if ((mandel/need-render inst)
       (set (mandel/x-size inst) w)
       (set (mandel/y-size inst) h)
       (mandel/render inst)))
  (set (mandel/need-render inst) 1))

(fun (mandel/input inst state input event-x event-y)
  (set (mandel/need-render inst) 0)
  (if ((and (== state gfx/ev-state-c-x) (== input ch/q))
       (gfx/quit inst)
       (mem/free inst))
      ((== input gfx/ev-key-backspace)
       (var dx1 (- (mandel/cur-re-max inst) (mandel/cur-re-min inst)))
       (var dy1 (- (mandel/cur-im-max inst) (mandel/cur-im-min inst)))
       (set (mandel/cur-re-min inst) (- (mandel/cur-re-min inst) dx1))
       (set (mandel/cur-re-max inst) (+ (mandel/cur-re-max inst) dx1))
       (set (mandel/cur-im-min inst) (- (mandel/cur-im-min inst) dy1))
       (set (mandel/cur-im-max inst) (+ (mandel/cur-im-max inst) dy1))
       (set (mandel/need-render inst) 1))
      ((== input gfx/ev-button-1-press)
       (var re-len (- (mandel/cur-re-max inst) (mandel/cur-re-min inst)))
       (var im-len (- (mandel/cur-im-max inst) (mandel/cur-im-min inst)))
       (var x (+ (mandel/cur-re-min inst) (/ (* event-x re-len) (mandel/x-size inst))))
       (var y (+ (mandel/cur-im-min inst) (/ (* event-y im-len) (mandel/y-size inst))))
       (var dx2 (/ re-len 4))
       (var dy2 (/ im-len 4))
       (set (mandel/cur-re-min inst) (- x dx2))
       (set (mandel/cur-re-max inst) (+ x dx2))
       (set (mandel/cur-im-min inst) (- y dy2))
       (set (mandel/cur-im-max inst) (+ y dy2))
       (set (mandel/need-render inst) 1))))

(book/funtab mandel/efuns
  mandel/paint
  mandel/input)

(fun (mandel/main)
  (var inst (mem/alloc mandel/data))
  (set (mandel/cur-re-min inst) mandel/re-min)
  (set (mandel/cur-re-max inst) mandel/re-max)
  (set (mandel/cur-im-min inst) mandel/im-min)
  (set (mandel/cur-im-max inst) mandel/im-max)
  (set (mandel/need-render inst) 1)
  (gfx/launch inst "mandel" "main" mandel/efuns))
