@** Das Mandelbrot

This is one of the earlier programs written in Zollern, mostly
for nostalgic reasons. Writing this drove home to me the point
that current computers are ridicously fast.

The Mandelbrot set is a famous mathematical construction that
exposes the infinite complexities hidden in a very simple formula.

@* The mathematics

The set is defined to be those numbers [emph c] for which the
following iterated computation does not cause [emph x[sub n]]
to escape to infinity as [emph n] gets bigger and bigger.
@d
[emph x[sub 0] = 0]

[emph x[sub n+1] = x[supsub 2|n] + c]
@
The numbers involved in that computation are [emph complex numbers].

A complex number [emph c] can be expressed with two real numbers
[emph c[sub r]] and [emph c[sub i]]:
@d
[emph c = c[sub r] + i c[sub i]]
@
The [emph i] in this equation is a special number that is not
real. It is defined via [emph i[sup 2]] = -1. It is a [emph imaginary]
number.

Zollern doesn't have complex numbers, only (an approximation to)
real numbers, so we have to write out the computation in terms
of the real and imaginary parts. (For some time, it didn't have
floats either...)

Computation with complex numbers follows the usual arithmetic
rules:
@d
[emph c + d = c[sub r] + d[sub r] + i (c[sub i] + d[sub i] )]
@
@d
[emph c d = (c[sub r] + i c[sub i] ) (d[sub r] + i d[sub i ])]

[emph [hide c d] = c[sub r] d[sub r] + i (c[sub i] d[sub r] + c[sub r] d[sub i ]) + i[sup 2] c[sub i] d[sub i]]

[emph [hide c d] = c[sub r] d[sub r] - c[sub i] d[sub i] + i (c[sub i] d[sub r] + c[sub r] d[sub i ]) ]
@
Computing a square then follows easily:
@d
[emph x[sup 2] = x x]

[emph [hide x[sup 2]] = x[sub r] x[sub r] - x[sub i] x[sub i] + i (x[sub i] x[sub r] + x[sub r] x[sub i] )]

[emph [hide x[sup 2]] = x[supsub 2|r] -x[supsub 2|i] + i 2x[sub i] x[sub r]]
@

Now we can implement the iteration that defines the Mandelbrot
set. But we can't let [emph n] go all the way to infinity, of
course, so we stop after [code max] iterations or when the magnitude
of [emph x] is big enough. For reasons that I can't really explain,
"big enough" means larger than 2 in our case.

Thus, if the value hasn't gone past magnitude 2 within [code max]
iterations, the point is considered to be part of the set. If
it has escaped, we use the number of iterations it took to color
the outside of the set.
@=
(fun (mandel/iter c_re c_im max)
  (var i 0)
  <start with x = c>
  (while (< i max)
    <compute the squares of the real and imaginary parts>
    (if (<the magnitude of x is larger than 2>
         (goto out)))
    <compute x^2 + c>    
    (set i (+ i 1)))
  (label out)
  i)

@= <start with x = c>
(var x_re c_re)
(var x_im c_im)

@= <compute the squares of the real and imaginary parts>
(var x_re_2 (f* x_re x_re))
(var x_im_2 (f* x_im x_im))

@
The magnitude of a complex number is [emph (re[sup 2] + im[sup
2])[sup 0.5]] and if we want to compare it to some other value, it is
more efficient to square both quatities and compare the results,
instead of taking a square root. (At least back in the days.
It might not make any difference here.) So to test whether the
magnitude of x is greater than 2, we check whether [emph re[sup
2] + im[sup 2]] is greater than 4.

This is why we have computed the squares of the real and imaginary
parts earlier on. If the language would have native complex numbers,
we would have to rely on the compiler to make this optimization
for us.

@= <the magnitude of x is larger than 2>
(f> (f+ x_re_2 x_im_2) (i->f 4))

@= <compute x^2 + c>
(set x_im (f+ (f* (i->f 2) x_re x_im) c_im))
(set x_re (f+ x_re_2 (f- 0 x_im_2) c_re))

@* Plotting

Now that we have a function that tells us whether a complex number
belongs to the Mandelbrot set, we only need to compute it for
each pixel of the screen.

The Mandelbrot set has infnite detail and we want to zoom in to
see as much as we can. And also zoom out again, of course.

Thus, the application data for the Mandelbrot viewer contains
the bounds of the complex plane that the [code paint] function
should plot, and the [code input] function modifies them to achieve
the zooming.

@=
(struct mandel/instance
  (base app/instance)
  cur-re-min cur-re-max
  cur-im-min cur-im-max)

@=
<define the [code mandel/render] function>

(fun (mandel/init inst)
  <init zoom>)

(fun (mandel/cleanup inst))

(fun (mandel/paint inst)
  (mandel/render inst))

(fun (mandel/input inst state input event-x event-y)
  (if ((== input gfx/ev-key-backspace)
       <zoom out>
       (app/paint-needed inst))
      ((== input gfx/ev-button-1-press)
       <zoom in>
       (app/paint-needed inst))))
  
(app/functions mandel/funcs
  mandel/init
  mandel/cleanup
  mandel/paint
  mandel/input)

(fun (mandel/main)
  (app/launch (app/new mandel/instance mandel/funcs) "mandel" "main"))

@
Zooming is pretty straightforward. It just looks like a lot of
code because Zollern is so very verbose when accessing structure
fields. Hopefully, we can some day write [code inst.re-min] instead
of [code (mandel/cur-re-min inst)].

@= <zoom out>
(var dx1 (f- (mandel/cur-re-max inst) (mandel/cur-re-min inst)))
(var dy1 (f- (mandel/cur-im-max inst) (mandel/cur-im-min inst)))
(set (mandel/cur-re-min inst) (f- (mandel/cur-re-min inst) dx1))
(set (mandel/cur-re-max inst) (f+ (mandel/cur-re-max inst) dx1))
(set (mandel/cur-im-min inst) (f- (mandel/cur-im-min inst) dy1))
(set (mandel/cur-im-max inst) (f+ (mandel/cur-im-max inst) dy1))

@= <zoom in>
(var re-len (f- (mandel/cur-re-max inst) (mandel/cur-re-min inst)))
(var im-len (f- (mandel/cur-im-max inst) (mandel/cur-im-min inst)))
(var x (f+ (mandel/cur-re-min inst) (f/ (f* (i->f event-x) re-len) (i->f (app/app-width inst)))))
(var y (f+ (mandel/cur-im-min inst) (f/ (f* (i->f event-y) im-len) (i->f (app/app-height inst)))))
(var dx2 (f/ re-len (i->f 4)))
(var dy2 (f/ im-len (i->f 4)))
(set (mandel/cur-re-min inst) (f- x dx2))
(set (mandel/cur-re-max inst) (f+ x dx2))
(set (mandel/cur-im-min inst) (f- y dy2))
(set (mandel/cur-im-max inst) (f+ y dy2))

@
The initial zoom settings should show the whole Mandelbrot set,
and since Zollern has no syntax for literal floating point numbers,
we use integers.

@= <init zoom>
(set (mandel/cur-re-min inst) (i->f -2))
(set (mandel/cur-re-max inst) (i->f 2))
(set (mandel/cur-im-min inst) (i->f -2))
(set (mandel/cur-im-max inst) (i->f 2))

@* Rendering

Computing the color for a single pixel of course calls [code mandel/iter]
for the corresponding complex number. The return value is turned
into a color so that points in the set will be black, and the
rest is pretty arbitrary. It is fun to change the formula just
to see what happens.

Most of the code is again due to Zollern being so verbose with
math and structure accesses.

@= <define the [code mandel/render] function>

(fun (mandel/render-point inst x y)
  (var re-min (mandel/cur-re-min inst))
  (var re-max (mandel/cur-re-max inst))
  (var im-min (mandel/cur-im-min inst))
  (var im-max (mandel/cur-im-max inst))
  (var re (f+ re-min (f* (i->f x) (f/ (f- re-max re-min) (i->f (app/app-width inst))))))
  (var im (f+ im-min (f* (i->f y) (f/ (f- im-max im-min) (i->f (app/app-height inst))))))
  (var c (- 255 (mandel/iter re im 255)))
  (gfx/put-pixel x y (gfx/color (* c 15) (* c 1) (* c 32))))

@
Now that we can render a single point, rendering the whole screen
is trivial. But there is a trick to speed up the computation
enourmously!

If you can find a closed curve in the complex plane (that does
not contain the origin) so that [code mandel/iter] returns the
same value for each point on the curve, then every point inside
the curve will also yield that same value. (citation needed)

We assume that this can be extended to the colors used by [code
mandel/render-point]: If we can find a closed curve of pixels
all of the same color, then we can fill the interior of that
curve with that same color.

The curves that we try are rectangles. First we render the outline
of a rectanle, then we check if the whole thing is the same color.
If so, we are done and fill the rectangle with that color.

If not, the rectangle is subdivided into four by rendering one
horizontal and one vertial line through its center. That gives
us four rectangle outlines, that can be recursively tested for
same-colorness.

So we need functions to render horizontal and vertical lines of
pixels. Easy enough.

@= <define the [code mandel/render] function>
(fun (mandel/render-h-line inst x1 x2 y)
  (var x x1)
  (while (<= x x2) 
    (mandel/render-point inst x y)
    (set x (+ x 1))))

(fun (mandel/render-v-line inst x y1 y2)
  (var y y1)
  (while (<= y y2)
    (mandel/render-point inst x y)
    (set y (+ y 1))))
@
We also need a function to check whether a rectangle is all the
same color. A bit tedious to code, but still easy.

@= <define the [code mandel/render] function>
(fun (mandel/get-h-line-color x1 x2 y)
  (var c (gfx/get-pixel x1 y))
  (var x (+ x1 1))
  (while (<= x x2)
    (if ((!= (gfx/get-pixel x y) c)
         (set c -1)
         (goto out)))
    (set x (+ x 1)))
  (label out)
  c)

(fun (mandel/get-v-line-color x y1 y2)
  (var c (gfx/get-pixel x y1))
  (var y (+ y1 1))
  (while (<= y y2)
    (if ((!= (gfx/get-pixel x y) c)
         (set c -1)
         (goto out)))
    (set y (+ y 1)))
  (label out)
  c)

(fun (mandel/get-rect-color x1 x2 y1 y2)
  (var c (mandel/get-h-line-color x1 x2 y1))
  (if ((or (== c -1)
           (!= (mandel/get-h-line-color x1 x2 y2) c)
           (!= (mandel/get-v-line-color x1 y1 y2) c)
           (!= (mandel/get-v-line-color x2 y1 y2) c))
       (set c -1)))
  c)

@
Now we can put it all together. The recursive step consists of
checking a already rendered rectangle, and either filling it
or subdividing it further.

A special case is important: A rectangle that is only 2 pixels
wide or high will end the recursion as well, since it doesn't
have any interior pixels that would need to be processed.

@= <define the [code mandel/render] function>
(fun (mandel/fill-rect inst x1 x2 y1 y2)
  ;; XXX - must also subdivide when origin is in rectangle
  (if ((or (< (- x2 x1) 2)
           (< (- y2 y1) 2)))
      ((!= (var c (mandel/get-rect-color x1 x2 y1 y2)) -1)
       <fill it with one color>)
      (else
       <subdivide it and recurse>)))

@= <fill it with one color>
(gfx/rect x1 y1 (- x2 x1) (- y2 y1) c))

@= <subdivide it and recurse>
(var half-x (/ (+ x1 x2) 2))
(var half-y (/ (+ y1 y2) 2))
(mandel/render-h-line inst (+ x1 1) (- x2 1) half-y)
(mandel/render-v-line inst half-x (+ y1 1) (- half-y 1))
(mandel/render-v-line inst half-x (+ half-y 1) (- y2 1))
(mandel/fill-rect inst x1 half-x y1 half-y)
(mandel/fill-rect inst half-x x2 y1 half-y)
(mandel/fill-rect inst x1 half-x half-y y2)
(mandel/fill-rect inst half-x x2 half-y y2)

@
The recursive process expects a rendered rectangle outline, so
to get it all started, we need to render one explicitly.

@= <define the [code mandel/render] function>
(fun (mandel/render-rect inst x1 x2 y1 y2)
  (mandel/render-h-line inst x1 x2 y1)
  (mandel/render-h-line inst x1 x2 y2)
  (mandel/render-v-line inst x1 y1 y2)
  (mandel/render-v-line inst x2 y1 y2)
  (mandel/fill-rect inst x1 x2 y1 y2))

(fun (mandel/render inst)
  (mandel/render-rect inst 0 (- (app/app-width inst) 1) 0 (- (app/app-height inst) 1)))

@
And that's the whole story.
