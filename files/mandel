;; Mandelbrot

(defconst mandel/NORM 100000)
(defconst mandel/MAX    255)

(defconst mandel/re-min -250000)
(defconst mandel/re-max  100000)
(defconst mandel/im-min -100000)
(defconst mandel/im-max  100000)

(defconst mandel/x-size 800)
(defconst mandel/y-size 400)

(fun (mandel/iter re im)
  (var i 0)
  (var re_i re)
  (var im_i im)
  (while (< i mandel/MAX)
    (var re_i_2 (/ (* re_i re_i) mandel/NORM))
    (var im_i_2 (/ (* im_i im_i) mandel/NORM))
    (if ((> (+ re_i_2 im_i_2) (* 4 mandel/NORM))
         (goto out)))
    (set im_i (+ (* 2 (/ (* re_i im_i) mandel/NORM)) im))
    (set re_i (+ re_i_2 (- im_i_2) re))
    (set i (+ i 1)))
  (label out)
  i)

(fun (mandel/render re-min re-max im-min im-max)
  (var y 0)
  (while (< y mandel/y-size)
    (if ((== (% y 10) 0)
         (gfx/show)))
    (var x 0)
    (while (< x mandel/x-size)
      (var re (+ re-min (* x (/ (- re-max re-min) mandel/x-size))))
      (var im (+ im-min (* y (/ (- im-max im-min) mandel/y-size))))
      (var c (- 255 (mandel/iter re im)))
      (gfx/put-pixel x y (gfx/color (* c 16) (* c 1) (* c 32)))
      (set x (+ x 1)))
    (set y (+ y 1)))
  (gfx/show))

(fun (mandel/main)
  (var re-min mandel/re-min)
  (var re-max mandel/re-max)
  (var im-min mandel/im-min)
  (var im-max mandel/im-max)
  (var quit 0)
  (mem event gfx/event)
  (while (not quit)
   (mandel/render re-min re-max im-min im-max)
   (gfx/read-event event)
   (if ((== (gfx/ev-type event) 1)
        (sys/call 60 0))
       ((== (gfx/ev-type event) 2)
        (if ((== (gfx/ev-input event) -11)
             (set quit 1))
            ((== (gfx/ev-input event) -1)
             (var x (+ re-min (/ (* (gfx/ev-x event) (- re-max re-min)) mandel/x-size)))
             (var y (+ im-min (/ (* (gfx/ev-y event) (- im-max im-min)) mandel/y-size)))
             (var dx (/ (- re-max re-min) 4))
             (var dy (/ (- im-max im-min) 4))
             (set re-min (- x dx))
             (set re-max (+ x dx))
             (set im-min (- y dy))
             (set im-max (+ y dy))))))))
