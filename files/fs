;;; Files

;; Files never change once they have been completely written.  Files
;; that have not yet been completely written can not be found by name.
;; Writing a file with the same name as an existing file will replace
;; the old file atomically when it is completely written.

;; Layout

(def fs/block-size (* 16 1024))
(def fs/slot-size 256)
(def fs/name-size 64)

(struct fs/disk
  disk-start
  disk-end)

(struct fs/header
  (head-magic u32)
  (head-version u32))

(struct fs/meta
  (node-name u8 fs/name-size)
  (node-size u32)
  (node-ptr u16 (/ (- fs/slot-size fs/name-size 4) 2)))

(fun (fs/init)
  (if (!= (fs/head-magic (fs/disk-start (ctxt/disk context)))
          (+ (* (+ (* (+ (* 76 256) 76) 256) 79) 256) 90))
      (begin
       (dbg/out "wrong magic")
       (sys/call 60 1))))

(fun (fs/list func)
  (var ptr (fs/disk-start (ctxt/disk context)))
  (var i 1)
  (while (< i 64)
   (set ptr (+ ptr fs/slot-size))
   (set i (+ i 1))
   (if (u8 ptr)
       (func ptr))))

;; Reading files

;; - (fs/open buf name)
;;
;; Find the file named NAME and initialize BUF for use with fs/read.
;; Returns zero if there is no file named NAME, non-zero otherwise.
;;
;; - (fs/close buf)
;;
;; Releases the file described by BUF.
;;
;; - (fs/read buf)
;;
;; Updates BUF to describe the next chunk of its file.  Returns zero
;; when the file has been read completely.

(struct fs/rbuf
  (rbuf-slot u16)
  (rbuf-ptr u16)
  (rbuf-start u64)
  (rbuf-size u64))

(fun (fs/open buf name)
  (var ptr (fs/disk-start (ctxt/disk context)))
  (var i 1)
  (while (< i 64)
   (set ptr (+ ptr fs/slot-size))
   (if (str/eq ptr name)
       (begin
        (set (fs/rbuf-slot buf) i)
        (set (fs/rbuf-ptr buf) 0)
        1
        (goto done)))
   (set i (+ i 1)))
  0
  (label done))

(fun (fs/read buf)
  (var node (+ (fs/disk-start (ctxt/disk context)) (* (fs/rbuf-slot buf) fs/slot-size)))
  (var ptr (fs/rbuf-ptr buf))
  (var rest-size (- (fs/node-size node) (* ptr fs/block-size)))
  (if (> rest-size 0)
      (begin
       (set (fs/rbuf-ptr buf) (+ ptr 1))
       (set (fs/rbuf-start buf) (+ (fs/disk-start (ctxt/disk context))
                                   (* (fs/node-ptr node ptr) fs/block-size)))
       (if (> rest-size fs/block-size)
           (set (fs/rbuf-size buf) fs/block-size)
        (set (fs/rbuf-size buf) rest-size))
       1)
   0))

(fun (fs/close buf))
