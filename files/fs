;;; Files

;; Files never change once they have been completely written.  Files
;; that have not yet been completely written can not be found by name.
;; Writing a file with the same name as an existing file will replace
;; the old file atomically when it is completely written.

;; Layout

(defconst fs/block-size (* 16 1024))
(defconst fs/node-size  256)
(defconst fs/name-size  64)
(defconst fs/ptr-size   2)

(defconst fs/node-count (/ fs/block-size fs/node-size))
(defconst fs/ptr-count (/ (- fs/node-size fs/name-size 4 4) fs/ptr-size))
(defconst fs/block-count (+ (* (- fs/node-count 1) fs/ptr-count) 1))

(struct fs/disk
  disk-start
  disk-end)

(struct fs/header
  (head-magic u32)
  (head-version u32))

(struct fs/node
  (node-name u8 fs/name-size)
  (node-size u32)
  (node-time u32)
  (node-ptr u16 fs/ptr-count))

(struct fs/state
  (state-time u32)
  (state-block-flags u8 fs/block-count)
  (state-block-flags-rover u32)
  (state-node-refs u32 fs/node-count))

(fun (fs/alloc-block)
  (var state (ctxt/fs context))
  (var rover (fs/state-block-flags-rover state))
  (var i 1)
  (while (and (< i fs/block-count)
              (fs/state-block-flags state rover))
    (set i (+ i 1))
    (set rover (+ rover 1)))
  (if ((< i fs/block-count)
       (set (fs/state-block-flags state rover) 1)
       (set (fs/state-block-flags-rover state) (+ rover 1))
       rover)
      (else
       0)))

(fun (fs/free-block b)
  (var state (ctxt/fs context))
  (set (fs/state-block-flags state b) 0))

(fun (fs/ref-node n)
  (var state (ctxt/fs context))
  (set (fs/state-node-refs state n) (+ (fs/state-node-refs state n) 1)))

(fun (fs/unref-node n)
  (var state (ctxt/fs context))
  (set (fs/state-node-refs state n) (- (fs/state-node-refs state n) 1))
  (if ((not (fs/state-node-refs state n))
       (var node (+ (fs/disk-start (ctxt/disk context)) (* n fs/node-size)))
       (var s (/ (+ (fs/node-size node) fs/block-size -1) fs/block-size))
       (var j 0)
       (while (< j s)
         (set (fs/state-block-flags state (fs/node-ptr node j)) 0)
         (set j (+ j 1))))))

(fun (fs/alloc-node)
  (var state (ctxt/fs context))
  (var i 1)
  (while (and (< i fs/node-count)
              (> (fs/state-node-refs state i) 0))
    (set i (+ i 1)))
  (if ((< i fs/node-count)
       (fs/ref-node i)
       i)
      (else
       0)))

(fun (fs/init)
  (var disk (ctxt/disk context))
  (dbg/assert-equal (fs/head-magic (fs/disk-start disk))
                    (+ (* (+ (* (+ (* ch/L 256) ch/L) 256) ch/O) 256) ch/Z)
                    "disk magic")
  (dbg/assert-equal (/ (- (fs/disk-end disk) (fs/disk-start disk)) fs/block-size)
                    fs/block-count
                    "disk block count")
  (dbg/assert-less-or-equal fs/state mem/page-size "fs/state size")
  (var state (sys/page-get))
  (set (ctxt/fs context) state)
  (var i 0)
  (while (< i fs/block-count)
    (set (fs/state-block-flags state i) 0)
    (set i (+ i 1)))
  (set (fs/state-block-flags state 0) 1)
  (var time 0)
  (var node (fs/disk-start (ctxt/disk context)))
  (set i 1)
  (while (< i fs/node-count)
    (set (fs/state-node-refs state i) 0)
    (set node (+ node fs/node-size))
    (if ((u8 node)
         (set (fs/state-node-refs state i) 1)
         (if ((> (fs/node-time node) time)
              (set time (fs/node-time node))))
         (var n (/ (+ (fs/node-size node) fs/block-size -1) fs/block-size))
         (var j 0)
         (while (< j n)
           (set (fs/state-block-flags state (fs/node-ptr node j)) 1)
           (set j (+ j 1)))))
    (set i (+ i 1)))
  (set (fs/state-time state) time))

(fun (fs/list func env)
  (var ptr (fs/disk-start (ctxt/disk context)))
  (var i 1)
  (while (< i fs/node-count)
    (set ptr (+ ptr fs/node-size))
    (set i (+ i 1))
    (if ((u8 ptr)
         (func ptr env)))))

;; Reading files

;; - (fs/open buf name)
;;
;; Find the file named NAME and initialize BUF for use with fs/read.
;; Returns zero if there is no file named NAME, non-zero otherwise.
;;
;; - (fs/close buf)
;;
;; Releases the file described by BUF.
;;
;; - (fs/read buf)
;;
;; Updates BUF to describe the next chunk of its file.  Returns zero
;; when the file has been read completely.

(struct fs/rbuf
  (rbuf-node u16)
  (rbuf-ptr u16)
  (rbuf-start u64)
  (rbuf-size u64))

(fun (fs/open buf name)
  (var ptr (fs/disk-start (ctxt/disk context)))
  (var i 1)
  (while (< i 64)
    (set ptr (+ ptr fs/node-size))
    (if ((str/eq ptr name)
         (fs/ref-node i)
         (set (fs/rbuf-node buf) i)
         (set (fs/rbuf-ptr buf) 0)
         1
         (goto done)))
    (set i (+ i 1)))
  0
  (label done))

(fun (fs/read buf)
  (var node (+ (fs/disk-start (ctxt/disk context)) (* (fs/rbuf-node buf) fs/node-size)))
  (var ptr (fs/rbuf-ptr buf))
  (var rest-size (- (fs/node-size node) (* ptr fs/block-size)))
  (if ((> rest-size 0)
       (set (fs/rbuf-ptr buf) (+ ptr 1))
       (set (fs/rbuf-start buf) (+ (fs/disk-start (ctxt/disk context))
                                   (* (fs/node-ptr node ptr) fs/block-size)))
       (if ((> rest-size fs/block-size)
            (set (fs/rbuf-size buf) fs/block-size))
           (else
            (set (fs/rbuf-size buf) rest-size)))
       1)
      (else
       0)))

(fun (fs/close buf)
  (fs/unref-node (fs/rbuf-node buf)))

;; Removing files

(fun (fs/remove name)
  (mem rbuf fs/rbuf)
  (if ((fs/open rbuf name)
       (var node (+ (fs/disk-start (ctxt/disk context)) (* (fs/rbuf-node rbuf) fs/node-size)))
       (set (fs/node-name node 0) 0)
       (fs/unref-node (fs/rbuf-node rbuf))
       (fs/close rbuf))))

;; Writing files

;; - (fs/create wbuf)
;; - (fs/write wbuf buf len)
;; - (fs/commit wbuf name)
;; - (fs/abort wbuf)

(struct fs/wbuf
  (wbuf-node u16)
  (wbuf-ptr u16)
  (wbuf-start u64)
  (wbuf-size u64))

(fun (fs/create wbuf)
  (var n (fs/alloc-node))
  (set (fs/wbuf-node wbuf) n)
  (if (n
       (var node (+ (fs/disk-start (ctxt/disk context)) (* n fs/node-size)))
       (set (fs/node-size node) 0)
       (set (fs/wbuf-ptr wbuf) 0)
       (set (fs/wbuf-start wbuf) 0)
       (set (fs/wbuf-size wbuf) 0))))

(fun (fs/write wbuf buf len)
  (if ((fs/wbuf-node wbuf)
       (var node (+ (fs/disk-start (ctxt/disk context)) (* (fs/wbuf-node wbuf) fs/node-size)))
       (while (> len 0)
         (if ((> (fs/wbuf-size wbuf) 0)
              (var n (if ((< (fs/wbuf-size wbuf) len) (fs/wbuf-size wbuf)) (else len)))
              (mem/cpy (fs/wbuf-start wbuf) buf n)
              (set buf (+ buf n))
              (set len (- len n))
              (set (fs/node-size node) (+ (fs/node-size node) n))
              (set (fs/wbuf-start wbuf) (+ (fs/wbuf-start wbuf) n))
              (set (fs/wbuf-size wbuf) (- (fs/wbuf-size wbuf) n)))
             (else
              (var b (fs/alloc-block))
              (if (b
                   (set (fs/node-ptr node (fs/wbuf-ptr wbuf)) b)
                   (set (fs/wbuf-start wbuf) (+ (fs/disk-start (ctxt/disk context)) (* b fs/block-size)))
                   (set (fs/wbuf-size wbuf) fs/block-size)
                   (set (fs/wbuf-ptr wbuf) (+ (fs/wbuf-ptr wbuf) 1)))
                  (else
                   (dbg/assert 0 "disk full")))))))))

(fun (fs/get-time-stamp)
  (var state (ctxt/fs context))
  (var time (+ (fs/state-time state) 1))
  (set (fs/state-time state) time)
  time)

(fun (fs/commit wbuf name)
  (if ((fs/wbuf-node wbuf)
       (fs/remove name)
       (var node (+ (fs/disk-start (ctxt/disk context)) (* (fs/wbuf-node wbuf) fs/node-size)))
       (mem/cpy node name fs/name-size)
       (set (fs/node-time node) (fs/get-time-stamp))
       1)
      (else
       0)))
