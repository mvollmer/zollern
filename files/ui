@** User interfaces

The user interface of Zollern is constructed from rectangular
areas of the screen, called [emph elements]. There are different
kinds of elements, such as buttons or text inputs. In fact, each
application is implemented as a new kind of element.

Elements form a tree: One element is the root and covers the whole
screen, the sub-elements of that are the applications and the
navigation panel, and then there might be buttons etc within
those.

@* Element objects

Although there are many different kinds of concrete user interface
elements, they all share common features and behavior. Namely,
a element knows where it is on the screen, whether it is currently
visible, what its relations are in the tree of elements, and
some other bits of information. This state of an element is stored
in its [emph fields]. For example, the size of an element is
stored in the [code ui/elt-width] and [code ui/elt-height] fields.

Each element also has a fixed number of things that you can do
with it, called its [emph methods]: You can draw it by invoking
its [emph paint] method, and you can send an input event to it
with the [emph input] method. And although each element can do
these things, each kind does it differently.

New kinds of elements are defined by [emph deriving] a new kind
from an existing [emph base] kind. While doing this, you need
to provide concrete functions that implement each of the methods
of the base element. It is very common to add more fields when
defining a new kind of element, to store the state that is needed
to do its job. You can also add more methods, but this is less
common (and more cumbersome).

The fundamental user element kind is [code ui/element]. Every
other element kind derives directly or indirectly from it.

Deriving from [code ui/element] is done by defining a new structure
type that has [code ui/element] as its first element. Then a
pointer to such an instance is also a pointer to a [code ui/element]
and can be used with the functions in this book.

For example:
@c
(struct my/element
  (:base ui/element)
  my-data)
@
We also need to define the following functions for our new element,
and collect them in a table.
@c
(fun (my/element-init inst)
  (ui/element-init inst)
  (set (my/my-data inst) (mem/alloc 100)))

(fun (my/element-fini inst)
  (mem/free (my/my-data inst))
  (ui/element-fini inst))

(fun (my/element-paint inst)
  (gfx/rect 10 10 10 10 (gfx/color 255 0 0)))

(fun (my/element-input inst state input)
  ...)

(ui/element-functions my/funcs
  my/element-init
  my/element-fini
  my/element-paint
  my/element-input)
@

With these, we can create a new element instance by calling [code
ui/new].
@c
(fun (my/element-new)
  (ui/new my/instance my/funcs))
@
This will allocate [code my/element] bytes of memory and initialize
them to become the instance structure of the new element. As
part of the initialization, [code my/element-init] will be called.

Then, whenever this element needs to be shown, the [code my/element-paint]
function will be called with the instance structure as its argument.
The paint function can retrieve from the instance structure whatever
state is needed to draw the element. It can also treat its argument
as a [code ui/element] structure and access a couple of [emph
their] fields.

@* Base elements

Let's start with the [code ui/element] structure that is shared
by all elements. It's pretty big as far as Zollern is concerned.

@=
(struct ui/element
  -elt-functions
  -elt-next
  -elt-subs
  -elt-x ;; absolute
  -elt-y
  (-elt-flag1 u8)
  (-elt-needs-paint u8)
  (-elt-flag3 u8)
  (-elt-flag4 u8)
  (elt-can-focus u8)
  (elt-has-focus u8)
  (-elt-flag7 u8)
  (-elt-flag8 u8)
  elt-width
  elt-height)
@

You can find the links in it that form the tree of elements, and
the fields that store where the element is positioned on the
screen. The first field, [code -elt-functions], contains a pointer
to the table of method functions, created by [code book/funtab].

@=
(struct ui/element-function-table-type
  -eltf-book
  -eltf-init
  -eltf-fini
  -eltf-paint
  -eltf-input)
@

Function tables are supposed to be defined with the [code ui/element-functions]
macro instead of with [code book/funtab] directly. This way,
you get a syntax error when you forget a function.

@=
(def (ui/element-functions ?name ?init ?fini ?paint ?input)
  (book/funtab ?name ?init ?fini ?paint ?input))
@

Creating new element instances is done with [code ui/new]. We
need some memory for the new instance and then call the [emph
init] method to turn the raw memory into the instance. Initialization
often needs some arguments, so [code ui/new] takes five arbitrary
ones and passes them on to the [emph init] method. You only need
to really pass as many as you need. Pointers, numbers, anything
is fine. The Z1 language doesn't check anything.

The given table of method functions is installed in the new instance,
of course. The reference count of its book is increased to make
sure that the functions actually stay around as long as the instance
does.

@=
(fun (ui/new size functions arg1 arg2 arg3 arg4 arg5)
  (var inst (mem/alloc size))
  (book/funtab-ref functions)
  (set (ui/-elt-functions inst) functions)
  ((ui/-eltf-init functions) inst arg1 arg2 arg3 arg4 arg5)
  inst)
@

Freeing is the exact reverse. Note that there is no help here
regarding when to free an element. You must make sure that the
element is not part of the tree when it is freed, and also not
referenced in other ways, such as being the one that currently
has the keyboard focus.

@=
(fun (ui/free inst)
  ((ui/-eltf-fini (ui/-elt-functions inst)) inst)
  (book/funtab-unref (ui/-elt-functions inst))
  (mem/free inst))
@

And here are the functions for the [emph init] and [emph fini]
methods of the base element. Initialization sets (almost) all
fields to zero, and finalization actually does nothing.

@=
(fun (ui/element-init inst)
  (set (ui/-elt-next inst) 0)
  (set (ui/-elt-subs inst) 0)
  (set (ui/elt-can-focus inst) 0)
  (set (ui/elt-has-focus inst) 0))

(fun (ui/element-fini inst))

@* The element tree

Elements are put into action by making them part of the global
user interface element tree. This tree is constructed anew every
time the event loop draws all elements to the screen, starting
with the root.

The function for the [emph paint] method of an element draws whatever
it needs, and also constructs the element tree below it by calling
[code ui/paint] for all its sub-elements. The sub-elements are
usually created in the [emph init] method function and freed
in the [emph fini] method function, but they can of course also
be created dynamically in response to input events, etc.

After the painting is done, the event loop reads the next input
event and uses the tree that has been constructed during the
previous painting phase to decide to which element to deliver
the event.

@=
(fun (ui/paint inst sub x y w h)
  (mem oldclip gfx/clipstate)
  (if (inst
       (set (ui/-elt-next sub) (ui/-elt-subs inst))
       (set (ui/-elt-subs inst) sub)
       (set x (+ x (ui/-elt-x inst)))
       (set y (+ y (ui/-elt-y inst)))))
  (set (ui/-elt-x sub) x)
  (set (ui/-elt-y sub) y)
  (set (ui/elt-width sub) w)
  (set (ui/elt-height sub) h)
  (set (ui/-elt-subs sub) 0)
  (gfx/push-clip oldclip x y w h)
  ((ui/-eltf-paint (ui/-elt-functions sub)) sub)
  (set (ui/-elt-needs-paint sub) 0)
  (gfx/pop-clip oldclip))
@

Actually, painting does not always start with the root, but with
those elements of the current tree that have the [emph paint-needed]
flag set. Thus, if a button element receives a button press event
and wants to be rendered in a depressed state, it will set its
own [emph paint-needed] flag and the next paint phase will only
draw the button.

@=
(fun (ui/paint-needed inst)
  (set (ui/-elt-needs-paint inst) 1))
@

And here is the function that the event loop calls to find the
elements that need painting.

@=
(fun (ui/paint-if-needed inst)
  (mem oldclip gfx/clipstate)
  (gfx/push-clip oldclip
                 (ui/-elt-x inst) (ui/-elt-y inst)
                 (ui/elt-width inst) (ui/elt-height inst))
  (if ((ui/-elt-needs-paint inst)
       (gfx/clear)
       (set (ui/-elt-subs inst) 0)
       ((ui/-eltf-paint (ui/-elt-functions inst)) inst)
       (set (ui/-elt-needs-paint inst) 0))
      (else
       (var sub (ui/-elt-subs inst))
       (while sub
         (ui/paint-if-needed sub)
         (set sub (ui/-elt-next sub)))))
  (gfx/pop-clip oldclip))
@

@* Keyboard focus

Keyboard events are delivered to the [emph focus] element. When
the event loop reads a press event of the first mouse button,
the element under the mouse pointer becomes the focus element,
if it has the [emph can-focus] flag set. If not, its closest
parent in the element tree that has this flag set, will become
the focus element. You can also call [code ui/set-focus] to manage
it explicitly.

The [code ui/set-focus] function communicates with the event loop
via some global state in the context. This needs to work also
before the event loop has actually started running, so we initialize
it early enough during boot.

@=
(struct ui/context
  c-focus)

(fun (ui/init)
  (var c (mem/alloc ui/context))
  (set (ctxt/ui context) c)
  (set (ui/c-focus c) 0))

(fun (ui/set-focus inst)
  (var c (ctxt/ui context))
  (if ((!= (ui/c-focus c) inst)
       (if ((ui/c-focus c)
            (set (ui/elt-has-focus (ui/c-focus c)) 0)
            (ui/paint-needed (ui/c-focus c))))
       (set (ui/c-focus c) inst)
       (if (inst
            (set (ui/elt-has-focus inst) 1)
            (ui/paint-needed inst))))))
@

As you can see above, the current focus element has the [emph
has-focus] flag set. It's [emph paint] method function should
use this to indicate this fact to the user by drawing a cursor,
for example.

All parents of the focus element in the element tree have their
[emph contains-focus] flag set.

@=
(fun (ui/elt-contains-focus inst)
  (if ((ui/elt-has-focus inst)
       1)
      (else
       (var sub (ui/-elt-subs inst))
       (while sub
         (if ((ui/elt-contains-focus sub)
              (goto done)))
         (set sub (ui/-elt-next sub)))
       (label done)
       (if (sub 1) (else 0)))))

@* Pointer events

Mouse button presses are delivered to the element under the mouse.
We need a function to find that element. It will also find the
closest element that can get the keyboard focus,

@=
(struct ui/query-result
  qr-focus
  qr-top)

(fun (ui/query-xy inst x y res)
  (if ((and (>= x (ui/-elt-x inst))
            (>= y (ui/-elt-y inst))
            (< x (+ (ui/-elt-x inst) (ui/elt-width inst)))
            (< y (+ (ui/-elt-y inst) (ui/elt-height inst))))
       (if ((ui/elt-can-focus inst)
            (set (ui/qr-focus res) inst)))
       (set (ui/qr-top res) inst)
       (var sub (ui/-elt-subs inst))
       (while (and sub (not (ui/query-xy sub x y res)))
         (set sub (ui/-elt-next sub)))
       1)
      (else
       0)))
@

@* Event loop

The event loop has been mention a couple of times already. It
is an actual loop that reads a input event and passes it on to
the [emph input] method of the appropriate element. It also paints
all elements when necessary and pushes the framebuffer out to
the display.

The event loop also recognizes simple [emph mouse gestures]. A
button press will [emph grab] the element under the mouse, and
all subsequent mouse events continue to be delivered to that
element until the button is released again. If the pointer is
actually in the grab element, the event state will have the [code
gfx/ev-state-inside] flag set.

The [code ui/button] element uses this, for example.

@=
(fun (ui/loop root global-input-handler global-input-data)
  (var control-x-prefix 0)
  (var grab 0)
  (var gfx (ctxt/gfx context))
  (gfx/reset-window)
  (gfx/clear)
  (ui/paint 0 root 0 0 (gfx/gfx-screen-width gfx) (gfx/gfx-screen-height gfx))
  (while 1
    (gfx/show-and-get)
    (mem event gfx/event)
    (gfx/read-event event)
    (if ((== (gfx/ev-type event) 1)
         (sys/exit 0))
        ((== (gfx/ev-type event) 3)
         (gfx/resize (gfx/ev-x event) (gfx/ev-y event)))
        ((== (gfx/ev-type event) 2)
         (var state (gfx/ev-state event))
         (var input (gfx/ev-input event))
         (var x (gfx/ev-x event))
         (var y (gfx/ev-y event))
         (if ((and (<= input gfx/ev-move)
                   (>= input gfx/ev-button-3-release))
              (mem res ui/query-result)
              (set (ui/qr-focus res) 0)
              (set (ui/qr-top res) 0)
              (if ((ui/query-xy root x y res)
                   (var top (ui/qr-top res))
                   (var c (ctxt/ui context))
                   (if ((== input gfx/ev-button-1-press)
                        (ui/set-focus (ui/qr-focus res))
                        (set grab top))
                       (else
                        (if ((== top grab)
                             (set state (bit-or state gfx/ev-state-inside))))
                        (if (grab
                             (set top grab)))
                        (if ((== input gfx/ev-button-1-release)
                             (set grab 0)))))
                   ((ui/-eltf-input (ui/-elt-functions top))
                    top state input (- x (ui/-elt-x top)) (- y (ui/-elt-y top))))))
             ((and (not control-x-prefix) (== state gfx/ev-state-control) (== input ch/x))
              (set control-x-prefix 1))
             (else
              (if (control-x-prefix
                   (global-input-handler global-input-data state input x y))
                  (else
                   (var target (ui/c-focus (ctxt/ui context)))
                   (if (target
                        ((ui/-eltf-input (ui/-elt-functions target)) target state input x y)))))
              (set control-x-prefix 0)))))
    (ui/paint-if-needed root)))
@

@* User interface style

@=
(defconst ui/active-red   255)
(defconst ui/active-green 147)
(defconst ui/active-blue    0)
(defconst ui/active-color (gfx/const-color ui/active-red ui/active-green ui/active-blue))

(defconst ui/link-red   255)
(defconst ui/link-green 197)
(defconst ui/link-blue  119)
(defconst ui/link-color (gfx/const-color ui/link-red ui/link-green ui/link-blue))

(defconst ui/selected-red   147)
(defconst ui/selected-green 255)
(defconst ui/selected-blue    0)
(defconst ui/selected-color (gfx/const-color ui/selected-red ui/selected-green ui/selected-blue))

(defconst ui/gap               7)
(defconst ui/button-height    25)
(defconst ui/textinput-height 25)
(defconst ui/scrollbar-width   7)

(fun (ui/tint-active x y w h)
  (gfx/tint-rect-2 x y w h 0 0 0 ui/active-red ui/active-green ui/active-blue))

(fun (ui/tint-selected x y w h)
  (gfx/tint-rect-2 x y w h 0 0 0 ui/selected-red ui/selected-green ui/selected-blue))
@

@* Buttons

Buttons are user interface elements that call a given function
when they are "clicked". A "click" is a mouse gesture where the
mouse button is pressed in the button element and the pointer
is still (or again) in the same element. If the mouse button
is released while the pointer is outside of the element, no "click"
is registered and the callback function is not called.

@=
(struct ui/button
  (:base ui/element)
  btn-label
  btn-pressed
  btn-selected
  btn-click-handler
  btn-click-handler-data)

(fun (ui/button-init inst labl handler handler-data)
  (ui/element-init inst)
  (set (ui/btn-label inst) (str/dup labl))
  (set (ui/btn-pressed inst) 0)
  (set (ui/btn-selected inst) 0)
  (set (ui/btn-click-handler inst) handler)
  (set (ui/btn-click-handler-data inst) handler-data))

(fun (ui/button-fini inst)
  (mem/free (ui/btn-label inst))
  (ui/element-fini inst))

(fun (ui/button-paint inst)
  (var off (if ((ui/btn-pressed inst) 2) (else 0)))
  (gfx/string (+ 5 off) (+ 5 off) fonts/sans (ui/btn-label inst))
  (if ((ui/btn-selected inst)
       (ui/tint-selected 0 0 (ui/elt-width inst) (ui/elt-height inst)))
      (else
       (ui/tint-active 0 0 (ui/elt-width inst) (ui/elt-height inst)))))

(fun (ui/button-input inst state input x y)
  (if ((== input gfx/ev-move)
       (var pressed (!= (bit-and state gfx/ev-state-inside) 0))
       (if ((!= pressed (ui/btn-pressed inst))
            (set (ui/btn-pressed inst) pressed)
            (ui/paint-needed inst))))
      ((== input gfx/ev-button-1-press)
       (set (ui/btn-pressed inst) 1)
       (ui/paint-needed inst))
      ((== input gfx/ev-button-1-release)
       (set (ui/btn-pressed inst) 0)
       (ui/paint-needed inst)
       (if ((== state gfx/ev-state-inside)
            ((ui/btn-click-handler inst) (ui/btn-click-handler-data inst)))))))

(ui/element-functions ui/button-funcs
  ui/button-init
  ui/button-fini
  ui/button-paint
  ui/button-input)

(fun (ui/button-new labl handler handler-data)
  (ui/new ui/button ui/button-funcs labl handler handler-data))

(fun (ui/button-set-selected inst flag)
  (if ((!= (ui/btn-selected inst) flag)
       (set (ui/btn-selected inst) flag)
       (ui/paint-needed inst))))

@* Text inputs

Text inputs are user interface elements that allow the editing
of a single line of text. When the [code RET] key is pressed,
a given function is called.

The editing is implemented by the [book ed Editor] book.

@=
(struct ui/textinput
  (:base ui/element)
  tin-textbuf
  tin-ed
  tin-enter-handler
  tin-enter-handler-data)

(fun (ui/textinput-init inst handler handler-data)
  (ui/element-init inst)
  (set (ui/elt-can-focus inst) 1)
  (set (ui/tin-textbuf inst) (ed/textbuf-new))
  (set (ui/tin-ed inst) (ed/new 0 (ui/tin-textbuf inst)))
  (ed/highlight (ui/tin-ed inst))
  (set (ui/tin-enter-handler inst) handler)
  (set (ui/tin-enter-handler-data inst) handler-data))

(fun (ui/textinput-fini inst)
  (ed/free (ui/tin-ed inst))
  (ed/textbuf-free (ui/tin-textbuf inst))
  (ui/element-fini inst))

(fun (ui/textinput-paint inst)
  (gfx/rect 0 0 (ui/elt-width inst) (ui/elt-height inst) ui/active-color)
  (gfx/rect 2 2 (- (ui/elt-width inst) 4) (- (ui/elt-height inst) 4) (gfx/color 255 255 255))
  (ed/paint (ui/tin-ed inst) 4 4 (- (ui/elt-width inst) 8) (- (ui/elt-height inst) 8) (ui/elt-has-focus inst)))

(fun (ui/textinput-input inst state input x y)
  (if ((== input gfx/ev-key-return)
       ((ui/tin-enter-handler inst) (ui/tin-enter-handler-data inst)
        (ed/textbuf-maybe-as-string (ui/tin-textbuf inst))))
      (else
       (ui/paint-needed inst)
       (ed/input (ui/tin-ed inst) state input x y))))

(ui/element-functions ui/textinput-funcs
  ui/textinput-init
  ui/textinput-fini
  ui/textinput-paint
  ui/textinput-input)

(fun (ui/textinput-new handler handler-data)
  (ui/new ui/textinput ui/textinput-funcs handler handler-data))

(fun (ui/textinput-set inst str)
  (var ed (ui/tin-ed inst))
  (set (ed/point ed) 0)
  (set (ed/mark ed) -1)
  (var n 0)
  (while (u8 str n)
    (set (ed/char ed n) (u8 str))
    (set n (+ n 1)))
  (set (ed/len ed) n)
  (ed/highlight ed)
  (ui/paint-needed inst))

@* Scroll bars

A scrollbar controls how a [emph target] element is drawn. To
make it all work, you have to follow a few rules:

@d
[item - ]The target needs to be painted before the scrollbar.

[item - ]The target needs to call [code ui/scrollbar-pre-paint]
in its paint function before [code ui/scollbar-pos].

[item - ]The target needs to call [code ui/scrollbar-key-input]
in its input function.
@

The [book logview Log viewer] is a good example. It also explain
the motivation for the rules above.

@=
(struct ui/scrollbar
  (:base ui/element)
  sb-target
  sb-pos
  sb-total
  sb-drag-delta)

(fun (ui/scrollbar-init inst target)
  (ui/element-init inst)
  (set (ui/sb-target inst) target)
  (set (ui/sb-pos inst) 0)
  (set (ui/sb-total inst) 0))

(fun (ui/scrollbar-fini inst)
  (ui/element-fini inst))

(fun (ui/scrollbar-paint inst)
  (var h)
  (var p)
  (var target (ui/sb-target inst))
  (if ((< (ui/sb-total inst) (ui/elt-height target))
       (set h (ui/elt-height inst))
       (set p 0))
      (else
       (set h (/ (* (ui/elt-height target) (ui/elt-height inst)) (ui/sb-total inst)))
       (set p (/ (* (ui/elt-height target) (ui/sb-pos inst)) (ui/sb-total inst)))))
  (gfx/rect 2 (+ p 2) (- (ui/elt-width inst) 4) (- h 4) ui/active-color))

(fun (ui/sb-update inst npos)
  (var target (ui/sb-target inst))
  (if ((or (< npos 0)
           (< (ui/sb-total inst) (ui/elt-height target)))
       (set npos 0))
      ((> npos (- (ui/sb-total inst) (ui/elt-height target)))
       (set npos (- (ui/sb-total inst) (ui/elt-height target)))))
  (if ((!= npos (ui/sb-pos inst))
       (set (ui/sb-pos inst) npos)
       (ui/paint-needed inst)
       (ui/paint-needed target))))

(fun (ui/scrollbar-input inst state input x y)
  (var target (ui/sb-target inst))
  (var npos (ui/sb-pos inst))
  (if ((== input gfx/ev-button-1-press)
       (var p (if ((< (ui/sb-total inst) (ui/elt-height target))
                   0)
                  (else
                   (/ (* (ui/elt-height target) (ui/sb-pos inst)) (ui/sb-total inst)))))
       (set (ui/sb-drag-delta inst) (- y p)))
      ((== input gfx/ev-move)
       (var np (- y (ui/sb-drag-delta inst)))
       (set npos (/ (* np (ui/sb-total inst)) (ui/elt-height target)))))
  (ui/sb-update inst npos))

(fun (ui/scrollbar-key-input inst state input)
  (var npos (ui/sb-pos inst))
  (if ((== input gfx/ev-key-down)
       (set npos (+ npos 20)))
      ((== input gfx/ev-scroll-down)
       (set npos (+ npos 100)))
      ((== input gfx/ev-key-page-down)
       (set npos (+ npos 500)))
      ((== input gfx/ev-key-up)
       (set npos (- npos 20)))
      ((== input gfx/ev-scroll-up)
       (set npos (- npos 100)))
      ((== input gfx/ev-key-page-up)
       (set npos (- npos 500))))
  (ui/sb-update inst npos))

(ui/element-functions ui/scrollbar-funcs
  ui/scrollbar-init
  ui/scrollbar-fini
  ui/scrollbar-paint
  ui/scrollbar-input)

(fun (ui/scrollbar-new target)
  (ui/new ui/scrollbar ui/scrollbar-funcs target))

(fun (ui/scrollbar-pre-paint inst total)
  (set (ui/sb-total inst) total))

(fun (ui/scrollbar-pos inst)
  (ui/sb-pos inst))

@* Lists

This is the UI element that implements all the lists you see in
the navigation area. It can show rows of text. Each row has some
textual content, a nesting level, and a symbolic [emph tag].
One row might be selected, and some rows might be [emph flagged].
The element reports clicks on its rows by calling a given function
with the tag of the row.

A list element owns all the memory needed to maintain its state.
If you add a row to it, the element will make copies of all the
strings that are involved.

@=
(struct ui/list
  (:base ui/element)
  l-handler
  l-handler-data
  l-entries
  l-tail
  l-selected)

(struct ui/list-entry
  le-next
  le-parent
  le-level
  le-flags
  le-tag
  le-text)

(fun (ui/list-init inst handler handler-data)
  (ui/element-init inst)
  (set (ui/l-handler inst) handler)
  (set (ui/l-handler-data inst) handler-data)
  (set (ui/l-entries inst) 0)
  (set (ui/l-tail inst) (loc (ui/l-entries inst)))
  (set (ui/l-selected inst) 0))

(fun (ui/list-reset inst)
  (var ptr (ui/l-entries inst))
  (while ptr
    (var next (ui/le-next ptr))
    (mem/free (ui/le-tag ptr))
    (mem/free (ui/le-text ptr))
    (set ptr next))
  (set (ui/l-entries inst) 0)
  (set (ui/l-tail inst) (loc (ui/l-entries inst))))

(fun (ui/list-fini inst)
  (ui/list-reset inst)
  (mem/free (ui/l-selected inst))
  (ui/element-fini inst))
@

To identify the selected row, a list element keeps a string with
the tag of that row. This string is separately allocated; resetting
the list entries will not invalidate this string.

@=
(fun (ui/list-set-selected inst tag)
  (if ((!= tag (ui/l-selected inst))
       (mem/free (ui/l-selected inst))
       (set (ui/l-selected inst) (and tag (str/dup tag))))))

(fun (ui/list-get-selected inst)
  (ui/l-selected inst))

(fun (ui/l-make-entry level flags tag text)
  (var entry (mem/alloc ui/list-entry))
  (set (ui/le-next entry) 0)
  (set (ui/le-parent entry) 0)
  (set (ui/le-level entry) level)
  (set (ui/le-flags entry) flags)
  (set (ui/le-tag entry) (and tag (str/dup tag)))
  (set (ui/le-text entry) (str/dup text))
  entry)

(fun (ui/list-add inst level flags tag text)
  (var entry (ui/l-make-entry level flags tag text))
  (set (u64 (ui/l-tail inst)) entry)
  (set (ui/l-tail inst) (loc (ui/le-next entry))))

(fun (ui/list-add-sorted inst level flags tag text)
  (var entry (ui/l-make-entry level flags tag text))
  (var ptr (loc (ui/l-entries inst)))
  (while (and (u64 ptr) (> (str/cmp (ui/le-text (u64 ptr)) text) 0))
    (set ptr (loc (ui/le-next (u64 ptr)))))
  (set (ui/le-next entry) (u64 ptr))
  (set (u64 ptr) entry))

(fun (ui/list-commit inst)
  (mem parents (* 20 u64))
  (var entry (ui/l-entries inst))
  (while entry
    (var level (ui/le-level entry))
    (set (u64 parents level) entry)
    (if ((> level 0)
         (set (ui/le-parent entry) (u64 parents (- level 1)))))
    (set entry (ui/le-next entry))))
  
@

Painting and input handling and the rest is straightforward.

@=

(fun (ui/l-find-selected inst parents)
  (var entry (ui/l-entries inst))
  (while entry    
    (if ((and (ui/l-selected inst) (ui/le-tag entry) (str/eq (ui/l-selected inst) (ui/le-tag entry)))         
         (goto done)))
    (set (u64 parents (ui/le-level entry)) entry)
    (set entry (ui/le-next entry)))
  (label done)
  entry)

(fun (ui/list-paint inst)
  (var f fonts/sans)
  (var lh (- (gfx/font-ascent f) (gfx/font-descent f)))
  (var y 0)
  (mem parents (* 20 u64))
  (var selected (ui/l-find-selected inst parents))
  (var n-parents (and selected (ui/le-level selected)))
  (var entry (ui/l-entries inst))
  (while entry
    (var level (ui/le-level entry))
    (if ((or (== level 0)
             (and (<= level n-parents) (== (ui/le-parent entry) (u64 parents (- level 1))))
             (== (ui/le-parent entry) selected))
         (gfx/string (+ (* 10 (ui/le-level entry))) y
                     (if ((ui/le-flags entry) fonts/sans-b) (else fonts/sans))
                     (ui/le-text entry))
         (if ((== entry selected)
              (ui/tint-selected 0 y (ui/elt-width inst) lh)))
         (set y (+ y lh 2))))
    (set entry (ui/le-next entry))))

(fun (ui/list-input inst state input x y)
  (if ((== input gfx/ev-button-1-press)
       (var f fonts/sans)
       (var lh (- (gfx/font-ascent f) (gfx/font-descent f)))
       (var index (/ y (+ lh 2)))
       (mem parents (* 20 u64))
       (var selected (ui/l-find-selected inst parents))
       (var n-parents (and selected (ui/le-level selected)))
       (var i 0)
       (var entry (ui/l-entries inst))
       (while entry
         (var level (ui/le-level entry))
         (if ((or (== level 0)
                  (and (<= level n-parents) (== (ui/le-parent entry) (u64 parents (- level 1))))
                  (== (ui/le-parent entry) selected))
              (set index (- index 1))
              (if ((< index 0)
                   (goto done)))))
         (set entry (ui/le-next entry)))
       (label done)
       (if ((and entry (ui/le-tag entry))
            ((ui/l-handler inst) (ui/l-handler-data inst) (ui/le-tag entry)))))))

(ui/element-functions ui/list-funcs
  ui/list-init
  ui/list-fini
  ui/list-paint
  ui/list-input)

(fun (ui/list-new handler handler-data)
  (ui/new ui/list ui/list-funcs handler handler-data))
