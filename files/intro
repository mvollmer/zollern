@** Welcome to Zollern!

Zollern is a useless but fun programming environment. You can
read, write, and run programs.

@* Getting around

The screen shows two windows: a bigger one on the left, and a
smaller one on the right. The bigger one shows the current application,
like the editor for a particular book, or a game, or a book after
running it through the type setter. The smaller one is mostly
for navigation.

(Right now the left window shows the text you are reading, and
the right one indicates that you are in "Read" mode and are currently
looking at the "Introduction".)

You can navigate to other books by clicking on their title in
the navigation window, and you can switch to "Write" or "Run"
mode by clicking on the buttons at the top.

There are also some global keyboard bindings:

@d
To edit the source code of the current application or of the current
book, hit [code C-x e].

To compile and restart the current application, press [code C-x r].

To typeset and view the book of the current application, press
[code C-x v].
@

For example, if you are currently interacting with the Mandelbrot
application, pressing [code C-x v] will switch to its formatted
source code. Pressing [code C-x e] will open that source code
in the editor where you can make changes. And pressing [code
C-x r] in the editor will then compile those changes and start
the new version of the Mandelbrot viewer.

@* How to read a book

Books can contain source code, both as examples and as [emph real]
code. When compiling a book, only real code will be processed,
everything else will be ignored.

Example code looks like this:
@c
(fun (this-will-not-be-compiled)
  .. and can .. be nonsense)
@
while real code looks like this:
@=
(fun (intro/a-real-function x)
  <body of the real function>)
@
The piece in angle brackets, [code <body of the real function>],
is called a [emph fragment]. It will be defined somewhere else in the
book, at a point where it makes sense for the exposition
of the program, even if the compiler wants to see it earlier.
A fragment definition looks like this:

@= <body of the real function>
(* x x)
@

Code is written using [emph s-expression] syntax, like Lisp. But
the Z1 language is nothing like Lisp, it's more like the untyped
predecessors to C. The [book z1-intro Z1 Introduction] has more details.

The [book mandel Mandelbrot] book is a good first read.

@* How to write a book

Books are written in plain text. There is special syntax for using
bold, or italics, for marking the real code sections, defining
fragments, etc. Any of the existing books can be used as examples.
For example, if you want to know how the previous section "How
to read a book" was actually written, hit [code C-x e] right
now! The ultimate details are in the [book tx Typesetting] book.

The editor of course has a number of key bindings that might be
good to know. For now, you have to read the [book ed Editor] book to figure
them out.

There is usually no need to explicitly save a book.

@* What's this all about?

Zollern is about bringing some personal fun back into hacking.
It does the simplest most straighforward thing and doesn't worry
about whether it has a point or matches some best industry practice.

The Z1 language has no memory safety or even a type checker, but
I see nothing wrong in implementing an editor in it. Or a simple
type setter. It can be done and it's just fine. And fun.

But proving that memory safety or type checking is not necessary
is not the point. (there is no point.) There might be a Z2 language
later on, maybe with dynamic types and a garbage collector, or
maybe with a static types and a optimizing compiler. Maybe we
rewrite parts of the editor in it, if that feels like fun.

But Zollern will always use s-expressions, I guess. I find them
elegantly simple, and macros are fun. (But hygienic macros are
not.)

Zollern pretends that the real world doesn't exist. There will
be no HTTP servers, or JSON parsers, or POSIX, or OpenGL. There
is only the x86-64 ISA, ASCII, and a RGBA frame buffer.

It would be fully in the Zollern spirit to invent its own ISA
and run on that, maybe emulated, maybe in an FPGA. That would
be fun. But x86-64 is everywhere and not terrible and super fast.
Which allows us to mostly not worry about optimization at all,
which is fun, too.
