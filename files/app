@** Applications

Applications are, like everything else, very simple in Zollern:
They are purely event-driven, and can draw into a single rectangular
area of the screen. There is no multi-threading, and no background
processing. There is just a global event loop. If an application
takes a long time to process an event (like computing the Mandelbrot
set), this will block everything else and there is no way to
interrupt that. If you code an infinite loop by accident, your
only way out is to restart all of Zollern from the outside.

This is not great, obviously, but sufficient for now.

An application is defined by a set of functions; one for painting,
one for processing events, and a couple more. These functions
are called at approprate times by the global event loop.

The state of an application is stored in its [emph instance] structure,
which is passed to the application functions on every call.

Applications have a [emph name] and a [emph mode]. The name is
usually the name of a book, and the mode is usually one of "main",
"ed", or "tx".

For example, editing the "lang" book will be done with an application
named "lang" in mode "ed". The functions of that application
are from the [code ed] book. Conversely, when playing the Soko
game, there will be an application named "soko" in mode "main",
and its functions will be from the [code soko] book.

@* Application instances

Application instances use a simple form of [emph object orientation].
Each instance structure should be derived from [code app/instance]
and needs to provide implementations of the application methods
in a table created by [code app/functions].

Deriving from [code app/instance] is done by simply defining a
new structure type that has [code app/instance] as its first
element. Then a pointer to such an instance is also a pointer
to a [code app/instance] and can be used with the functions in
this book.

For example:
@c
(struct my/instance
  (base app/instance)
  my-data)
@
We also need to define the following functions for our new application,
and collect them in a table.
@c
(fun (my/init inst)
  (set (my/my-data inst) (mem/alloc 100)))

(fun (my/cleanup inst)
  (mem/free (my/my-data inst)))

(fun (my/paint inst)
  (gfx/rect 10 10 10 10 (gfx/color 255 0 0)))

(fun (my/input inst state input)
  ...)

(app/functions my/funcs
  my/init
  my/cleanup
  my/paint
  my/input)
@

With these, we can launch our application by calling [code app/launch].
@c
(fun (my/main)
  (app/launch (app/new my/instance my/funcs) "my" "main"))
@
This will allocate [code my/instance] bytes of memory and initialize
them to become the instance structure of the new application.
As part of the initialization, [code my/init] will be called.

Then, whenever this application needs to be shown, the [code my/paint]
function will be called with the instance structure as its argument.
The paint function can retrieve from the instance structure whatever
state is needed to draw the application. It can also treat its
argument as a [code app/instance] structure and access a couple
of [emph its] fields.

Let's look at the actual definition of [code app/instance]:

@=
(struct app/instance
  -app-link
  -app-functions
  -app-needs-paint
  -app-x
  -app-y

  app-name
  app-mode
  app-focus
  app-width
  app-height)
@

The fields starting with "-" are meant to be private to this book.
You will see below how they are used. But application functions
are expected to look at the remaining fields. For example, [code
app/app-width] and [code app/app-height] contain the size of
the drawing area that the application is supposed to draw itself
into and the paint function is supposed to take them into account.
But the [code app/-app-x] and [code app/-app-y] fields are private,

Here is how painting works: Each application has a flag that says
whether or not the screen is up-to-date with respect to the state
of the application. If not, the event loop will call the paint
function of that application. The paint function in turn then
uses functions from the [code gfx] book to draw whatever it wants
in the rectangle bounded by (0, 0) and ([emph w, h]).

The "painting needed" flag is maintained by some of the functions
in this book. For example, [code app/launch] will initialize
it to true, and switching to an application will also automatically
cause that application to be painted. But if an application needs
to be painted after an input event, its input function needs
to explicitly set that flag.

This is done with the [code app/paint-needed] function:
@=
(fun (app/paint-needed inst)
  (set (app/-app-needs-paint inst) 1))

@* Application functions

The functions of an application are collected with [code book/funtab].
This allows us to maintain the reference count of the book that
the functions are defined in.

Imagine what would otherwise happen when a book is recompiled.
Say that a application is running that has been launched by the
"my" book. When the "my" book is changed and recompiled, the
new book instance will replace the old one in the global lists
of books. Ordinarily this will remove the old instance from memory.
But the running application still uses the functions in the old
instance of the book, and any request to paint it, or even to
quit it, will result in a crash.

We could be careful when compiling a book and make sure to first
quit any application that uses its code. But its hard to figure
that out for books that are used as indirect dependencies of
other books. So instead, an application calls [code book/ref]
for the book that launches it, and prevents that book from being
prematurely removed from memory.

The [code book/funtab] macro makes it easy to collect a bunch
of functions together with a pointer to the book instance that
they are defined in.

But instead of telling applications to use [code book/funtab]
directly, we wrap it up in our own [code app/functions] macro.
This allows us to give names to the individual functions, and
also causes compilation to fail if an application forgets one.

@=
(struct app/-functab
  -ft-book
  -ft-init
  -ft-cleanup
  -ft-paint
  -ft-input)

(def (app/functions ?name ?init ?cleanup ?paint ?input)
  (book/funtab ?name ?init ?cleanup ?paint ?input))

@* Launching and quitting applications

All applications are maintained via a linked list in the [code
ctxt/app] part of the global context. The first entry in that
list receives (almost) all input events.

@=
(struct app/context
  -ac-apps
  -ac-shell
  -ac-shell-has-focus)

(fun (app/init)
  (var c (mem/alloc app/context))
  (set (ctxt/app context) c)
  (set (app/-ac-apps c) 0)
  (set (app/-ac-shell c) 0)
  (set (app/-ac-shell-has-focus c) 0))
@
Here is a simple function to find an application by name and mode.
@=
(fun (app/find name mode)
  (var c (ctxt/app context))
  (var inst (app/-ac-apps c))
  (while inst
    (if ((and (str/eq (app/app-name inst) name)
              (str/eq (app/app-mode inst) mode))
         (goto done)))
    (set inst (app/-app-link inst)))
  (label done)
  inst)
@
We start with the implementation of quitting an application, because
launching a new application will first quit an existing application
with the same name and mode.

The [code app/quit] function has to walk the list, but it also
has to modify it when removing the instance structure. It does
that by maintaining a pointer to the pointer of the current instance.
@=
(fun (app/-free inst)
  ((app/-ft-cleanup (app/-app-functions inst)) inst)
  (mem/free (app/app-name inst))
  (mem/free (app/app-mode inst))
  (book/funtab-unref (app/-app-functions inst))
  (mem/free inst))
  
(fun (app/quit inst)
  (var c (ctxt/app context))
  (var ptr (loc (app/-ac-apps c)))
  (while (u64 ptr)
    (if ((== (u64 ptr) inst)
         (set (u64 ptr) (app/-app-link inst)))
        (else
         (set ptr (loc (app/-app-link (u64 ptr)))))))
  (if ((== (app/-ac-shell c) inst)
       (set (app/-ac-shell c) 0)))
  (if ((app/-ac-apps c)
       (app/paint-needed (app/-ac-apps c))))
  (app/-free inst))
@

Launching has to allocate the new instance structure, initialize
it, and link it into the list.

Launching is split into two steps: creating the new instance
with [code app/new] and actually linking it into the list so
that the event loop becomes aware of it.

This is done so that we can invent more ways to create instances
and more ways to launch them, without getting into a combinatorial
explosion of create-and-launch functions.

(Indeed, there is a second launch function below. And you can
see that this is very close to some general object orientation
support in Z1 itself, where the instance creation sould be done
by the language, but launching an app is of course our job here.)

Often, the initialization function needs some arguments, and we
make that possible by passing five generic ones from the call
to [code app/new] to the "init" function. Because Z1 doesn't
check anything, you can just pass as many as you need to [code
app/new] and define your init function to expect the same amount
(up to a maximum of five). No type checker will yell at you.

@=
(fun (app/new size functions arg1 arg2 arg3 arg4 arg5)
  (var inst (mem/alloc size))
  (book/funtab-ref functions)
  (set (app/-app-functions inst) functions)
  (set (app/-app-needs-paint inst) 0)
  (set (app/-app-x inst) 0)
  (set (app/-app-y inst) 0)
  (set (app/app-width inst) 0)
  (set (app/app-height inst) 0)
  (set (app/app-focus inst) 0)
  (set (app/app-name inst) 0)
  (set (app/app-mode inst) 0)
  ((app/-ft-init functions) inst arg1 arg2 arg3 arg4 arg5)
  inst)

(fun (app/-init-name-and-mode inst name mode)
  (set (app/app-name inst) (str/dup name))
  (set (app/app-mode inst) (str/dup mode)))

(fun (app/-init-window inst x y w h)
  (set (app/-app-x inst) x)
  (set (app/-app-y inst) y)
  (set (app/app-width inst) w)
  (set (app/app-height inst) h))

(fun (app/launch inst name mode)
  (var old (app/find name mode))
  (if (old
       (app/quit old)))
  (var gfx (ctxt/gfx context))
  (app/-init-name-and-mode inst name mode)
  (app/-init-window inst 0 0 (gfx/gfx-screen-height gfx) (gfx/gfx-screen-height gfx))
  (app/paint-needed inst)
  (set (app/-app-link inst) (app/-ac-apps (ctxt/app context)))
  (set (app/-ac-apps (ctxt/app context)) inst))
@
To switch to an application, its instance is simply moved to the
front of the list.
@=
(fun (app/switch name mode)
  (var c (ctxt/app context))
  (var ptr (loc (app/-ac-apps c)))
  (var found 0)
  (while (u64 ptr)
    (var app (u64 ptr))
    (if ((and (str/eq (app/app-name app) name)
              (str/eq (app/app-mode app) mode))
         (set (u64 ptr) (app/-app-link app))
         (set (app/-app-link app) (app/-ac-apps c))
         (set (app/-ac-apps c) app)
         (app/paint-needed app)
         (set found 1)
         (goto done))
        (else
         (set ptr (loc (app/-app-link app))))))
  (label done)
  found)

@* The shell

There is a special application that has special duties: the shell.
It is always visible in a small sidebar next to the current "real"
application, and it also handles the global input events such
as [code C-x q].

The shell extends the function table of a normal application with
one more entry: the "global input" function, and has its own
launching function, [code app/launch-shell].

Unsurprisingly, the only call to this function is in the "shell"
book.

@=
(struct app/-shell-functab
  (-sft-base app/-functab)
  -sft-global-input)

(def (app/shell-functions ?name ?init ?cleanup ?paint ?input ?global-input)
  (book/funtab ?name ?init ?cleanup ?paint ?input ?global-input))

(fun (app/launch-shell inst)
  (var c (ctxt/app context))
  (if ((app/-ac-shell c)
       (app/quit (app/-ac-shell c))))
  (var gfx (ctxt/gfx context))
  (app/-init-name-and-mode inst "shell" "main")
  (app/-init-window inst
                    (gfx/gfx-screen-height gfx) 0
                    (- (gfx/gfx-screen-width gfx) (gfx/gfx-screen-height gfx)) (gfx/gfx-screen-height gfx))
  (app/paint-needed inst)
  (set (app/-ac-shell c) inst))
@
Since there are two applications on the screen at all times, we
need to decide which one should get input events. This is done
with the [code app/focus-shell] function and a flag in the "app"
context. The event loop looks at that flag to decide where to
deliver input events to.

@=
(fun (app/focus-shell flag)
  (var c (ctxt/app context))
  (set (app/-ac-shell-has-focus c) flag)
  (if ((app/-ac-shell c)
       (app/paint-needed (app/-ac-shell c))))
  (if ((app/-ac-apps c)
       (app/paint-needed (app/-ac-apps c)))))

@* Event loop

The event loop is a literal loop that reads an event with [code
gfx/read-event], dispatches it to the current application, and
repeats. It only stops when there are no applications left, or
when the shell has quit.

Most events are input events that are passed on directly to the
current application, but some are [emph global input events].
The event loop intercepts the [code C-x] key itself and passes
the next input event to the shell. For example, typing [code
C-x e] will cause the event for [code e] to be passed to the
[emph global-input] function of the shell instance. That function
will then open the editor for the source code of the current
application.

@=
(fun (app/-paint-if-needed inst)
  (if ((app/-app-needs-paint inst)
       (gfx/set-window (app/-app-x inst) (app/-app-y inst) (app/app-width inst) (app/app-height inst))
       ((app/-ft-paint (app/-app-functions inst)) inst)
       (set (app/-app-needs-paint inst) 0))))

(fun (app/loop)
  (var c (ctxt/app context))
  (var c-x-prefix 0)
  (while (and (app/-ac-shell c) (app/-ac-apps c))
    (var shell (app/-ac-shell c))
    (var app (app/-ac-apps c))
    (set (app/app-focus shell) (app/-ac-shell-has-focus c))
    (set (app/app-focus app) (not (app/-ac-shell-has-focus c)))
    (app/-paint-if-needed shell)
    (app/-paint-if-needed app)
    (gfx/show)
    (mem event gfx/event)
    (gfx/read-event event)
    (if ((== (gfx/ev-type event) 1)
         (sys/exit 0))
        ((== (gfx/ev-type event) 3)
         (gfx/resize (gfx/ev-x event) (gfx/ev-y event)))
        ((== (gfx/ev-type event) 2)
         (var state (gfx/ev-state event))
         (var input (gfx/ev-input event))
         (var x (gfx/ev-x event))
         (var y (gfx/ev-y event))
         (if ((and (not c-x-prefix) (== state gfx/ev-state-control) (== input ch/x))
              (set c-x-prefix 1))
             (else
              (var target (if ((app/app-focus shell) shell) (else app)))
              (if (c-x-prefix
                   ((app/-sft-global-input (app/-app-functions shell)) shell target state input x y))
                  (else
                   ((app/-ft-input (app/-app-functions target)) target state input x y)))
              (set c-x-prefix 0)))))))
